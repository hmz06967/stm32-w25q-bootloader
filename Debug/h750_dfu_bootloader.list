
h750_dfu_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d258  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800d4f8  0800d4f8  0001d4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d754  0800d754  0001d754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d75c  0800d75c  0001d75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d760  0800d760  0001d760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000144  24000000  0800d764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001028  24000144  0800d8a8  00020144  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400116c  0800d8a8  0002116c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f4f2  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000041e2  00000000  00000000  0003f664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014d8  00000000  00000000  00043848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001358  00000000  00000000  00044d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b118  00000000  00000000  00046078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c907  00000000  00000000  00081190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160350  00000000  00000000  0009da97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fdde7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e0c  00000000  00000000  001fde38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000144 	.word	0x24000144
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d4e0 	.word	0x0800d4e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000148 	.word	0x24000148
 80002dc:	0800d4e0 	.word	0x0800d4e0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__io_putchar>:
  HAL_UART_Transmit(&huart5, (uint8_t*)ptr, len, HAL_MAX_DELAY);
  return len;
}

int __io_putchar(int ch)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint8_t data = (uint8_t)ch;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart5, &data, 1, HAL_MAX_DELAY);
 8000692:	f107 010f 	add.w	r1, r7, #15
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	2201      	movs	r2, #1
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <__io_putchar+0x28>)
 800069e:	f006 fccb 	bl	8007038 <HAL_UART_Transmit>
  return ch;
 80006a2:	687b      	ldr	r3, [r7, #4]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	240001ac 	.word	0x240001ac

080006b0 <JumpToApp>:
  __enable_irq();

  mainApplication();
}

__attribute__ ((noreturn)) void JumpToApp(uint32_t app_address){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	 //printf("[0x%08lX]\r\n", JumpAddress);

	pFunction JumpToApplication;
	uint32_t JumpAddress;

	if ((*(__IO uint32_t*)(app_address) & 0x2FF70000) == 0x24000000) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <JumpToApp+0x5c>)
 80006be:	4013      	ands	r3, r2
 80006c0:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80006c4:	d118      	bne.n	80006f8 <JumpToApp+0x48>
		//SCB->VTOR = app_address;
		//HAL_RCC_DeInit();
	    //HAL_DeInit();

	    /* Jump to user application */
	    JumpAddress = *(__IO uint32_t*) (app_address + 4);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3304      	adds	r3, #4
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	617b      	str	r3, [r7, #20]
	    JumpToApplication = (pFunction) JumpAddress;
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	613b      	str	r3, [r7, #16]
	    printf("Booting: [0x%08lX]\r\n", JumpAddress);
 80006d2:	6979      	ldr	r1, [r7, #20]
 80006d4:	480e      	ldr	r0, [pc, #56]	; (8000710 <JumpToApp+0x60>)
 80006d6:	f00b feff 	bl	800c4d8 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006da:	b672      	cpsid	i
}
 80006dc:	bf00      	nop
	                     SCB_SHCSR_BUSFAULTENA_Msk | \
	                     SCB_SHCSR_MEMFAULTENA_Msk ) ;*/

	    __disable_irq(); //correspond to assembly cmd: CPSID i

	    SCB->VTOR = app_address;//vektor tablosunun konumunu belirle
 80006de:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <JumpToApp+0x64>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6093      	str	r3, [r2, #8]
	    __set_MSP(*(__IO uint32_t*) app_address);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f383 8808 	msr	MSP, r3
}
 80006f0:	bf00      	nop
	    //__enable_irq();

        JumpToApplication();
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	4798      	blx	r3
		//kod bulunamadı
		printf("Pls programing board, Code Run Error\r\n");
		Error_Handler();
	}

}
 80006f6:	e004      	b.n	8000702 <JumpToApp+0x52>
		printf("Pls programing board, Code Run Error\r\n");
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <JumpToApp+0x68>)
 80006fa:	f00b ff73 	bl	800c5e4 <puts>
		Error_Handler();
 80006fe:	f000 fa3b 	bl	8000b78 <Error_Handler>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2ff70000 	.word	0x2ff70000
 8000710:	0800d4f8 	.word	0x0800d4f8
 8000714:	e000ed00 	.word	0xe000ed00
 8000718:	0800d510 	.word	0x0800d510

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	__enable_irq();
#endif
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000720:	f000 f9fc 	bl	8000b1c <MPU_Config>
  //SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f001 fa5a 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f83e 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  ///HAL_SuspendTick();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f000 f934 	bl	8000998 <MX_GPIO_Init>

  MX_QUADSPI_Init();
 8000730:	f000 f8ba 	bl	80008a8 <MX_QUADSPI_Init>
  MX_UART5_Init();
 8000734:	f000 f8e4 	bl	8000900 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  printf("Hi, OZK FLYH7T FW 1.0\r\n");
 8000738:	4815      	ldr	r0, [pc, #84]	; (8000790 <main+0x74>)
 800073a:	f00b ff53 	bl	800c5e4 <puts>
  //printf("Booting\r\n");

  if(QSPI_Init() != HAL_OK){
 800073e:	f000 ff57 	bl	80015f0 <QSPI_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d004      	beq.n	8000752 <main+0x36>
	  printf("QSPI error init \r\n");
 8000748:	4812      	ldr	r0, [pc, #72]	; (8000794 <main+0x78>)
 800074a:	f00b ff4b 	bl	800c5e4 <puts>
	  Error_Handler();
 800074e:	f000 fa13 	bl	8000b78 <Error_Handler>
  }

#ifdef CODE_RUN
  //PF1 (SCL) pini reset ise ana programa dallan
  if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_RESET){
 8000752:	2102      	movs	r1, #2
 8000754:	4810      	ldr	r0, [pc, #64]	; (8000798 <main+0x7c>)
 8000756:	f001 fe3f 	bl	80023d8 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d10b      	bne.n	8000778 <main+0x5c>
		 QSPI_Read(0, read, 4);

		 memcpy(&read_data, (read), 4);
		 printf("[0x%08lX]\r\n", read_data);
#endif
	if(QSPI_EnableMap() != HAL_OK){
 8000760:	f001 f894 	bl	800188c <QSPI_EnableMap>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <main+0x54>
		printf("Enable Map Error\r\n");
 800076a:	480c      	ldr	r0, [pc, #48]	; (800079c <main+0x80>)
 800076c:	f00b ff3a 	bl	800c5e4 <puts>
	}

	//__disable_irq(); // tested, do not change anything
	//GoToUserApp();
	//startMainApp();
	JumpToApp(QSPI_BASE);
 8000770:	f04f 4010 	mov.w	r0, #2415919104	; 0x90000000
 8000774:	f7ff ff9c 	bl	80006b0 <JumpToApp>
	while(1);
  }

#endif

  printf("Boot Mode..\r\n");
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <main+0x84>)
 800077a:	f00b ff33 	bl	800c5e4 <puts>
  //dfu mod on
  MX_USB_DEVICE_Init();
 800077e:	f00b fa15 	bl	800bbac <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(LED_PORT_1, LED_PIN_1, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2101      	movs	r1, #1
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <main+0x88>)
 8000788:	f001 fe3e 	bl	8002408 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078c:	e7fe      	b.n	800078c <main+0x70>
 800078e:	bf00      	nop
 8000790:	0800d538 	.word	0x0800d538
 8000794:	0800d550 	.word	0x0800d550
 8000798:	58021400 	.word	0x58021400
 800079c:	0800d564 	.word	0x0800d564
 80007a0:	0800d578 	.word	0x0800d578
 80007a4:	58020400 	.word	0x58020400

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09c      	sub	sp, #112	; 0x70
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	224c      	movs	r2, #76	; 0x4c
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00b fe86 	bl	800c4c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b fe80 	bl	800c4c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007c8:	2002      	movs	r0, #2
 80007ca:	f003 f8e3 	bl	8003994 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <SystemClock_Config+0xf8>)
 80007d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d6:	4a32      	ldr	r2, [pc, #200]	; (80008a0 <SystemClock_Config+0xf8>)
 80007d8:	f023 0301 	bic.w	r3, r3, #1
 80007dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <SystemClock_Config+0xf8>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <SystemClock_Config+0xfc>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <SystemClock_Config+0xfc>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <SystemClock_Config+0xfc>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000804:	bf00      	nop
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <SystemClock_Config+0xfc>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000812:	d1f8      	bne.n	8000806 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000814:	2303      	movs	r3, #3
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800081e:	2301      	movs	r3, #1
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	2302      	movs	r3, #2
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000832:	2310      	movs	r3, #16
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800083a:	2304      	movs	r3, #4
 800083c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000842:	230c      	movs	r3, #12
 8000844:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000846:	2300      	movs	r3, #0
 8000848:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4618      	mov	r0, r3
 8000854:	f003 fd8e 	bl	8004374 <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800085e:	f000 f98b 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	233f      	movs	r3, #63	; 0x3f
 8000864:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f004 f9ce 	bl	8004c28 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000892:	f000 f971 	bl	8000b78 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3770      	adds	r7, #112	; 0x70
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	58000400 	.word	0x58000400
 80008a4:	58024800 	.word	0x58024800

080008a8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_QUADSPI_Init+0x50>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_QUADSPI_Init+0x54>)
 80008b0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_QUADSPI_Init+0x50>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_QUADSPI_Init+0x50>)
 80008ba:	2204      	movs	r2, #4
 80008bc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_QUADSPI_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 21;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_QUADSPI_Init+0x50>)
 80008c6:	2215      	movs	r2, #21
 80008c8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_QUADSPI_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_3;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_QUADSPI_Init+0x50>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_QUADSPI_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_QUADSPI_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_QUADSPI_Init+0x50>)
 80008e4:	f003 f8a0 	bl	8003a28 <HAL_QSPI_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80008ee:	f000 f943 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	24000160 	.word	0x24000160
 80008fc:	52005000 	.word	0x52005000

08000900 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <MX_UART5_Init+0x90>)
 8000906:	4a23      	ldr	r2, [pc, #140]	; (8000994 <MX_UART5_Init+0x94>)
 8000908:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_UART5_Init+0x90>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_UART5_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_UART5_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_UART5_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_UART5_Init+0x90>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_UART5_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_UART5_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_UART5_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_UART5_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_UART5_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000948:	4811      	ldr	r0, [pc, #68]	; (8000990 <MX_UART5_Init+0x90>)
 800094a:	f006 fb25 	bl	8006f98 <HAL_UART_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 f910 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	480d      	ldr	r0, [pc, #52]	; (8000990 <MX_UART5_Init+0x90>)
 800095c:	f007 fbb5 	bl	80080ca <HAL_UARTEx_SetTxFifoThreshold>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000966:	f000 f907 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4808      	ldr	r0, [pc, #32]	; (8000990 <MX_UART5_Init+0x90>)
 800096e:	f007 fbea 	bl	8008146 <HAL_UARTEx_SetRxFifoThreshold>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000978:	f000 f8fe 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_UART5_Init+0x90>)
 800097e:	f007 fb6b 	bl	8008058 <HAL_UARTEx_DisableFifoMode>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000988:	f000 f8f6 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	240001ac 	.word	0x240001ac
 8000994:	40005000 	.word	0x40005000

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	4b57      	ldr	r3, [pc, #348]	; (8000b0c <MX_GPIO_Init+0x174>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a55      	ldr	r2, [pc, #340]	; (8000b0c <MX_GPIO_Init+0x174>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b53      	ldr	r3, [pc, #332]	; (8000b0c <MX_GPIO_Init+0x174>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	623b      	str	r3, [r7, #32]
 80009ca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b4f      	ldr	r3, [pc, #316]	; (8000b0c <MX_GPIO_Init+0x174>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	4a4e      	ldr	r2, [pc, #312]	; (8000b0c <MX_GPIO_Init+0x174>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009dc:	4b4b      	ldr	r3, [pc, #300]	; (8000b0c <MX_GPIO_Init+0x174>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	61fb      	str	r3, [r7, #28]
 80009e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ea:	4b48      	ldr	r3, [pc, #288]	; (8000b0c <MX_GPIO_Init+0x174>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <MX_GPIO_Init+0x174>)
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fa:	4b44      	ldr	r3, [pc, #272]	; (8000b0c <MX_GPIO_Init+0x174>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	f003 0308 	and.w	r3, r3, #8
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0e:	4a3f      	ldr	r2, [pc, #252]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a18:	4b3c      	ldr	r3, [pc, #240]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a26:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	4a37      	ldr	r2, [pc, #220]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a2e:	f043 0320 	orr.w	r3, r3, #32
 8000a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a36:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	f003 0320 	and.w	r3, r3, #32
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a44:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	4a30      	ldr	r2, [pc, #192]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a54:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	4a28      	ldr	r2, [pc, #160]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a72:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	4a21      	ldr	r2, [pc, #132]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_GPIO_Init+0x174>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	481b      	ldr	r0, [pc, #108]	; (8000b10 <MX_GPIO_Init+0x178>)
 8000aa4:	f001 fcb0 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4819      	ldr	r0, [pc, #100]	; (8000b14 <MX_GPIO_Init+0x17c>)
 8000aae:	f001 fcab 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4814      	ldr	r0, [pc, #80]	; (8000b18 <MX_GPIO_Init+0x180>)
 8000ac6:	f001 fad7 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aca:	2301      	movs	r3, #1
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <MX_GPIO_Init+0x178>)
 8000ae2:	f001 fac9 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_GPIO_Init+0x17c>)
 8000afe:	f001 fabb 	bl	8002078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	bf00      	nop
 8000b04:	3738      	adds	r7, #56	; 0x38
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	58020800 	.word	0x58020800
 8000b14:	58020400 	.word	0x58020400
 8000b18:	58021400 	.word	0x58021400

08000b1c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b22:	463b      	mov	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b2e:	f001 fa27 	bl	8001f80 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b32:	2301      	movs	r3, #1
 8000b34:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000b3a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000b3e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4MB;
 8000b40:	2315      	movs	r3, #21
 8000b42:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b60:	463b      	mov	r3, r7
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fa44 	bl	8001ff0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8000b68:	2006      	movs	r0, #6
 8000b6a:	f001 fa21 	bl	8001fb0 <HAL_MPU_Enable>

}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4804      	ldr	r0, [pc, #16]	; (8000b90 <Error_Handler+0x18>)
 8000b80:	f001 fc5b 	bl	800243a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b88:	f001 f8ba 	bl	8001d00 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000b8c:	e7f6      	b.n	8000b7c <Error_Handler+0x4>
 8000b8e:	bf00      	nop
 8000b90:	58020400 	.word	0x58020400

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_MspInit+0x30>)
 8000b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba0:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_MspInit+0x30>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MspInit+0x30>)
 8000bac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	58024400 	.word	0x58024400

08000bc8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0be      	sub	sp, #248	; 0xf8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	22c0      	movs	r2, #192	; 0xc0
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00b fc6d 	bl	800c4c8 <memset>
  if(hqspi->Instance==QUADSPI)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a67      	ldr	r2, [pc, #412]	; (8000d90 <HAL_QSPI_MspInit+0x1c8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	f040 80c7 	bne.w	8000d88 <HAL_QSPI_MspInit+0x1c0>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f004 fb96 	bl	8005340 <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8000c1a:	f7ff ffad 	bl	8000b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000c1e:	4b5d      	ldr	r3, [pc, #372]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c20:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c24:	4a5b      	ldr	r2, [pc, #364]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000c2e:	4b59      	ldr	r3, [pc, #356]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3c:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	4a54      	ldr	r2, [pc, #336]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c44:	f043 0310 	orr.w	r3, r3, #16
 8000c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4c:	4b51      	ldr	r3, [pc, #324]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	61bb      	str	r3, [r7, #24]
 8000c58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	4a4c      	ldr	r2, [pc, #304]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6a:	4b4a      	ldr	r3, [pc, #296]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c78:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	4a45      	ldr	r2, [pc, #276]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c80:	f043 0320 	orr.w	r3, r3, #32
 8000c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c88:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	f003 0320 	and.w	r3, r3, #32
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	4a3d      	ldr	r2, [pc, #244]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca6:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <HAL_QSPI_MspInit+0x1cc>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ccc:	2309      	movs	r3, #9
 8000cce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	482f      	ldr	r0, [pc, #188]	; (8000d98 <HAL_QSPI_MspInit+0x1d0>)
 8000cda:	f001 f9cd 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cde:	2340      	movs	r3, #64	; 0x40
 8000ce0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cfc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4826      	ldr	r0, [pc, #152]	; (8000d9c <HAL_QSPI_MspInit+0x1d4>)
 8000d04:	f001 f9b8 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d08:	2340      	movs	r3, #64	; 0x40
 8000d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d20:	2309      	movs	r3, #9
 8000d22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481c      	ldr	r0, [pc, #112]	; (8000da0 <HAL_QSPI_MspInit+0x1d8>)
 8000d2e:	f001 f9a3 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4811      	ldr	r0, [pc, #68]	; (8000da0 <HAL_QSPI_MspInit+0x1d8>)
 8000d5a:	f001 f98d 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d76:	2309      	movs	r3, #9
 8000d78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d80:	4619      	mov	r1, r3
 8000d82:	4808      	ldr	r0, [pc, #32]	; (8000da4 <HAL_QSPI_MspInit+0x1dc>)
 8000d84:	f001 f978 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000d88:	bf00      	nop
 8000d8a:	37f8      	adds	r7, #248	; 0xf8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	52005000 	.word	0x52005000
 8000d94:	58024400 	.word	0x58024400
 8000d98:	58021000 	.word	0x58021000
 8000d9c:	58021800 	.word	0x58021800
 8000da0:	58021400 	.word	0x58021400
 8000da4:	58020400 	.word	0x58020400

08000da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0bc      	sub	sp, #240	; 0xf0
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	22c0      	movs	r2, #192	; 0xc0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f00b fb7d 	bl	800c4c8 <memset>
  if(huart->Instance==UART5)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a39      	ldr	r2, [pc, #228]	; (8000eb8 <HAL_UART_MspInit+0x110>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d16a      	bne.n	8000eae <HAL_UART_MspInit+0x106>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000dd8:	f04f 0202 	mov.w	r2, #2
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dea:	f107 0318 	add.w	r3, r7, #24
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 faa6 	bl	8005340 <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dfa:	f7ff febd 	bl	8000b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000dfe:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <HAL_UART_MspInit+0x114>)
 8000e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e04:	4a2d      	ldr	r2, [pc, #180]	; (8000ebc <HAL_UART_MspInit+0x114>)
 8000e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <HAL_UART_MspInit+0x114>)
 8000e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <HAL_UART_MspInit+0x114>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <HAL_UART_MspInit+0x114>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <HAL_UART_MspInit+0x114>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <HAL_UART_MspInit+0x114>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	4a1e      	ldr	r2, [pc, #120]	; (8000ebc <HAL_UART_MspInit+0x114>)
 8000e42:	f043 0308 	orr.w	r3, r3, #8
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <HAL_UART_MspInit+0x114>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e72:	2308      	movs	r3, #8
 8000e74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <HAL_UART_MspInit+0x118>)
 8000e80:	f001 f8fa 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e84:	2304      	movs	r3, #4
 8000e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <HAL_UART_MspInit+0x11c>)
 8000eaa:	f001 f8e5 	bl	8002078 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	37f0      	adds	r7, #240	; 0xf0
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40005000 	.word	0x40005000
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58020800 	.word	0x58020800
 8000ec4:	58020c00 	.word	0x58020c00

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>
	...

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <HardFault_Handler+0x10>)
 8000ed8:	f001 faaf 	bl	800243a <HAL_GPIO_TogglePin>
 8000edc:	e7fa      	b.n	8000ed4 <HardFault_Handler+0x4>
 8000ede:	bf00      	nop
 8000ee0:	58020800 	.word	0x58020800

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <MemManage_Handler+0x10>)
 8000eec:	f001 faa5 	bl	800243a <HAL_GPIO_TogglePin>
 8000ef0:	e7fa      	b.n	8000ee8 <MemManage_Handler+0x4>
 8000ef2:	bf00      	nop
 8000ef4:	58020800 	.word	0x58020800

08000ef8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <BusFault_Handler+0x4>

08000efe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <UsageFault_Handler+0x4>

08000f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f32:	f000 fec5 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <OTG_FS_IRQHandler+0x10>)
 8000f42:	f001 fc28 	bl	8002796 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	24000830 	.word	0x24000830

08000f50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e00a      	b.n	8000f78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f62:	f3af 8000 	nop.w
 8000f66:	4601      	mov	r1, r0
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	b2ca      	uxtb	r2, r1
 8000f70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbf0      	blt.n	8000f62 <_read+0x12>
  }

  return len;
 8000f80:	687b      	ldr	r3, [r7, #4]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e009      	b.n	8000fb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fb6d 	bl	8000684 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbf1      	blt.n	8000f9c <_write+0x12>
  }
  return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_close>:

int _close(int file)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fea:	605a      	str	r2, [r3, #4]
  return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_isatty>:

int _isatty(int file)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f00b fa0a 	bl	800c474 <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	38010000 	.word	0x38010000
 800108c:	00000400 	.word	0x00000400
 8001090:	24000240 	.word	0x24000240
 8001094:	24001170 	.word	0x24001170

08001098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800109c:	4b37      	ldr	r3, [pc, #220]	; (800117c <SystemInit+0xe4>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a36      	ldr	r2, [pc, #216]	; (800117c <SystemInit+0xe4>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ac:	4b34      	ldr	r3, [pc, #208]	; (8001180 <SystemInit+0xe8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	2b06      	cmp	r3, #6
 80010b6:	d807      	bhi.n	80010c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010b8:	4b31      	ldr	r3, [pc, #196]	; (8001180 <SystemInit+0xe8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f023 030f 	bic.w	r3, r3, #15
 80010c0:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <SystemInit+0xe8>)
 80010c2:	f043 0307 	orr.w	r3, r3, #7
 80010c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010c8:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <SystemInit+0xec>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a2d      	ldr	r2, [pc, #180]	; (8001184 <SystemInit+0xec>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <SystemInit+0xec>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <SystemInit+0xec>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4929      	ldr	r1, [pc, #164]	; (8001184 <SystemInit+0xec>)
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <SystemInit+0xf0>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <SystemInit+0xe8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <SystemInit+0xe8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 030f 	bic.w	r3, r3, #15
 80010fa:	4a21      	ldr	r2, [pc, #132]	; (8001180 <SystemInit+0xe8>)
 80010fc:	f043 0307 	orr.w	r3, r3, #7
 8001100:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <SystemInit+0xec>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <SystemInit+0xec>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <SystemInit+0xec>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <SystemInit+0xec>)
 8001116:	4a1d      	ldr	r2, [pc, #116]	; (800118c <SystemInit+0xf4>)
 8001118:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <SystemInit+0xec>)
 800111c:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <SystemInit+0xf8>)
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <SystemInit+0xec>)
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <SystemInit+0xfc>)
 8001124:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <SystemInit+0xec>)
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <SystemInit+0xec>)
 800112e:	4a19      	ldr	r2, [pc, #100]	; (8001194 <SystemInit+0xfc>)
 8001130:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <SystemInit+0xec>)
 8001134:	2200      	movs	r2, #0
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <SystemInit+0xec>)
 800113a:	4a16      	ldr	r2, [pc, #88]	; (8001194 <SystemInit+0xfc>)
 800113c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <SystemInit+0xec>)
 8001140:	2200      	movs	r2, #0
 8001142:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <SystemInit+0xec>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <SystemInit+0xec>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <SystemInit+0xec>)
 8001152:	2200      	movs	r2, #0
 8001154:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <SystemInit+0x100>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <SystemInit+0x104>)
 800115c:	4013      	ands	r3, r2
 800115e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001162:	d202      	bcs.n	800116a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <SystemInit+0x108>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <SystemInit+0x10c>)
 800116c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001170:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	52002000 	.word	0x52002000
 8001184:	58024400 	.word	0x58024400
 8001188:	eaf6ed7f 	.word	0xeaf6ed7f
 800118c:	02020200 	.word	0x02020200
 8001190:	01ff0000 	.word	0x01ff0000
 8001194:	01010280 	.word	0x01010280
 8001198:	5c001000 	.word	0x5c001000
 800119c:	ffff0000 	.word	0xffff0000
 80011a0:	51008108 	.word	0x51008108
 80011a4:	52004000 	.word	0x52004000

080011a8 <QSPI_If_Init_FS>:

/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful,  else.
  */
uint16_t QSPI_If_Init_FS(void){
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

	return (USBD_OK);
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <QSPI_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful,  else
  */
uint16_t QSPI_If_DeInit_FS(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return (USBD_OK);
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <QSPI_If_Erase_FS>:
/**
  * @brief  Erase block(64KB).
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful,  else.
  */
uint16_t QSPI_If_Erase_FS(uint32_t Add){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	//printf("erase flag partition ...\r\n");
	state = USBD_FAIL;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <QSPI_If_Erase_FS+0x5c>)
 80011d2:	2203      	movs	r2, #3
 80011d4:	801a      	strh	r2, [r3, #0]
	///blue led on

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2101      	movs	r1, #1
 80011da:	4813      	ldr	r0, [pc, #76]	; (8001228 <QSPI_If_Erase_FS+0x60>)
 80011dc:	f001 f914 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2101      	movs	r1, #1
 80011e4:	4811      	ldr	r0, [pc, #68]	; (800122c <QSPI_If_Erase_FS+0x64>)
 80011e6:	f001 f90f 	bl	8002408 <HAL_GPIO_WritePin>
	printf("erase flag partition..\r\n");
 80011ea:	4811      	ldr	r0, [pc, #68]	; (8001230 <QSPI_If_Erase_FS+0x68>)
 80011ec:	f00b f9fa 	bl	800c5e4 <puts>

	if (Add <= QSPI_FLASH_END){
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a10      	ldr	r2, [pc, #64]	; (8001234 <QSPI_If_Erase_FS+0x6c>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d809      	bhi.n	800120c <QSPI_If_Erase_FS+0x44>
		state = QSPI_EraseBlock(Add);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fb9b 	bl	8001934 <QSPI_EraseBlock>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <QSPI_If_Erase_FS+0x5c>)
 8001204:	801a      	strh	r2, [r3, #0]
		state = HAL_OK;
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <QSPI_If_Erase_FS+0x5c>)
 8001208:	2200      	movs	r2, #0
 800120a:	801a      	strh	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2101      	movs	r1, #1
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <QSPI_If_Erase_FS+0x64>)
 8001212:	f001 f8f9 	bl	8002408 <HAL_GPIO_WritePin>

	return state;
 8001216:	4b03      	ldr	r3, [pc, #12]	; (8001224 <QSPI_If_Erase_FS+0x5c>)
 8001218:	881b      	ldrh	r3, [r3, #0]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	24000244 	.word	0x24000244
 8001228:	58020400 	.word	0x58020400
 800122c:	58020800 	.word	0x58020800
 8001230:	0800d5b4 	.word	0x0800d5b4
 8001234:	90400000 	.word	0x90400000

08001238 <erase_sector>:
  * @retval USBD_OK if operation is successful,  else.
  */

uint32_t back_addr = 0;

void erase_sector(uint32_t addr){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	uint32_t block_er = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
	if(((addr - back_addr) % SECTOR_BYTE  == 0)){
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <erase_sector+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10c      	bne.n	800126e <erase_sector+0x36>
		block_er = addr / SECTOR_BYTE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	0b1b      	lsrs	r3, r3, #12
 8001258:	60fb      	str	r3, [r7, #12]
		QSPI_EraseSector(block_er);
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 fb26 	bl	80018ac <QSPI_EraseSector>
		back_addr = addr;
 8001260:	4a05      	ldr	r2, [pc, #20]	; (8001278 <erase_sector+0x40>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
		printf("er(%ld) ", block_er);
 8001266:	68f9      	ldr	r1, [r7, #12]
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <erase_sector+0x44>)
 800126a:	f00b f935 	bl	800c4d8 <iprintf>
	}
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	24000248 	.word	0x24000248
 800127c:	0800d5cc 	.word	0x0800d5cc

08001280 <QSPI_If_Write_FS>:

uint16_t QSPI_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	state = USBD_FAIL;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <QSPI_If_Write_FS+0x74>)
 800128e:	2203      	movs	r2, #3
 8001290:	801a      	strh	r2, [r3, #0]
	///blue led on
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);

	printf("writing: ");
 8001292:	4819      	ldr	r0, [pc, #100]	; (80012f8 <QSPI_If_Write_FS+0x78>)
 8001294:	f00b f920 	bl	800c4d8 <iprintf>
	uint32_t addr = ((uint32_t)dest-QSPI_FLASH_BASE);//flasha yazma adresi (0 + down_addr)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	f103 43e0 	add.w	r3, r3, #1879048192	; 0x70000000
 800129e:	617b      	str	r3, [r7, #20]

	erase_sector(addr);
 80012a0:	6978      	ldr	r0, [r7, #20]
 80012a2:	f7ff ffc9 	bl	8001238 <erase_sector>

	if(dest < (uint8_t*)QSPI_FLASH_BASE){
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f1b3 4f10 	cmp.w	r3, #2415919104	; 0x90000000
 80012ac:	d203      	bcs.n	80012b6 <QSPI_If_Write_FS+0x36>
		addr = ((uint32_t)dest-FLASH_BANK1_BASE);
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80012b4:	617b      	str	r3, [r7, #20]
	}
	if ((addr+Len)<=FLASH_BYTE){
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012c0:	d808      	bhi.n	80012d4 <QSPI_If_Write_FS+0x54>
		state =  QSPI_Write(addr,src, Len);
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68f9      	ldr	r1, [r7, #12]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f000 fb8a 	bl	80019e0 <QSPI_Write>
 80012cc:	4603      	mov	r3, r0
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <QSPI_If_Write_FS+0x74>)
 80012d2:	801a      	strh	r2, [r3, #0]
	}

	printf(" 0x%lX, %ld OK\r\n", addr, Len);
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6979      	ldr	r1, [r7, #20]
 80012d8:	4808      	ldr	r0, [pc, #32]	; (80012fc <QSPI_If_Write_FS+0x7c>)
 80012da:	f00b f8fd 	bl	800c4d8 <iprintf>

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80012de:	2101      	movs	r1, #1
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <QSPI_If_Write_FS+0x80>)
 80012e2:	f001 f8aa 	bl	800243a <HAL_GPIO_TogglePin>
	return state;
 80012e6:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <QSPI_If_Write_FS+0x74>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	24000244 	.word	0x24000244
 80012f8:	0800d5d8 	.word	0x0800d5d8
 80012fc:	0800d5e4 	.word	0x0800d5e4
 8001300:	58020800 	.word	0x58020800

08001304 <QSPI_If_Read_FS>:
  * @param  src: Pointer to the source buffer. Address to be written to.
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *QSPI_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len){
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	if(DEBUG){
		printf("Read addr: 0x%lX, 0x%lX, %ld \r\n", (uint32_t)src, (uint32_t)dest, (uint32_t)Len);
 8001310:	68f9      	ldr	r1, [r7, #12]
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4812      	ldr	r0, [pc, #72]	; (8001360 <QSPI_If_Read_FS+0x5c>)
 8001318:	f00b f8de 	bl	800c4d8 <iprintf>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	2101      	movs	r1, #1
 8001320:	4810      	ldr	r0, [pc, #64]	; (8001364 <QSPI_If_Read_FS+0x60>)
 8001322:	f001 f871 	bl	8002408 <HAL_GPIO_WritePin>
	if (src>=(uint8_t*)QSPI_FLASH_BASE && (src+Len)<=(uint8_t*)QSPI_FLASH_END){
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 4f10 	cmp.w	r3, #2415919104	; 0x90000000
 800132c:	d30d      	bcc.n	800134a <QSPI_If_Read_FS+0x46>
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <QSPI_If_Read_FS+0x64>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d807      	bhi.n	800134a <QSPI_If_Read_FS+0x46>
		QSPI_Read(((uint32_t)src-QSPI_FLASH_BASE), dest, Len);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f103 43e0 	add.w	r3, r3, #1879048192	; 0x70000000
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	68b9      	ldr	r1, [r7, #8]
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fbc7 	bl	8001ad8 <QSPI_Read>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2101      	movs	r1, #1
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <QSPI_If_Read_FS+0x60>)
 8001350:	f001 f85a 	bl	8002408 <HAL_GPIO_WritePin>
	return (uint8_t *) (dest);
 8001354:	68bb      	ldr	r3, [r7, #8]
	/* no way to indicate fail from return value */
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	0800d5f8 	.word	0x0800d5f8
 8001364:	58020800 	.word	0x58020800
 8001368:	90400000 	.word	0x90400000

0800136c <QSPI_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t QSPI_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	460b      	mov	r3, r1
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	72fb      	strb	r3, [r7, #11]
  switch (Cmd)
 800137a:	7afb      	ldrb	r3, [r7, #11]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d10c      	bne.n	800139a <QSPI_If_GetStatus_FS+0x2e>
  {
    case DFU_MEDIA_PROGRAM:
	buffer[1] = (uint8_t) QSPI_FLASH_PROGRAM_TIME;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3301      	adds	r3, #1
 8001384:	2214      	movs	r2, #20
 8001386:	701a      	strb	r2, [r3, #0]
	buffer[2] = (uint8_t) (QSPI_FLASH_PROGRAM_TIME << 8);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3302      	adds	r3, #2
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3303      	adds	r3, #3
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
    break;
 8001398:	e00e      	b.n	80013b8 <QSPI_If_GetStatus_FS+0x4c>

    case DFU_MEDIA_ERASE:
    default:
	buffer[1] = (uint8_t) QSPI_FLASH_ERASE_TIME;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3301      	adds	r3, #1
 800139e:	2214      	movs	r2, #20
 80013a0:	701a      	strb	r2, [r3, #0]
	buffer[2] = (uint8_t) (QSPI_FLASH_ERASE_TIME << 8);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3302      	adds	r3, #2
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3303      	adds	r3, #3
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
	QSPI_EraseChip();
 80013b2:	f000 fb03 	bl	80019bc <QSPI_EraseChip>
    break;
 80013b6:	bf00      	nop
  }
  return (USBD_OK);
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <QSPI_SetCom>:
	return HAL_OK;
}

/**********************************LIB START************************************************************/

QSPI_CommandTypeDef QSPI_SetCom(uint32_t Instruction) {
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b090      	sub	sp, #64	; 0x40
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand;
	memset(&sCommand, 0, sizeof(QSPI_CommandTypeDef));
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2238      	movs	r2, #56	; 0x38
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00b f876 	bl	800c4c8 <memset>
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c

	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80013ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f0:	617b      	str	r3, [r7, #20]
	sCommand.InstructionMode = qspi_data.qe ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <QSPI_SetCom+0x80>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <QSPI_SetCom+0x3c>
 80013fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013fe:	e001      	b.n	8001404 <QSPI_SetCom+0x40>
 8001400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001404:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_NONE;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c

	sCommand.NbData = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
	sCommand.DummyCycles = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = Instruction;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	60bb      	str	r3, [r7, #8]
	return sCommand;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	461d      	mov	r5, r3
 8001422:	f107 0408 	add.w	r4, r7, #8
 8001426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001432:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001436:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	3740      	adds	r7, #64	; 0x40
 800143e:	46bd      	mov	sp, r7
 8001440:	bdb0      	pop	{r4, r5, r7, pc}
 8001442:	bf00      	nop
 8001444:	2400024c 	.word	0x2400024c

08001448 <QSPI_Delay>:

void QSPI_Delay(uint32_t us){
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	for (uint32_t temp = 0; temp < us; temp++) {
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	e003      	b.n	800145e <QSPI_Delay+0x16>
		__NOP();
 8001456:	bf00      	nop
	for (uint32_t temp = 0; temp < us; temp++) {
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3301      	adds	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	429a      	cmp	r2, r3
 8001464:	d3f7      	bcc.n	8001456 <QSPI_Delay+0xe>
	}
}
 8001466:	bf00      	nop
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <QSPI_IsBusy>:

uint8_t QSPI_IsBusy(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
#ifdef AUTOPOOL
	QSPI_AutoPollingMemReady();
#else
	uint8_t reg1[1], is_busy = 1;
 800147a:	2301      	movs	r3, #1
 800147c:	71fb      	strb	r3, [r7, #7]
	while(is_busy){
 800147e:	e00d      	b.n	800149c <QSPI_IsBusy+0x28>
	  QSPI_ReadStatusReg(reg1, 1, 1);
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2201      	movs	r2, #1
 8001484:	2101      	movs	r1, #1
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f8e0 	bl	800164c <QSPI_ReadStatusReg>
	  is_busy = ((reg1[0]) & 0x01);
 800148c:	793b      	ldrb	r3, [r7, #4]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	71fb      	strb	r3, [r7, #7]
	  QSPI_Delay(1000);
 8001494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001498:	f7ff ffd6 	bl	8001448 <QSPI_Delay>
	while(is_busy){
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ee      	bne.n	8001480 <QSPI_IsBusy+0xc>
	}
#endif
	return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <QSPI_Cmd>:

uint8_t QSPI_Cmd(uint32_t cmd){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b090      	sub	sp, #64	; 0x40
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef sCommand = QSPI_SetCom(cmd);
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff82 	bl	80013c4 <QSPI_SetCom>
	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <QSPI_Cmd+0x38>)
 80014cc:	f002 fb20 	bl	8003b10 <HAL_QSPI_Command>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <QSPI_Cmd+0x2e>
		return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <QSPI_Cmd+0x30>
	}
	return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3740      	adds	r7, #64	; 0x40
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	24000160 	.word	0x24000160

080014e8 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b094      	sub	sp, #80	; 0x50
 80014ec:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef com = QSPI_SetCom(0x05);
 80014ee:	f107 0318 	add.w	r3, r7, #24
 80014f2:	2105      	movs	r1, #5
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff65 	bl	80013c4 <QSPI_SetCom>
	QSPI_AutoPollingTypeDef sConfig;

	sConfig.Match = 0x00;
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x01;
 80014fe:	2301      	movs	r3, #1
 8001500:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8001506:	2301      	movs	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x50;
 800150a:	2350      	movs	r3, #80	; 0x50
 800150c:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]

	com.DataMode = qspi_data.qe ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <QSPI_AutoPollingMemReady+0x68>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <QSPI_AutoPollingMemReady+0x38>
 800151a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800151e:	e001      	b.n	8001524 <QSPI_AutoPollingMemReady+0x3c>
 8001520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001524:	63fb      	str	r3, [r7, #60]	; 0x3c
	com.NbData = 1;
 8001526:	2301      	movs	r3, #1
 8001528:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_QSPI_AutoPolling(&hqspi, &com, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800152a:	463a      	mov	r2, r7
 800152c:	f107 0118 	add.w	r1, r7, #24
 8001530:	f241 3388 	movw	r3, #5000	; 0x1388
 8001534:	4807      	ldr	r0, [pc, #28]	; (8001554 <QSPI_AutoPollingMemReady+0x6c>)
 8001536:	f002 fc78 	bl	8003e2a <HAL_QSPI_AutoPolling>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <QSPI_AutoPollingMemReady+0x5c>
		return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <QSPI_AutoPollingMemReady+0x5e>
	}
  return FLASH_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3750      	adds	r7, #80	; 0x50
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2400024c 	.word	0x2400024c
 8001554:	24000160 	.word	0x24000160

08001558 <QSPI_WriteEnable>:

uint8_t QSPI_WriteEnable(void) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0

	if (QSPI_Cmd(0x06) != HAL_OK) {
 800155e:	2006      	movs	r0, #6
 8001560:	f7ff ffa4 	bl	80014ac <QSPI_Cmd>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <QSPI_WriteEnable+0x2a>
		return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <QSPI_WriteEnable+0x36>
		return HAL_ERROR;
	}
#else
	uint8_t reg_data[1];
	while(!(reg_data[0] & 0x02)){
		QSPI_ReadStatusReg(reg_data, 1, 1);
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2201      	movs	r2, #1
 8001572:	2101      	movs	r1, #1
 8001574:	4618      	mov	r0, r3
 8001576:	f000 f869 	bl	800164c <QSPI_ReadStatusReg>
		QSPI_Delay(1000);
 800157a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800157e:	f7ff ff63 	bl	8001448 <QSPI_Delay>
	while(!(reg_data[0] & 0x02)){
 8001582:	793b      	ldrb	r3, [r7, #4]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <QSPI_WriteEnable+0x16>
	}
#endif
	return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <QSPI_Reset>:

uint8_t QSPI_Reset(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	memset(&qspi_data, 0, sizeof(Qspi_variable));
 800159e:	2202      	movs	r2, #2
 80015a0:	2100      	movs	r1, #0
 80015a2:	4812      	ldr	r0, [pc, #72]	; (80015ec <QSPI_Reset+0x54>)
 80015a4:	f00a ff90 	bl	800c4c8 <memset>
	uint32_t temp = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
	//enable reset
	if (QSPI_Cmd(0x66) != HAL_OK) {
 80015ac:	2066      	movs	r0, #102	; 0x66
 80015ae:	f7ff ff7d 	bl	80014ac <QSPI_Cmd>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <QSPI_Reset+0x24>
		return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e012      	b.n	80015e2 <QSPI_Reset+0x4a>
	}
	//delay
	for (temp = 0; temp < 0x2f; temp++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	e003      	b.n	80015ca <QSPI_Reset+0x32>
		__NOP();
 80015c2:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3301      	adds	r3, #1
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b2e      	cmp	r3, #46	; 0x2e
 80015ce:	d9f8      	bls.n	80015c2 <QSPI_Reset+0x2a>
	}
	//reset
	if(QSPI_Cmd(0x99) !=HAL_OK){
 80015d0:	2099      	movs	r0, #153	; 0x99
 80015d2:	f7ff ff6b 	bl	80014ac <QSPI_Cmd>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <QSPI_Reset+0x48>
		return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <QSPI_Reset+0x4a>
	}
	return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2400024c 	.word	0x2400024c

080015f0 <QSPI_Init>:
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(gpio, &GPIO_InitStruct);
}

uint8_t QSPI_Init(void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
	uint8_t wr[1] = {0x00}, status = FLASH_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	713b      	strb	r3, [r7, #4]
 80015fa:	2300      	movs	r3, #0
 80015fc:	71fb      	strb	r3, [r7, #7]
#ifdef WPHOLD
    QSPI_Gpio_mode(1, GPIO_PIN_2, GPIOE);
    QSPI_Gpio_mode(1, GPIO_PIN_6, GPIOF);
#endif
#ifdef RESET
	if(QSPI_Reset()!=HAL_OK){
 80015fe:	f7ff ffcb 	bl	8001598 <QSPI_Reset>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <QSPI_Init+0x1c>
		return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e019      	b.n	8001640 <QSPI_Init+0x50>
	}
#endif
	QSPI_QEDisable();
 800160c:	f000 f926 	bl	800185c <QSPI_QEDisable>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	2140      	movs	r1, #64	; 0x40
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <QSPI_Init+0x58>)
 8001616:	f000 fef7 	bl	8002408 <HAL_GPIO_WritePin>
	QSPI_Cmd(0XAB);
 800161a:	20ab      	movs	r0, #171	; 0xab
 800161c:	f7ff ff46 	bl	80014ac <QSPI_Cmd>
	QSPI_WriteEnable();
 8001620:	f7ff ff9a 	bl	8001558 <QSPI_WriteEnable>
	status = QSPI_WriteStatusReg(wr, 1, 1);//reg1 set 0x00
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2201      	movs	r2, #1
 8001628:	2101      	movs	r1, #1
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f85c 	bl	80016e8 <QSPI_WriteStatusReg>
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
	QSPI_Delay(100);
 8001634:	2064      	movs	r0, #100	; 0x64
 8001636:	f7ff ff07 	bl	8001448 <QSPI_Delay>
	QSPI_ReadDevID();
 800163a:	f000 f8d9 	bl	80017f0 <QSPI_ReadDevID>
	return status;
 800163e:	79fb      	ldrb	r3, [r7, #7]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	58021800 	.word	0x58021800

0800164c <QSPI_ReadStatusReg>:

uint8_t QSPI_ReadStatusReg(uint8_t *reg_data, uint8_t reg_num, uint8_t size) {
 800164c:	b5b0      	push	{r4, r5, r7, lr}
 800164e:	b098      	sub	sp, #96	; 0x60
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
 8001658:	4613      	mov	r3, r2
 800165a:	70bb      	strb	r3, [r7, #2]
	uint32_t addr[7] = {0x00, 0x05, 0x35, 0x15, 0x48, 0x94, 0x9F};
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <QSPI_ReadStatusReg+0x90>)
 800165e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001662:	461d      	mov	r5, r3
 8001664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800166c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	QSPI_CommandTypeDef sCommand = QSPI_SetCom(addr[reg_num]);
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	3360      	adds	r3, #96	; 0x60
 8001676:	443b      	add	r3, r7
 8001678:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fe9e 	bl	80013c4 <QSPI_SetCom>

	sCommand.DataMode = qspi_data.qe ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <QSPI_ReadStatusReg+0x94>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <QSPI_ReadStatusReg+0x4a>
 8001690:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001694:	e001      	b.n	800169a <QSPI_ReadStatusReg+0x4e>
 8001696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.NbData = size;
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a8:	4619      	mov	r1, r3
 80016aa:	480e      	ldr	r0, [pc, #56]	; (80016e4 <QSPI_ReadStatusReg+0x98>)
 80016ac:	f002 fa30 	bl	8003b10 <HAL_QSPI_Command>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <QSPI_ReadStatusReg+0x6e>
		return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00b      	b.n	80016d2 <QSPI_ReadStatusReg+0x86>
	}
	if (HAL_QSPI_Receive(&hqspi, reg_data, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4808      	ldr	r0, [pc, #32]	; (80016e4 <QSPI_ReadStatusReg+0x98>)
 80016c2:	f002 fb15 	bl	8003cf0 <HAL_QSPI_Receive>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <QSPI_ReadStatusReg+0x84>
		return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <QSPI_ReadStatusReg+0x86>
	}
	return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3760      	adds	r7, #96	; 0x60
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bdb0      	pop	{r4, r5, r7, pc}
 80016da:	bf00      	nop
 80016dc:	0800d618 	.word	0x0800d618
 80016e0:	2400024c 	.word	0x2400024c
 80016e4:	24000160 	.word	0x24000160

080016e8 <QSPI_WriteStatusReg>:

uint8_t QSPI_WriteStatusReg(uint8_t *reg_data, uint8_t reg_num, uint8_t size) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b096      	sub	sp, #88	; 0x58
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
 80016f4:	4613      	mov	r3, r2
 80016f6:	70bb      	strb	r3, [r7, #2]
	uint32_t addr[6] = {0x00, 0x01, 0x31, 0x11, 0x38};
 80016f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	615a      	str	r2, [r3, #20]
 800170a:	2301      	movs	r3, #1
 800170c:	647b      	str	r3, [r7, #68]	; 0x44
 800170e:	2331      	movs	r3, #49	; 0x31
 8001710:	64bb      	str	r3, [r7, #72]	; 0x48
 8001712:	2311      	movs	r3, #17
 8001714:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001716:	2338      	movs	r3, #56	; 0x38
 8001718:	653b      	str	r3, [r7, #80]	; 0x50
	QSPI_CommandTypeDef com = QSPI_SetCom(addr[reg_num]);
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	3358      	adds	r3, #88	; 0x58
 8001720:	443b      	add	r3, r7
 8001722:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fe49 	bl	80013c4 <QSPI_SetCom>
	com.DataMode = qspi_data.qe ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <QSPI_WriteStatusReg+0xac>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <QSPI_WriteStatusReg+0x58>
 800173a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800173e:	e001      	b.n	8001744 <QSPI_WriteStatusReg+0x5c>
 8001740:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
	com.NbData = size;
 8001746:	78bb      	ldrb	r3, [r7, #2]
 8001748:	633b      	str	r3, [r7, #48]	; 0x30

	if (QSPI_IsBusy() != HAL_OK) {
 800174a:	f7ff fe93 	bl	8001474 <QSPI_IsBusy>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <QSPI_WriteStatusReg+0x70>
		return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e018      	b.n	800178a <QSPI_WriteStatusReg+0xa2>
	}
	if (HAL_QSPI_Command(&hqspi, &com, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001760:	4619      	mov	r1, r3
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <QSPI_WriteStatusReg+0xb0>)
 8001764:	f002 f9d4 	bl	8003b10 <HAL_QSPI_Command>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <QSPI_WriteStatusReg+0x8a>
		return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e00b      	b.n	800178a <QSPI_WriteStatusReg+0xa2>
	}
	if (HAL_QSPI_Transmit(&hqspi, reg_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4807      	ldr	r0, [pc, #28]	; (8001798 <QSPI_WriteStatusReg+0xb0>)
 800177a:	f002 fa27 	bl	8003bcc <HAL_QSPI_Transmit>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <QSPI_WriteStatusReg+0xa0>
		return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <QSPI_WriteStatusReg+0xa2>
	}
	return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3758      	adds	r7, #88	; 0x58
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2400024c 	.word	0x2400024c
 8001798:	24000160 	.word	0x24000160

0800179c <QSPI_EnableMemoryMappedMode>:


uint8_t QSPI_EnableMemoryMappedMode(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b090      	sub	sp, #64	; 0x40
 80017a0:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef com = QSPI_SetCom(0xEB);
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	21eb      	movs	r1, #235	; 0xeb
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fe0b 	bl	80013c4 <QSPI_SetCom>
    	com.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80017ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b2:	623b      	str	r3, [r7, #32]
		com.AddressMode = QSPI_ADDRESS_4_LINES;
 80017b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
		com.DataMode = QSPI_DATA_4_LINES;
 80017ba:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
		com.DummyCycles = 2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61fb      	str	r3, [r7, #28]

    QSPI_MemoryMappedTypeDef sMemMappedCfg;
    	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &com, &sMemMappedCfg) != HAL_OK) {
 80017c8:	463a      	mov	r2, r7
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	4619      	mov	r1, r3
 80017d0:	4806      	ldr	r0, [pc, #24]	; (80017ec <QSPI_EnableMemoryMappedMode+0x50>)
 80017d2:	f002 fba1 	bl	8003f18 <HAL_QSPI_MemoryMapped>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <QSPI_EnableMemoryMappedMode+0x44>
		return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <QSPI_EnableMemoryMappedMode+0x46>
	}
    return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3740      	adds	r7, #64	; 0x40
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	24000160 	.word	0x24000160

080017f0 <QSPI_ReadDevID>:

uint16_t QSPI_ReadDevID(void){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	uint8_t reg_data[3];
	QSPI_ReadStatusReg(reg_data, 6, 3);
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2203      	movs	r2, #3
 80017fa:	2106      	movs	r1, #6
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff25 	bl	800164c <QSPI_ReadStatusReg>
    return (reg_data[0]<<8) | reg_data[1];
 8001802:	793b      	ldrb	r3, [r7, #4]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	797b      	ldrb	r3, [r7, #5]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21b      	sxth	r3, r3
 8001810:	b29b      	uxth	r3, r3
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <QSPI_QEEnable>:

uint8_t QSPI_QEEnable(){
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
	uint8_t status = FLASH_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	71fb      	strb	r3, [r7, #7]
	QSPI_WriteEnable();
 8001826:	f7ff fe97 	bl	8001558 <QSPI_WriteEnable>
	QSPI_Cmd(0X38);
 800182a:	2038      	movs	r0, #56	; 0x38
 800182c:	f7ff fe3e 	bl	80014ac <QSPI_Cmd>
	uint8_t wr[1] = {0x02};
 8001830:	2302      	movs	r3, #2
 8001832:	713b      	strb	r3, [r7, #4]
	status = QSPI_WriteStatusReg(wr, 2, 1);
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2201      	movs	r2, #1
 8001838:	2102      	movs	r1, #2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff54 	bl	80016e8 <QSPI_WriteStatusReg>
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
	QSPI_IsBusy();
 8001844:	f7ff fe16 	bl	8001474 <QSPI_IsBusy>
	qspi_data.qe = 1;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <QSPI_QEEnable+0x3c>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
	return status;
 800184e:	79fb      	ldrb	r3, [r7, #7]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2400024c 	.word	0x2400024c

0800185c <QSPI_QEDisable>:

uint8_t QSPI_QEDisable(){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
	qspi_data.qe = 1;
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <QSPI_QEDisable+0x2c>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
	uint8_t status = FLASH_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	71fb      	strb	r3, [r7, #7]
	status = QSPI_Cmd(0xFF);
 800186c:	20ff      	movs	r0, #255	; 0xff
 800186e:	f7ff fe1d 	bl	80014ac <QSPI_Cmd>
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	qspi_data.qe = 0;
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <QSPI_QEDisable+0x2c>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
	return status;
 800187c:	79fb      	ldrb	r3, [r7, #7]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2400024c 	.word	0x2400024c

0800188c <QSPI_EnableMap>:
uint8_t QSPI_EnableMap(){
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	QSPI_QEEnable();
 8001890:	f7ff ffc4 	bl	800181c <QSPI_QEEnable>
	if(QSPI_EnableMemoryMappedMode() !=HAL_OK){
 8001894:	f7ff ff82 	bl	800179c <QSPI_EnableMemoryMappedMode>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <QSPI_EnableMap+0x16>
		return HAL_ERROR + 1;
 800189e:	2302      	movs	r3, #2
 80018a0:	e002      	b.n	80018a8 <QSPI_EnableMap+0x1c>
	}
	QSPI_AutoPollingMemReady();
 80018a2:	f7ff fe21 	bl	80014e8 <QSPI_AutoPollingMemReady>
	return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}

080018ac <QSPI_EraseSector>:

uint8_t QSPI_EraseSector(uint32_t sector) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b090      	sub	sp, #64	; 0x40
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	if(sector >	SECTOR_SIZE){
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ba:	d901      	bls.n	80018c0 <QSPI_EraseSector+0x14>
		return FLASH_ERR_PARAM;
 80018bc:	2302      	movs	r3, #2
 80018be:	e031      	b.n	8001924 <QSPI_EraseSector+0x78>
	}
	//enable
	if(QSPI_WriteEnable()!= HAL_OK) {
 80018c0:	f7ff fe4a 	bl	8001558 <QSPI_WriteEnable>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <QSPI_EraseSector+0x22>
		return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e02a      	b.n	8001924 <QSPI_EraseSector+0x78>
	}
	//resume
	if(QSPI_Cmd(0x7A)!= HAL_OK) {
 80018ce:	207a      	movs	r0, #122	; 0x7a
 80018d0:	f7ff fdec 	bl	80014ac <QSPI_Cmd>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <QSPI_EraseSector+0x32>
		return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e022      	b.n	8001924 <QSPI_EraseSector+0x78>
	}
	//erase sector
	QSPI_CommandTypeDef sCommand = QSPI_SetCom(0x20);
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	2120      	movs	r1, #32
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fd6d 	bl	80013c4 <QSPI_SetCom>
	sCommand.AddressMode = qspi_data.qe ? QSPI_ADDRESS_4_LINES : QSPI_ADDRESS_1_LINE;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <QSPI_EraseSector+0x80>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <QSPI_EraseSector+0x4c>
 80018f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018f6:	e001      	b.n	80018fc <QSPI_EraseSector+0x50>
 80018f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.Address = sector * SECTOR_BYTE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	031b      	lsls	r3, r3, #12
 8001902:	60fb      	str	r3, [r7, #12]
	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4619      	mov	r1, r3
 800190e:	4808      	ldr	r0, [pc, #32]	; (8001930 <QSPI_EraseSector+0x84>)
 8001910:	f002 f8fe 	bl	8003b10 <HAL_QSPI_Command>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <QSPI_EraseSector+0x72>
		return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e002      	b.n	8001924 <QSPI_EraseSector+0x78>
	}

	//waiting finish
	QSPI_IsBusy();
 800191e:	f7ff fda9 	bl	8001474 <QSPI_IsBusy>
	return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3740      	adds	r7, #64	; 0x40
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2400024c 	.word	0x2400024c
 8001930:	24000160 	.word	0x24000160

08001934 <QSPI_EraseBlock>:

uint8_t QSPI_EraseBlock(uint32_t block){
 8001934:	b580      	push	{r7, lr}
 8001936:	b090      	sub	sp, #64	; 0x40
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	if(block >	BLOCK_SIZE){
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b40      	cmp	r3, #64	; 0x40
 8001940:	d901      	bls.n	8001946 <QSPI_EraseBlock+0x12>
		return FLASH_ERR_PARAM;
 8001942:	2302      	movs	r3, #2
 8001944:	e031      	b.n	80019aa <QSPI_EraseBlock+0x76>
	}
	//enable
	if(QSPI_WriteEnable()!= HAL_OK) {
 8001946:	f7ff fe07 	bl	8001558 <QSPI_WriteEnable>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <QSPI_EraseBlock+0x20>
		return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e02a      	b.n	80019aa <QSPI_EraseBlock+0x76>
	}
	//resume
	if(QSPI_Cmd(0x7A)!= HAL_OK) {
 8001954:	207a      	movs	r0, #122	; 0x7a
 8001956:	f7ff fda9 	bl	80014ac <QSPI_Cmd>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <QSPI_EraseBlock+0x30>
		return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e022      	b.n	80019aa <QSPI_EraseBlock+0x76>
	}
	//erase sector
	QSPI_CommandTypeDef sCommand = QSPI_SetCom(0xD8);
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	21d8      	movs	r1, #216	; 0xd8
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fd2a 	bl	80013c4 <QSPI_SetCom>
	sCommand.AddressMode = qspi_data.qe ? QSPI_ADDRESS_4_LINES : QSPI_ADDRESS_1_LINE;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <QSPI_EraseBlock+0x80>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <QSPI_EraseBlock+0x4a>
 8001978:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800197c:	e001      	b.n	8001982 <QSPI_EraseBlock+0x4e>
 800197e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.Address = block * BLOCK_BYTE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	041b      	lsls	r3, r3, #16
 8001988:	60fb      	str	r3, [r7, #12]
	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4619      	mov	r1, r3
 8001994:	4808      	ldr	r0, [pc, #32]	; (80019b8 <QSPI_EraseBlock+0x84>)
 8001996:	f002 f8bb 	bl	8003b10 <HAL_QSPI_Command>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <QSPI_EraseBlock+0x70>
		return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e002      	b.n	80019aa <QSPI_EraseBlock+0x76>
	}

	//waiting finish
	QSPI_IsBusy();
 80019a4:	f7ff fd66 	bl	8001474 <QSPI_IsBusy>
	return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3740      	adds	r7, #64	; 0x40
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2400024c 	.word	0x2400024c
 80019b8:	24000160 	.word	0x24000160

080019bc <QSPI_EraseChip>:

uint8_t QSPI_EraseChip(){
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  //enable
  QSPI_WriteEnable();
 80019c0:	f7ff fdca 	bl	8001558 <QSPI_WriteEnable>
  //erase
  if(QSPI_Cmd(0xC7)!= HAL_OK) {
 80019c4:	20c7      	movs	r0, #199	; 0xc7
 80019c6:	f7ff fd71 	bl	80014ac <QSPI_Cmd>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <QSPI_EraseChip+0x18>
	return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e002      	b.n	80019da <QSPI_EraseChip+0x1e>
  }
  //waiting
  QSPI_IsBusy();
 80019d4:	f7ff fd4e 	bl	8001474 <QSPI_IsBusy>
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <QSPI_Write>:


uint8_t QSPI_Write(uint32_t address, uint8_t *data, uint32_t size){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b096      	sub	sp, #88	; 0x58
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
	int32_t page_byte = size;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t loop_size = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	653b      	str	r3, [r7, #80]	; 0x50

	if(size > (PAGE_SIZE * PAGE_BYTE)){
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019fa:	d901      	bls.n	8001a00 <QSPI_Write+0x20>
		return FLASH_ERR_PARAM;
 80019fc:	2302      	movs	r3, #2
 80019fe:	e063      	b.n	8001ac8 <QSPI_Write+0xe8>
	}
	//write
	uint32_t cmd = qspi_data.qe ? 0x32 : 0x02;
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <QSPI_Write+0xf0>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <QSPI_Write+0x2c>
 8001a08:	2332      	movs	r3, #50	; 0x32
 8001a0a:	e000      	b.n	8001a0e <QSPI_Write+0x2e>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
	QSPI_CommandTypeDef sCommand = QSPI_SetCom(cmd);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fcd4 	bl	80013c4 <QSPI_SetCom>
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a20:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode =  qspi_data.qe ? QSPI_ADDRESS_4_LINES : QSPI_ADDRESS_1_LINE;
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <QSPI_Write+0xf0>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <QSPI_Write+0x50>
 8001a2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a2e:	e001      	b.n	8001a34 <QSPI_Write+0x54>
 8001a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DataMode =  qspi_data.qe ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <QSPI_Write+0xf0>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <QSPI_Write+0x64>
 8001a3e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001a42:	e001      	b.n	8001a48 <QSPI_Write+0x68>
 8001a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a48:	63bb      	str	r3, [r7, #56]	; 0x38

	//write map
	while(page_byte > 0){
 8001a4a:	e039      	b.n	8001ac0 <QSPI_Write+0xe0>

		if(!(loop_size % 0x100))
 8001a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <QSPI_Write+0x78>
			QSPI_WriteEnable();
 8001a54:	f7ff fd80 	bl	8001558 <QSPI_WriteEnable>

		size = ((page_byte>PAGE_BYTE) ? PAGE_BYTE : page_byte);
 8001a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a5e:	bfa8      	it	ge
 8001a60:	f44f 7380 	movge.w	r3, #256	; 0x100
 8001a64:	607b      	str	r3, [r7, #4]
		sCommand.Address = (address);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = size;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4619      	mov	r1, r3
 8001a78:	4816      	ldr	r0, [pc, #88]	; (8001ad4 <QSPI_Write+0xf4>)
 8001a7a:	f002 f849 	bl	8003b10 <HAL_QSPI_Command>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <QSPI_Write+0xa8>
			return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e01f      	b.n	8001ac8 <QSPI_Write+0xe8>
		}
		if (HAL_QSPI_Transmit(&hqspi, ((void *)data)+(loop_size), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4619      	mov	r1, r3
 8001a94:	480f      	ldr	r0, [pc, #60]	; (8001ad4 <QSPI_Write+0xf4>)
 8001a96:	f002 f899 	bl	8003bcc <HAL_QSPI_Transmit>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <QSPI_Write+0xc4>
			return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e011      	b.n	8001ac8 <QSPI_Write+0xe8>
		}

		loop_size +=PAGE_BYTE;
 8001aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aa6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001aaa:	653b      	str	r3, [r7, #80]	; 0x50
		address	  +=PAGE_BYTE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ab2:	60fb      	str	r3, [r7, #12]
		page_byte -=PAGE_BYTE;
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001aba:	657b      	str	r3, [r7, #84]	; 0x54

		QSPI_IsBusy();
 8001abc:	f7ff fcda 	bl	8001474 <QSPI_IsBusy>
	while(page_byte > 0){
 8001ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	dcc2      	bgt.n	8001a4c <QSPI_Write+0x6c>
	}

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3758      	adds	r7, #88	; 0x58
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2400024c 	.word	0x2400024c
 8001ad4:	24000160 	.word	0x24000160

08001ad8 <QSPI_Read>:

uint8_t QSPI_Read(uint32_t address, uint8_t *data, uint32_t size){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b094      	sub	sp, #80	; 0x50
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
	uint32_t cmd = qspi_data.qe ? 0xEB : 0x03;
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <QSPI_Read+0xa8>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <QSPI_Read+0x18>
 8001aec:	23eb      	movs	r3, #235	; 0xeb
 8001aee:	e000      	b.n	8001af2 <QSPI_Read+0x1a>
 8001af0:	2303      	movs	r3, #3
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
    QSPI_CommandTypeDef sCommand = QSPI_SetCom(cmd);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fc62 	bl	80013c4 <QSPI_SetCom>
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b04:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode =  qspi_data.qe ? QSPI_ADDRESS_4_LINES : QSPI_ADDRESS_1_LINE;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <QSPI_Read+0xa8>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <QSPI_Read+0x3c>
 8001b0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b12:	e001      	b.n	8001b18 <QSPI_Read+0x40>
 8001b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DataMode =  qspi_data.qe ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <QSPI_Read+0xa8>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <QSPI_Read+0x50>
 8001b22:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001b26:	e001      	b.n	8001b2c <QSPI_Read+0x54>
 8001b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b2c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = size;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address =  address;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles =  qspi_data.qe ? 2 : 0;
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <QSPI_Read+0xa8>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <QSPI_Read+0x6a>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e000      	b.n	8001b44 <QSPI_Read+0x6c>
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <QSPI_Read+0xac>)
 8001b52:	f001 ffdd 	bl	8003b10 <HAL_QSPI_Command>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <QSPI_Read+0x88>
		return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e00b      	b.n	8001b78 <QSPI_Read+0xa0>
	}
	if (HAL_QSPI_Receive(&hqspi, data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	4807      	ldr	r0, [pc, #28]	; (8001b84 <QSPI_Read+0xac>)
 8001b68:	f002 f8c2 	bl	8003cf0 <HAL_QSPI_Receive>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <QSPI_Read+0x9e>
		return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <QSPI_Read+0xa0>
	}
	return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3750      	adds	r7, #80	; 0x50
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2400024c 	.word	0x2400024c
 8001b84:	24000160 	.word	0x24000160

08001b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b8c:	f7ff fa84 	bl	8001098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b92:	490d      	ldr	r1, [pc, #52]	; (8001bc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	; (8001bd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f00a fc63 	bl	800c480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bba:	f7fe fdaf 	bl	800071c <main>
  bx  lr
 8001bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc0:	38010000 	.word	0x38010000
  ldr r0, =_sdata
 8001bc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bc8:	24000144 	.word	0x24000144
  ldr r2, =_sidata
 8001bcc:	0800d764 	.word	0x0800d764
  ldr r2, =_sbss
 8001bd0:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8001bd4:	2400116c 	.word	0x2400116c

08001bd8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC3_IRQHandler>
	...

08001bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be2:	2003      	movs	r0, #3
 8001be4:	f000 f98c 	bl	8001f00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001be8:	f003 f9d4 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_Init+0x68>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	4913      	ldr	r1, [pc, #76]	; (8001c48 <HAL_Init+0x6c>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_Init+0x68>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <HAL_Init+0x6c>)
 8001c10:	5cd3      	ldrb	r3, [r2, r3]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <HAL_Init+0x70>)
 8001c1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c20:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <HAL_Init+0x74>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c26:	200f      	movs	r0, #15
 8001c28:	f000 f814 	bl	8001c54 <HAL_InitTick>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e002      	b.n	8001c3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c36:	f7fe ffad 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	58024400 	.word	0x58024400
 8001c48:	0800d684 	.word	0x0800d684
 8001c4c:	24000004 	.word	0x24000004
 8001c50:	24000000 	.word	0x24000000

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_InitTick+0x60>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e021      	b.n	8001cac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_InitTick+0x64>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_InitTick+0x60>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f971 	bl	8001f66 <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00e      	b.n	8001cac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d80a      	bhi.n	8001caa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f000 f93b 	bl	8001f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <HAL_InitTick+0x68>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	24000028 	.word	0x24000028
 8001cb8:	24000000 	.word	0x24000000
 8001cbc:	24000024 	.word	0x24000024

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	24000028 	.word	0x24000028
 8001ce4:	24000250 	.word	0x24000250

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	24000250 	.word	0x24000250

08001d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff ffee 	bl	8001ce8 <HAL_GetTick>
 8001d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d005      	beq.n	8001d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_Delay+0x44>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d26:	bf00      	nop
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d8f7      	bhi.n	8001d28 <HAL_Delay+0x28>
  {
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	24000028 	.word	0x24000028

08001d48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_GetREVID+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0c1b      	lsrs	r3, r3, #16
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	5c001000 	.word	0x5c001000

08001d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <__NVIC_SetPriorityGrouping+0x40>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8e:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <__NVIC_SetPriorityGrouping+0x40>)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	60d3      	str	r3, [r2, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00
 8001da4:	05fa0000 	.word	0x05fa0000

08001da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db0b      	blt.n	8001dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4907      	ldr	r1, [pc, #28]	; (8001dfc <__NVIC_EnableIRQ+0x38>)
 8001dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	; (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	; (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ecc:	d301      	bcc.n	8001ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00f      	b.n	8001ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <SysTick_Config+0x40>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eda:	210f      	movs	r1, #15
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f7ff ff8e 	bl	8001e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <SysTick_Config+0x40>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <SysTick_Config+0x40>)
 8001eec:	2207      	movs	r2, #7
 8001eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	e000e010 	.word	0xe000e010

08001f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff29 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff40 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff90 	bl	8001e54 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5f 	bl	8001e00 <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff33 	bl	8001dc4 <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffa4 	bl	8001ebc <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f84:	f3bf 8f5f 	dmb	sy
}
 8001f88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <HAL_MPU_Disable+0x28>)
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <HAL_MPU_Disable+0x28>)
 8001f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f94:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_MPU_Disable+0x2c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	605a      	str	r2, [r3, #4]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00
 8001fac:	e000ed90 	.word	0xe000ed90

08001fb0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001fb8:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <HAL_MPU_Enable+0x38>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_MPU_Enable+0x3c>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	4a09      	ldr	r2, [pc, #36]	; (8001fec <HAL_MPU_Enable+0x3c>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001fce:	f3bf 8f4f 	dsb	sy
}
 8001fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fd4:	f3bf 8f6f 	isb	sy
}
 8001fd8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000ed90 	.word	0xe000ed90
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	785a      	ldrb	r2, [r3, #1]
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_MPU_ConfigRegion+0x84>)
 8001ffe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d029      	beq.n	800205c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002008:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <HAL_MPU_ConfigRegion+0x84>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7b1b      	ldrb	r3, [r3, #12]
 8002014:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7adb      	ldrb	r3, [r3, #11]
 800201a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800201c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7a9b      	ldrb	r3, [r3, #10]
 8002022:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002024:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7b5b      	ldrb	r3, [r3, #13]
 800202a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800202c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7b9b      	ldrb	r3, [r3, #14]
 8002032:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002034:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7bdb      	ldrb	r3, [r3, #15]
 800203a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800203c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7a5b      	ldrb	r3, [r3, #9]
 8002042:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002044:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7a1b      	ldrb	r3, [r3, #8]
 800204a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800204c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	7812      	ldrb	r2, [r2, #0]
 8002052:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002056:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002058:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800205a:	e005      	b.n	8002068 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_MPU_ConfigRegion+0x84>)
 800205e:	2200      	movs	r2, #0
 8002060:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <HAL_MPU_ConfigRegion+0x84>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed90 	.word	0xe000ed90

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002086:	4b89      	ldr	r3, [pc, #548]	; (80022ac <HAL_GPIO_Init+0x234>)
 8002088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800208a:	e194      	b.n	80023b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2101      	movs	r1, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8186 	beq.w	80023b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d005      	beq.n	80020bc <HAL_GPIO_Init+0x44>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d130      	bne.n	800211e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2203      	movs	r2, #3
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020f2:	2201      	movs	r2, #1
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	f003 0201 	and.w	r2, r3, #1
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b03      	cmp	r3, #3
 8002128:	d017      	beq.n	800215a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d123      	bne.n	80021ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	08da      	lsrs	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	08da      	lsrs	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3208      	adds	r2, #8
 80021a8:	69b9      	ldr	r1, [r7, #24]
 80021aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0203 	and.w	r2, r3, #3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80e0 	beq.w	80023b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f0:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_GPIO_Init+0x238>)
 80021f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021f6:	4a2e      	ldr	r2, [pc, #184]	; (80022b0 <HAL_GPIO_Init+0x238>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002200:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_GPIO_Init+0x238>)
 8002202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800220e:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <HAL_GPIO_Init+0x23c>)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <HAL_GPIO_Init+0x240>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d052      	beq.n	80022e0 <HAL_GPIO_Init+0x268>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a1f      	ldr	r2, [pc, #124]	; (80022bc <HAL_GPIO_Init+0x244>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d031      	beq.n	80022a6 <HAL_GPIO_Init+0x22e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <HAL_GPIO_Init+0x248>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d02b      	beq.n	80022a2 <HAL_GPIO_Init+0x22a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_GPIO_Init+0x24c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d025      	beq.n	800229e <HAL_GPIO_Init+0x226>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <HAL_GPIO_Init+0x250>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01f      	beq.n	800229a <HAL_GPIO_Init+0x222>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_GPIO_Init+0x254>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d019      	beq.n	8002296 <HAL_GPIO_Init+0x21e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x258>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0x21a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_GPIO_Init+0x25c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00d      	beq.n	800228e <HAL_GPIO_Init+0x216>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_GPIO_Init+0x260>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <HAL_GPIO_Init+0x212>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_GPIO_Init+0x264>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d101      	bne.n	8002286 <HAL_GPIO_Init+0x20e>
 8002282:	2309      	movs	r3, #9
 8002284:	e02d      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 8002286:	230a      	movs	r3, #10
 8002288:	e02b      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 800228a:	2308      	movs	r3, #8
 800228c:	e029      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 800228e:	2307      	movs	r3, #7
 8002290:	e027      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 8002292:	2306      	movs	r3, #6
 8002294:	e025      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 8002296:	2305      	movs	r3, #5
 8002298:	e023      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 800229a:	2304      	movs	r3, #4
 800229c:	e021      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 800229e:	2303      	movs	r3, #3
 80022a0:	e01f      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e01d      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e01b      	b.n	80022e2 <HAL_GPIO_Init+0x26a>
 80022aa:	bf00      	nop
 80022ac:	58000080 	.word	0x58000080
 80022b0:	58024400 	.word	0x58024400
 80022b4:	58000400 	.word	0x58000400
 80022b8:	58020000 	.word	0x58020000
 80022bc:	58020400 	.word	0x58020400
 80022c0:	58020800 	.word	0x58020800
 80022c4:	58020c00 	.word	0x58020c00
 80022c8:	58021000 	.word	0x58021000
 80022cc:	58021400 	.word	0x58021400
 80022d0:	58021800 	.word	0x58021800
 80022d4:	58021c00 	.word	0x58021c00
 80022d8:	58022000 	.word	0x58022000
 80022dc:	58022400 	.word	0x58022400
 80022e0:	2300      	movs	r3, #0
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	f002 0203 	and.w	r2, r2, #3
 80022e8:	0092      	lsls	r2, r2, #2
 80022ea:	4093      	lsls	r3, r2
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f2:	4938      	ldr	r1, [pc, #224]	; (80023d4 <HAL_GPIO_Init+0x35c>)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	3301      	adds	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f47f ae63 	bne.w	800208c <HAL_GPIO_Init+0x14>
  }
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	3724      	adds	r7, #36	; 0x24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	58000400 	.word	0x58000400

080023d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800244c:	887a      	ldrh	r2, [r7, #2]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4013      	ands	r3, r2
 8002452:	041a      	lsls	r2, r3, #16
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	43d9      	mvns	r1, r3
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	400b      	ands	r3, r1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800246e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002470:	b08f      	sub	sp, #60	; 0x3c
 8002472:	af0a      	add	r7, sp, #40	; 0x28
 8002474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e116      	b.n	80026ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f009 fcc8 	bl	800be30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2203      	movs	r2, #3
 80024a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f005 ffef 	bl	80084a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	687e      	ldr	r6, [r7, #4]
 80024cc:	466d      	mov	r5, sp
 80024ce:	f106 0410 	add.w	r4, r6, #16
 80024d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024de:	e885 0003 	stmia.w	r5, {r0, r1}
 80024e2:	1d33      	adds	r3, r6, #4
 80024e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e6:	6838      	ldr	r0, [r7, #0]
 80024e8:	f005 feba 	bl	8008260 <USB_CoreInit>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0d7      	b.n	80026ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f005 ffdd 	bl	80084c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	e04a      	b.n	80025a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	333d      	adds	r3, #61	; 0x3d
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	333c      	adds	r3, #60	; 0x3c
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	b298      	uxth	r0, r3
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	3356      	adds	r3, #86	; 0x56
 800254c:	4602      	mov	r2, r0
 800254e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3340      	adds	r3, #64	; 0x40
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	3344      	adds	r3, #68	; 0x44
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	3348      	adds	r3, #72	; 0x48
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	334c      	adds	r3, #76	; 0x4c
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	3301      	adds	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3af      	bcc.n	8002510 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e044      	b.n	8002640 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	3301      	adds	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d3b5      	bcc.n	80025b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	687e      	ldr	r6, [r7, #4]
 8002652:	466d      	mov	r5, sp
 8002654:	f106 0410 	add.w	r4, r6, #16
 8002658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800265c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002660:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002664:	e885 0003 	stmia.w	r5, {r0, r1}
 8002668:	1d33      	adds	r3, r6, #4
 800266a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800266c:	6838      	ldr	r0, [r7, #0]
 800266e:	f005 ff75 	bl	800855c <USB_DevInit>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e014      	b.n	80026ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	2b01      	cmp	r3, #1
 800269a:	d102      	bne.n	80026a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f001 f949 	bl	8003934 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f006 fedb 	bl	8009462 <USB_DevDisconnect>

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_PCD_Start+0x1c>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e022      	b.n	8002718 <HAL_PCD_Start+0x62>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d105      	bne.n	80026fa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f005 febe 	bl	8008480 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f006 fe89 	bl	8009420 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_PCD_Stop+0x1c>
 8002738:	2302      	movs	r3, #2
 800273a:	e028      	b.n	800278e <HAL_PCD_Stop+0x6e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f005 feaa 	bl	80084a2 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f006 fe85 	bl	8009462 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2110      	movs	r1, #16
 800275e:	4618      	mov	r0, r3
 8002760:	f006 f85a 	bl	8008818 <USB_FlushTxFifo>

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d109      	bne.n	8002784 <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002796:	b590      	push	{r4, r7, lr}
 8002798:	b08d      	sub	sp, #52	; 0x34
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f006 ff0c 	bl	80095ca <USB_GetMode>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f040 84b7 	bne.w	8003128 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f006 fe70 	bl	80094a4 <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 84ad 	beq.w	8003126 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f006 fe5d 	bl	80094a4 <USB_ReadInterrupts>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d107      	bne.n	8002804 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f002 0202 	and.w	r2, r2, #2
 8002802:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f006 fe4b 	bl	80094a4 <USB_ReadInterrupts>
 800280e:	4603      	mov	r3, r0
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b10      	cmp	r3, #16
 8002816:	d161      	bne.n	80028dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0210 	bic.w	r2, r2, #16
 8002826:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	f003 020f 	and.w	r2, r3, #15
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4413      	add	r3, r2
 8002844:	3304      	adds	r3, #4
 8002846:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	0c5b      	lsrs	r3, r3, #17
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	2b02      	cmp	r3, #2
 8002852:	d124      	bne.n	800289e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d035      	beq.n	80028cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800286a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800286e:	b29b      	uxth	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	6a38      	ldr	r0, [r7, #32]
 8002874:	f006 fc82 	bl	800917c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002884:	441a      	add	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002896:	441a      	add	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	615a      	str	r2, [r3, #20]
 800289c:	e016      	b.n	80028cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	0c5b      	lsrs	r3, r3, #17
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d110      	bne.n	80028cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028b0:	2208      	movs	r2, #8
 80028b2:	4619      	mov	r1, r3
 80028b4:	6a38      	ldr	r0, [r7, #32]
 80028b6:	f006 fc61 	bl	800917c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c6:	441a      	add	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0210 	orr.w	r2, r2, #16
 80028da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f006 fddf 	bl	80094a4 <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028f0:	f040 80a7 	bne.w	8002a42 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f006 fde4 	bl	80094ca <USB_ReadDevAllOutEpInterrupt>
 8002902:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002904:	e099      	b.n	8002a3a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 808e 	beq.w	8002a2e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f006 fe08 	bl	8009532 <USB_ReadDevOutEPInterrupt>
 8002922:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293a:	461a      	mov	r2, r3
 800293c:	2301      	movs	r3, #1
 800293e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fe70 	bl	8003628 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00c      	beq.n	800296c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295e:	461a      	mov	r2, r3
 8002960:	2308      	movs	r3, #8
 8002962:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 ff46 	bl	80037f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	4413      	add	r3, r2
 800297e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002982:	461a      	mov	r2, r3
 8002984:	2310      	movs	r3, #16
 8002986:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d030      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299a:	2b80      	cmp	r3, #128	; 0x80
 800299c:	d109      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	3304      	adds	r3, #4
 80029c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	78db      	ldrb	r3, [r3, #3]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d108      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2200      	movs	r2, #0
 80029d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	4619      	mov	r1, r3
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f009 fb4d 	bl	800c07c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ee:	461a      	mov	r2, r3
 80029f0:	2302      	movs	r3, #2
 80029f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a26:	461a      	mov	r2, r3
 8002a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a2c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	3301      	adds	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	085b      	lsrs	r3, r3, #1
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f47f af62 	bne.w	8002906 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f006 fd2c 	bl	80094a4 <USB_ReadInterrupts>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a56:	f040 80db 	bne.w	8002c10 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f006 fd4d 	bl	80094fe <USB_ReadDevAllInEpInterrupt>
 8002a64:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a6a:	e0cd      	b.n	8002c08 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80c2 	beq.w	8002bfc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f006 fd73 	bl	800956e <USB_ReadDevInEPInterrupt>
 8002a88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d057      	beq.n	8002b44 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69f9      	ldr	r1, [r7, #28]
 8002ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d132      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3348      	adds	r3, #72	; 0x48
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4403      	add	r3, r0
 8002af2:	3344      	adds	r3, #68	; 0x44
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4419      	add	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4403      	add	r3, r0
 8002b06:	3348      	adds	r3, #72	; 0x48
 8002b08:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d113      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x3a2>
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	334c      	adds	r3, #76	; 0x4c
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b30:	461a      	mov	r2, r3
 8002b32:	2101      	movs	r1, #1
 8002b34:	f006 fd7c 	bl	8009630 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f009 fa17 	bl	800bf72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b76:	461a      	mov	r2, r3
 8002b78:	2310      	movs	r3, #16
 8002b7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b92:	461a      	mov	r2, r3
 8002b94:	2340      	movs	r3, #64	; 0x40
 8002b96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d023      	beq.n	8002bea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ba4:	6a38      	ldr	r0, [r7, #32]
 8002ba6:	f005 fe37 	bl	8008818 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	3338      	adds	r3, #56	; 0x38
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	3304      	adds	r3, #4
 8002bbc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	78db      	ldrb	r3, [r3, #3]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f009 fa64 	bl	800c0a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be4:	461a      	mov	r2, r3
 8002be6:	2302      	movs	r3, #2
 8002be8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fc88 	bl	800350c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	3301      	adds	r3, #1
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f47f af2e 	bne.w	8002a6c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f006 fc45 	bl	80094a4 <USB_ReadInterrupts>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c24:	d122      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d108      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fe94 	bl	800397c <HAL_PCDEx_LPM_Callback>
 8002c54:	e002      	b.n	8002c5c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f009 fa02 	bl	800c060 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f006 fc17 	bl	80094a4 <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c80:	d112      	bne.n	8002ca8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d102      	bne.n	8002c98 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f009 f9be 	bl	800c014 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f006 fbf9 	bl	80094a4 <USB_ReadInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cbc:	d121      	bne.n	8002d02 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002ccc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d111      	bne.n	8002cfc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	f003 020f 	and.w	r2, r3, #15
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fe41 	bl	800397c <HAL_PCDEx_LPM_Callback>
 8002cfa:	e002      	b.n	8002d02 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f009 f989 	bl	800c014 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f006 fbcc 	bl	80094a4 <USB_ReadInterrupts>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d16:	f040 80b7 	bne.w	8002e88 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2110      	movs	r1, #16
 8002d34:	4618      	mov	r0, r3
 8002d36:	f005 fd6f 	bl	8008818 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3e:	e046      	b.n	8002dce <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d64:	0151      	lsls	r1, r2, #5
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	440a      	add	r2, r1
 8002d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d86:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d98:	0151      	lsls	r1, r2, #5
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	440a      	add	r2, r1
 8002d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002da2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002da6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db8:	0151      	lsls	r1, r2, #5
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	440a      	add	r2, r1
 8002dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002dc6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dca:	3301      	adds	r3, #1
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d3b3      	bcc.n	8002d40 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002de6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002dea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d016      	beq.n	8002e22 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e04:	f043 030b 	orr.w	r3, r3, #11
 8002e08:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e1a:	f043 030b 	orr.w	r3, r3, #11
 8002e1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e20:	e015      	b.n	8002e4e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e30:	4619      	mov	r1, r3
 8002e32:	f242 032b 	movw	r3, #8235	; 0x202b
 8002e36:	4313      	orrs	r3, r2
 8002e38:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e48:	f043 030b 	orr.w	r3, r3, #11
 8002e4c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e60:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e72:	461a      	mov	r2, r3
 8002e74:	f006 fbdc 	bl	8009630 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f006 fb09 	bl	80094a4 <USB_ReadInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e9c:	d124      	bne.n	8002ee8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f006 fba0 	bl	80095e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f005 fd30 	bl	8008912 <USB_GetDevSpeed>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681c      	ldr	r4, [r3, #0]
 8002ebe:	f002 f9e3 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 8002ec2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f005 fa35 	bl	800833c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f009 f875 	bl	800bfc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f006 fad9 	bl	80094a4 <USB_ReadInterrupts>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d10a      	bne.n	8002f12 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f009 f852 	bl	800bfa6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f002 0208 	and.w	r2, r2, #8
 8002f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f006 fac4 	bl	80094a4 <USB_ReadInterrupts>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f22:	2b80      	cmp	r3, #128	; 0x80
 8002f24:	d122      	bne.n	8002f6c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f32:	2301      	movs	r3, #1
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
 8002f36:	e014      	b.n	8002f62 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4619      	mov	r1, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 faa7 	bl	80034aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	3301      	adds	r3, #1
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d3e5      	bcc.n	8002f38 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f006 fa97 	bl	80094a4 <USB_ReadInterrupts>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f80:	d13b      	bne.n	8002ffa <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f82:	2301      	movs	r3, #1
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	e02b      	b.n	8002fe0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3340      	adds	r3, #64	; 0x40
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d115      	bne.n	8002fda <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	da12      	bge.n	8002fda <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	333f      	adds	r3, #63	; 0x3f
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fa68 	bl	80034aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	3301      	adds	r3, #1
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d3ce      	bcc.n	8002f88 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ff8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f006 fa50 	bl	80094a4 <USB_ReadInterrupts>
 8003004:	4603      	mov	r3, r0
 8003006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800300e:	d155      	bne.n	80030bc <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003010:	2301      	movs	r3, #1
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
 8003014:	e045      	b.n	80030a2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d12e      	bne.n	800309c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800303e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003040:	2b00      	cmp	r3, #0
 8003042:	da2b      	bge.n	800309c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003050:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003054:	429a      	cmp	r2, r3
 8003056:	d121      	bne.n	800309c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003094:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003098:	6053      	str	r3, [r2, #4]
            break;
 800309a:	e007      	b.n	80030ac <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	3301      	adds	r3, #1
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d3b4      	bcc.n	8003016 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f006 f9ef 	bl	80094a4 <USB_ReadInterrupts>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d0:	d10a      	bne.n	80030e8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f008 fff6 	bl	800c0c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f006 f9d9 	bl	80094a4 <USB_ReadInterrupts>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d115      	bne.n	8003128 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f008 ffe6 	bl	800c0e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	e000      	b.n	8003128 <HAL_PCD_IRQHandler+0x992>
      return;
 8003126:	bf00      	nop
    }
  }
}
 8003128:	3734      	adds	r7, #52	; 0x34
 800312a:	46bd      	mov	sp, r7
 800312c:	bd90      	pop	{r4, r7, pc}

0800312e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_PCD_SetAddress+0x1a>
 8003144:	2302      	movs	r3, #2
 8003146:	e013      	b.n	8003170 <HAL_PCD_SetAddress+0x42>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f006 f937 	bl	80093d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	4608      	mov	r0, r1
 8003182:	4611      	mov	r1, r2
 8003184:	461a      	mov	r2, r3
 8003186:	4603      	mov	r3, r0
 8003188:	70fb      	strb	r3, [r7, #3]
 800318a:	460b      	mov	r3, r1
 800318c:	803b      	strh	r3, [r7, #0]
 800318e:	4613      	mov	r3, r2
 8003190:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800319a:	2b00      	cmp	r3, #0
 800319c:	da0f      	bge.n	80031be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 020f 	and.w	r2, r3, #15
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	3338      	adds	r3, #56	; 0x38
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	705a      	strb	r2, [r3, #1]
 80031bc:	e00f      	b.n	80031de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031ea:	883a      	ldrh	r2, [r7, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	78ba      	ldrb	r2, [r7, #2]
 80031f4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003208:	78bb      	ldrb	r3, [r7, #2]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d102      	bne.n	8003214 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_PCD_EP_Open+0xaa>
 800321e:	2302      	movs	r3, #2
 8003220:	e00e      	b.n	8003240 <HAL_PCD_EP_Open+0xc8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68f9      	ldr	r1, [r7, #12]
 8003230:	4618      	mov	r0, r3
 8003232:	f005 fb93 	bl	800895c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800323e:	7afb      	ldrb	r3, [r7, #11]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	460b      	mov	r3, r1
 8003256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003258:	7afb      	ldrb	r3, [r7, #11]
 800325a:	f003 020f 	and.w	r2, r3, #15
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4413      	add	r3, r2
 800326e:	3304      	adds	r3, #4
 8003270:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2200      	movs	r2, #0
 8003282:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2200      	movs	r2, #0
 8003288:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328a:	7afb      	ldrb	r3, [r7, #11]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	b2da      	uxtb	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d102      	bne.n	80032a4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	6979      	ldr	r1, [r7, #20]
 80032b2:	f005 fbdb 	bl	8008a6c <USB_EPStartXfer>

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	460b      	mov	r3, r1
 80032ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d0:	7afb      	ldrb	r3, [r7, #11]
 80032d2:	f003 020f 	and.w	r2, r3, #15
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	3338      	adds	r3, #56	; 0x38
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	3304      	adds	r3, #4
 80032e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2200      	movs	r2, #0
 80032f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2201      	movs	r2, #1
 80032fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003300:	7afb      	ldrb	r3, [r7, #11]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	b2da      	uxtb	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d102      	bne.n	800331a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	6979      	ldr	r1, [r7, #20]
 8003328:	f005 fba0 	bl	8008a6c <USB_EPStartXfer>

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	f003 020f 	and.w	r2, r3, #15
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	d901      	bls.n	8003354 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e050      	b.n	80033f6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003358:	2b00      	cmp	r3, #0
 800335a:	da0f      	bge.n	800337c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	f003 020f 	and.w	r2, r3, #15
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	3338      	adds	r3, #56	; 0x38
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4413      	add	r3, r2
 8003370:	3304      	adds	r3, #4
 8003372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	705a      	strb	r2, [r3, #1]
 800337a:	e00d      	b.n	8003398 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	3304      	adds	r3, #4
 8003390:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_PCD_EP_SetStall+0x82>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e01e      	b.n	80033f6 <HAL_PCD_EP_SetStall+0xc0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68f9      	ldr	r1, [r7, #12]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f005 ff30 	bl	800922c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	b2d9      	uxtb	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033e6:	461a      	mov	r2, r3
 80033e8:	f006 f922 	bl	8009630 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800340a:	78fb      	ldrb	r3, [r7, #3]
 800340c:	f003 020f 	and.w	r2, r3, #15
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	d901      	bls.n	800341c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e042      	b.n	80034a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800341c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003420:	2b00      	cmp	r3, #0
 8003422:	da0f      	bge.n	8003444 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	f003 020f 	and.w	r2, r3, #15
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	3338      	adds	r3, #56	; 0x38
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4413      	add	r3, r2
 8003438:	3304      	adds	r3, #4
 800343a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	705a      	strb	r2, [r3, #1]
 8003442:	e00f      	b.n	8003464 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	f003 020f 	and.w	r2, r3, #15
 800344a:	4613      	mov	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	3304      	adds	r3, #4
 800345c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_PCD_EP_ClrStall+0x86>
 8003480:	2302      	movs	r3, #2
 8003482:	e00e      	b.n	80034a2 <HAL_PCD_EP_ClrStall+0xa4>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68f9      	ldr	r1, [r7, #12]
 8003492:	4618      	mov	r0, r3
 8003494:	f005 ff38 	bl	8009308 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	da0c      	bge.n	80034d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 020f 	and.w	r2, r3, #15
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	3338      	adds	r3, #56	; 0x38
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	3304      	adds	r3, #4
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	e00c      	b.n	80034f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	f003 020f 	and.w	r2, r3, #15
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	3304      	adds	r3, #4
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68f9      	ldr	r1, [r7, #12]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f005 fd57 	bl	8008fac <USB_EPStopXfer>
 80034fe:	4603      	mov	r3, r0
 8003500:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003502:	7afb      	ldrb	r3, [r7, #11]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af02      	add	r7, sp, #8
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	3338      	adds	r3, #56	; 0x38
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	3304      	adds	r3, #4
 8003532:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	429a      	cmp	r2, r3
 800353e:	d901      	bls.n	8003544 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e06c      	b.n	800361e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	429a      	cmp	r2, r3
 8003558:	d902      	bls.n	8003560 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3303      	adds	r3, #3
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003568:	e02b      	b.n	80035c2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	429a      	cmp	r2, r3
 800357e:	d902      	bls.n	8003586 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3303      	adds	r3, #3
 800358a:	089b      	lsrs	r3, r3, #2
 800358c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	68d9      	ldr	r1, [r3, #12]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	4603      	mov	r3, r0
 80035a4:	6978      	ldr	r0, [r7, #20]
 80035a6:	f005 fdab 	bl	8009100 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	441a      	add	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	441a      	add	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d809      	bhi.n	80035ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d203      	bcs.n	80035ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1be      	bne.n	800356a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d811      	bhi.n	800361c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	2201      	movs	r2, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	43db      	mvns	r3, r3
 8003612:	6939      	ldr	r1, [r7, #16]
 8003614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003618:	4013      	ands	r3, r2
 800361a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	333c      	adds	r3, #60	; 0x3c
 8003640:	3304      	adds	r3, #4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d17b      	bne.n	8003756 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d015      	beq.n	8003694 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	4a61      	ldr	r2, [pc, #388]	; (80037f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	f240 80b9 	bls.w	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80b3 	beq.w	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368a:	461a      	mov	r2, r3
 800368c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003690:	6093      	str	r3, [r2, #8]
 8003692:	e0a7      	b.n	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036aa:	461a      	mov	r2, r3
 80036ac:	2320      	movs	r3, #32
 80036ae:	6093      	str	r3, [r2, #8]
 80036b0:	e098      	b.n	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 8093 	bne.w	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	4a4b      	ldr	r2, [pc, #300]	; (80037f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d90f      	bls.n	80036e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036dc:	461a      	mov	r2, r3
 80036de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036e2:	6093      	str	r3, [r2, #8]
 80036e4:	e07e      	b.n	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	0159      	lsls	r1, r3, #5
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	440b      	add	r3, r1
 8003708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003712:	1ad2      	subs	r2, r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d114      	bne.n	8003748 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003730:	461a      	mov	r2, r3
 8003732:	2101      	movs	r1, #1
 8003734:	f005 ff7c 	bl	8009630 <USB_EP0_OutStart>
 8003738:	e006      	b.n	8003748 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	441a      	add	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f008 fbf4 	bl	800bf3c <HAL_PCD_DataOutStageCallback>
 8003754:	e046      	b.n	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	4a26      	ldr	r2, [pc, #152]	; (80037f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d124      	bne.n	80037a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	461a      	mov	r2, r3
 8003776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377a:	6093      	str	r3, [r2, #8]
 800377c:	e032      	b.n	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003794:	461a      	mov	r2, r3
 8003796:	2320      	movs	r3, #32
 8003798:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	4619      	mov	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f008 fbcb 	bl	800bf3c <HAL_PCD_DataOutStageCallback>
 80037a6:	e01d      	b.n	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d114      	bne.n	80037d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037d0:	461a      	mov	r2, r3
 80037d2:	2100      	movs	r1, #0
 80037d4:	f005 ff2c 	bl	8009630 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	4619      	mov	r1, r3
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f008 fbac 	bl	800bf3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	4f54300a 	.word	0x4f54300a
 80037f4:	4f54310a 	.word	0x4f54310a

080037f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	333c      	adds	r3, #60	; 0x3c
 8003810:	3304      	adds	r3, #4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a15      	ldr	r2, [pc, #84]	; (8003880 <PCD_EP_OutSetupPacket_int+0x88>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d90e      	bls.n	800384c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003834:	2b00      	cmp	r3, #0
 8003836:	d009      	beq.n	800384c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003844:	461a      	mov	r2, r3
 8003846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f008 fb63 	bl	800bf18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <PCD_EP_OutSetupPacket_int+0x88>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d90c      	bls.n	8003874 <PCD_EP_OutSetupPacket_int+0x7c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d108      	bne.n	8003874 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800386c:	461a      	mov	r2, r3
 800386e:	2101      	movs	r1, #1
 8003870:	f005 fede 	bl	8009630 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	4f54300a 	.word	0x4f54300a

08003884 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
 8003890:	4613      	mov	r3, r2
 8003892:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d107      	bne.n	80038b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038a2:	883b      	ldrh	r3, [r7, #0]
 80038a4:	0419      	lsls	r1, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28
 80038b0:	e028      	b.n	8003904 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4413      	add	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038c0:	2300      	movs	r3, #0
 80038c2:	73fb      	strb	r3, [r7, #15]
 80038c4:	e00d      	b.n	80038e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	3340      	adds	r3, #64	; 0x40
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4413      	add	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	3301      	adds	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
 80038e2:	7bfa      	ldrb	r2, [r7, #15]
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d3ec      	bcc.n	80038c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038ec:	883b      	ldrh	r3, [r7, #0]
 80038ee:	0418      	lsls	r0, r3, #16
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6819      	ldr	r1, [r3, #0]
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	4302      	orrs	r2, r0
 80038fc:	3340      	adds	r3, #64	; 0x40
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	887a      	ldrh	r2, [r7, #2]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_PCDEx_ActivateLPM+0x44>)
 8003964:	4313      	orrs	r3, r2
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	10000003 	.word	0x10000003

0800397c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800399c:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <HAL_PWREx_ConfigSupply+0x70>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d00a      	beq.n	80039be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <HAL_PWREx_ConfigSupply+0x70>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d001      	beq.n	80039ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e01f      	b.n	80039fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e01d      	b.n	80039fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <HAL_PWREx_ConfigSupply+0x70>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f023 0207 	bic.w	r2, r3, #7
 80039c6:	490f      	ldr	r1, [pc, #60]	; (8003a04 <HAL_PWREx_ConfigSupply+0x70>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039ce:	f7fe f98b 	bl	8001ce8 <HAL_GetTick>
 80039d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039d4:	e009      	b.n	80039ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039d6:	f7fe f987 	bl	8001ce8 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e4:	d901      	bls.n	80039ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e007      	b.n	80039fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_PWREx_ConfigSupply+0x70>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f6:	d1ee      	bne.n	80039d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	58024800 	.word	0x58024800

08003a08 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a16:	60d3      	str	r3, [r2, #12]
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	58024800 	.word	0x58024800

08003a28 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003a30:	f7fe f95a 	bl	8001ce8 <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e05f      	b.n	8003b00 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d107      	bne.n	8003a5c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7fd f8bb 	bl	8000bc8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003a52:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fac0 	bl	8003fdc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	021a      	lsls	r2, r3, #8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2120      	movs	r1, #32
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fab8 	bl	8003ff8 <QSPI_WaitFlagStateUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003a8c:	7afb      	ldrb	r3, [r7, #11]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d135      	bne.n	8003afe <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_QSPI_Init+0xe0>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6852      	ldr	r2, [r2, #4]
 8003aa0:	0611      	lsls	r1, r2, #24
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68d2      	ldr	r2, [r2, #12]
 8003aa6:	4311      	orrs	r1, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	69d2      	ldr	r2, [r2, #28]
 8003aac:	4311      	orrs	r1, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6a12      	ldr	r2, [r2, #32]
 8003ab2:	4311      	orrs	r1, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_QSPI_Init+0xe4>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6912      	ldr	r2, [r2, #16]
 8003aca:	0411      	lsls	r1, r2, #16
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6952      	ldr	r2, [r2, #20]
 8003ad0:	4311      	orrs	r1, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6992      	ldr	r2, [r2, #24]
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003afe:	7afb      	ldrb	r3, [r7, #11]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	00ffff2f 	.word	0x00ffff2f
 8003b0c:	ffe0f8fe 	.word	0xffe0f8fe

08003b10 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7fe f8e4 	bl	8001ce8 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_QSPI_Command+0x22>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e048      	b.n	8003bc4 <HAL_QSPI_Command+0xb4>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d137      	bne.n	8003bb6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2120      	movs	r1, #32
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fa4a 	bl	8003ff8 <QSPI_WaitFlagStateUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d125      	bne.n	8003bba <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 fa77 	bl	8004066 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d115      	bne.n	8003bac <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2201      	movs	r2, #1
 8003b88:	2102      	movs	r1, #2
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fa34 	bl	8003ff8 <QSPI_WaitFlagStateUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10f      	bne.n	8003bba <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003baa:	e006      	b.n	8003bba <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bb4:	e001      	b.n	8003bba <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003bdc:	f7fe f884 	bl	8001ce8 <HAL_GetTick>
 8003be0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3320      	adds	r3, #32
 8003be8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_QSPI_Transmit+0x2e>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e076      	b.n	8003ce8 <HAL_QSPI_Transmit+0x11c>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d165      	bne.n	8003cda <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d056      	beq.n	8003cc8 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2212      	movs	r2, #18
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003c4e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003c50:	e01b      	b.n	8003c8a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	2104      	movs	r1, #4
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f9cb 	bl	8003ff8 <QSPI_WaitFlagStateUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003c66:	7ffb      	ldrb	r3, [r7, #31]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d113      	bne.n	8003c94 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	1e5a      	subs	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1df      	bne.n	8003c52 <HAL_QSPI_Transmit+0x86>
 8003c92:	e000      	b.n	8003c96 <HAL_QSPI_Transmit+0xca>
          break;
 8003c94:	bf00      	nop
      }

      if (status == HAL_OK)
 8003c96:	7ffb      	ldrb	r3, [r7, #31]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d110      	bne.n	8003cbe <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f9a6 	bl	8003ff8 <QSPI_WaitFlagStateUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003cb0:	7ffb      	ldrb	r3, [r7, #31]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cc6:	e00a      	b.n	8003cde <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	f043 0208 	orr.w	r2, r3, #8
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e001      	b.n	8003cde <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003ce6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	; 0x28
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003d00:	f7fd fff2 	bl	8001ce8 <HAL_GetTick>
 8003d04:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3320      	adds	r3, #32
 8003d14:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_QSPI_Receive+0x36>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e07d      	b.n	8003e22 <HAL_QSPI_Receive+0x132>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d16c      	bne.n	8003e14 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d05d      	beq.n	8003e02 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2222      	movs	r2, #34	; 0x22
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d7e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003d88:	e01c      	b.n	8003dc4 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2201      	movs	r2, #1
 8003d92:	2106      	movs	r1, #6
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f92f 	bl	8003ff8 <QSPI_WaitFlagStateUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003d9e:	7ffb      	ldrb	r3, [r7, #31]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d114      	bne.n	8003dce <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	7812      	ldrb	r2, [r2, #0]
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	1e5a      	subs	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1de      	bne.n	8003d8a <HAL_QSPI_Receive+0x9a>
 8003dcc:	e000      	b.n	8003dd0 <HAL_QSPI_Receive+0xe0>
          break;
 8003dce:	bf00      	nop
      }

      if (status == HAL_OK)
 8003dd0:	7ffb      	ldrb	r3, [r7, #31]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d110      	bne.n	8003df8 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	2102      	movs	r1, #2
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f909 	bl	8003ff8 <QSPI_WaitFlagStateUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003dea:	7ffb      	ldrb	r3, [r7, #31]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2202      	movs	r2, #2
 8003df6:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e00:	e00a      	b.n	8003e18 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	f043 0208 	orr.w	r2, r3, #8
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e001      	b.n	8003e18 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
 8003e16:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b088      	sub	sp, #32
 8003e2e:	af02      	add	r7, sp, #8
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003e38:	f7fd ff56 	bl	8001ce8 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_QSPI_AutoPolling+0x24>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e060      	b.n	8003f10 <HAL_QSPI_AutoPolling+0xe6>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d14f      	bne.n	8003f02 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2242      	movs	r2, #66	; 0x42
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2120      	movs	r1, #32
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f8bc 	bl	8003ff8 <QSPI_WaitFlagStateUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d13d      	bne.n	8003f06 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6852      	ldr	r2, [r2, #4]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6892      	ldr	r2, [r2, #8]
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003ec0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003eca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f8c8 	bl	8004066 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2201      	movs	r2, #1
 8003ede:	2108      	movs	r1, #8
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f889 	bl	8003ff8 <QSPI_WaitFlagStateUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f00:	e001      	b.n	8003f06 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
 8003f04:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003f24:	f7fd fee0 	bl	8001ce8 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_QSPI_MemoryMapped+0x22>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e04c      	b.n	8003fd4 <HAL_QSPI_MemoryMapped+0xbc>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d13b      	bne.n	8003fc6 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2282      	movs	r2, #130	; 0x82
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2200      	movs	r2, #0
 8003f66:	2120      	movs	r1, #32
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f845 	bl	8003ff8 <QSPI_WaitFlagStateUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d128      	bne.n	8003fca <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 0108 	bic.w	r1, r3, #8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d110      	bne.n	8003fb8 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003fb6:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8003fb8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f851 	bl	8004066 <QSPI_Config>
 8003fc4:	e001      	b.n	8003fca <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004008:	e01a      	b.n	8004040 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d016      	beq.n	8004040 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004012:	f7fd fe69 	bl	8001ce8 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2204      	movs	r2, #4
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004034:	f043 0201 	orr.w	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e00e      	b.n	800405e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	429a      	cmp	r2, r3
 800405a:	d1d6      	bne.n	800400a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <QSPI_Config+0x28>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004080:	d005      	beq.n	800408e <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3a01      	subs	r2, #1
 800408c:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80b9 	beq.w	800420a <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d05f      	beq.n	8004160 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	6892      	ldr	r2, [r2, #8]
 80040a8:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d031      	beq.n	8004116 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	431a      	orrs	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	049b      	lsls	r3, r3, #18
 80040ce:	431a      	orrs	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	431a      	orrs	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	ea42 0103 	orr.w	r1, r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004106:	f000 812e 	beq.w	8004366 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	6852      	ldr	r2, [r2, #4]
 8004112:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004114:	e127      	b.n	8004366 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	431a      	orrs	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004124:	431a      	orrs	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	431a      	orrs	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	049b      	lsls	r3, r3, #18
 8004132:	431a      	orrs	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	431a      	orrs	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	431a      	orrs	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	431a      	orrs	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	431a      	orrs	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	ea42 0103 	orr.w	r1, r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	430a      	orrs	r2, r1
 800415c:	615a      	str	r2, [r3, #20]
}
 800415e:	e102      	b.n	8004366 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02e      	beq.n	80041c6 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	431a      	orrs	r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	431a      	orrs	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	431a      	orrs	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	049b      	lsls	r3, r3, #18
 8004184:	431a      	orrs	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	431a      	orrs	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	431a      	orrs	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	431a      	orrs	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	431a      	orrs	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	ea42 0103 	orr.w	r1, r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80041b6:	f000 80d6 	beq.w	8004366 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	6852      	ldr	r2, [r2, #4]
 80041c2:	619a      	str	r2, [r3, #24]
}
 80041c4:	e0cf      	b.n	8004366 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	431a      	orrs	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d4:	431a      	orrs	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	431a      	orrs	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	049b      	lsls	r3, r3, #18
 80041e2:	431a      	orrs	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	ea42 0103 	orr.w	r1, r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	430a      	orrs	r2, r1
 8004206:	615a      	str	r2, [r3, #20]
}
 8004208:	e0ad      	b.n	8004366 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d058      	beq.n	80042c4 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	6892      	ldr	r2, [r2, #8]
 800421a:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d02d      	beq.n	8004280 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	431a      	orrs	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004232:	431a      	orrs	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	431a      	orrs	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	049b      	lsls	r3, r3, #18
 8004240:	431a      	orrs	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	431a      	orrs	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	431a      	orrs	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	431a      	orrs	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	431a      	orrs	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	ea42 0103 	orr.w	r1, r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	430a      	orrs	r2, r1
 800426a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004272:	d078      	beq.n	8004366 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	6852      	ldr	r2, [r2, #4]
 800427c:	619a      	str	r2, [r3, #24]
}
 800427e:	e072      	b.n	8004366 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	431a      	orrs	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	431a      	orrs	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	431a      	orrs	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	049b      	lsls	r3, r3, #18
 800429c:	431a      	orrs	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	ea42 0103 	orr.w	r1, r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	430a      	orrs	r2, r1
 80042c0:	615a      	str	r2, [r3, #20]
}
 80042c2:	e050      	b.n	8004366 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d02a      	beq.n	8004322 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	431a      	orrs	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	431a      	orrs	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	049b      	lsls	r3, r3, #18
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	ea42 0103 	orr.w	r1, r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	430a      	orrs	r2, r1
 800430c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004314:	d027      	beq.n	8004366 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	6852      	ldr	r2, [r2, #4]
 800431e:	619a      	str	r2, [r3, #24]
}
 8004320:	e021      	b.n	8004366 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01d      	beq.n	8004366 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	431a      	orrs	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	431a      	orrs	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	431a      	orrs	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	049b      	lsls	r3, r3, #18
 8004346:	431a      	orrs	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	431a      	orrs	r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	431a      	orrs	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	ea42 0103 	orr.w	r1, r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	430a      	orrs	r2, r1
 8004364:	615a      	str	r2, [r3, #20]
}
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	; 0x30
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	f000 bc48 	b.w	8004c18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8088 	beq.w	80044a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004396:	4b99      	ldr	r3, [pc, #612]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043a0:	4b96      	ldr	r3, [pc, #600]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d007      	beq.n	80043bc <HAL_RCC_OscConfig+0x48>
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	2b18      	cmp	r3, #24
 80043b0:	d111      	bne.n	80043d6 <HAL_RCC_OscConfig+0x62>
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d10c      	bne.n	80043d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	4b8f      	ldr	r3, [pc, #572]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d06d      	beq.n	80044a4 <HAL_RCC_OscConfig+0x130>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d169      	bne.n	80044a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f000 bc21 	b.w	8004c18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043de:	d106      	bne.n	80043ee <HAL_RCC_OscConfig+0x7a>
 80043e0:	4b86      	ldr	r3, [pc, #536]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a85      	ldr	r2, [pc, #532]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	e02e      	b.n	800444c <HAL_RCC_OscConfig+0xd8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10c      	bne.n	8004410 <HAL_RCC_OscConfig+0x9c>
 80043f6:	4b81      	ldr	r3, [pc, #516]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a80      	ldr	r2, [pc, #512]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80043fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	4b7e      	ldr	r3, [pc, #504]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7d      	ldr	r2, [pc, #500]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e01d      	b.n	800444c <HAL_RCC_OscConfig+0xd8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004418:	d10c      	bne.n	8004434 <HAL_RCC_OscConfig+0xc0>
 800441a:	4b78      	ldr	r3, [pc, #480]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a77      	ldr	r2, [pc, #476]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b75      	ldr	r3, [pc, #468]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a74      	ldr	r2, [pc, #464]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e00b      	b.n	800444c <HAL_RCC_OscConfig+0xd8>
 8004434:	4b71      	ldr	r3, [pc, #452]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a70      	ldr	r2, [pc, #448]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800443a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b6e      	ldr	r3, [pc, #440]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a6d      	ldr	r2, [pc, #436]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d013      	beq.n	800447c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fd fc48 	bl	8001ce8 <HAL_GetTick>
 8004458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800445c:	f7fd fc44 	bl	8001ce8 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	; 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e3d4      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800446e:	4b63      	ldr	r3, [pc, #396]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0xe8>
 800447a:	e014      	b.n	80044a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fd fc34 	bl	8001ce8 <HAL_GetTick>
 8004480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004484:	f7fd fc30 	bl	8001ce8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	; 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e3c0      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004496:	4b59      	ldr	r3, [pc, #356]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x110>
 80044a2:	e000      	b.n	80044a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80ca 	beq.w	8004648 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b4:	4b51      	ldr	r3, [pc, #324]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044be:	4b4f      	ldr	r3, [pc, #316]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <HAL_RCC_OscConfig+0x166>
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	2b18      	cmp	r3, #24
 80044ce:	d156      	bne.n	800457e <HAL_RCC_OscConfig+0x20a>
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d151      	bne.n	800457e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044da:	4b48      	ldr	r3, [pc, #288]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_RCC_OscConfig+0x17e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e392      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044f2:	4b42      	ldr	r3, [pc, #264]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 0219 	bic.w	r2, r3, #25
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	493f      	ldr	r1, [pc, #252]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004500:	4313      	orrs	r3, r2
 8004502:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd fbf0 	bl	8001ce8 <HAL_GetTick>
 8004508:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800450c:	f7fd fbec 	bl	8001ce8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e37c      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800451e:	4b37      	ldr	r3, [pc, #220]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452a:	f7fd fc0d 	bl	8001d48 <HAL_GetREVID>
 800452e:	4603      	mov	r3, r0
 8004530:	f241 0203 	movw	r2, #4099	; 0x1003
 8004534:	4293      	cmp	r3, r2
 8004536:	d817      	bhi.n	8004568 <HAL_RCC_OscConfig+0x1f4>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d108      	bne.n	8004552 <HAL_RCC_OscConfig+0x1de>
 8004540:	4b2e      	ldr	r3, [pc, #184]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004548:	4a2c      	ldr	r2, [pc, #176]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800454a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004550:	e07a      	b.n	8004648 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	031b      	lsls	r3, r3, #12
 8004560:	4926      	ldr	r1, [pc, #152]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004562:	4313      	orrs	r3, r2
 8004564:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004566:	e06f      	b.n	8004648 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004568:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	061b      	lsls	r3, r3, #24
 8004576:	4921      	ldr	r1, [pc, #132]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004578:	4313      	orrs	r3, r2
 800457a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800457c:	e064      	b.n	8004648 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d047      	beq.n	8004616 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004586:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 0219 	bic.w	r2, r3, #25
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	491a      	ldr	r1, [pc, #104]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fd fba6 	bl	8001ce8 <HAL_GetTick>
 800459c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a0:	f7fd fba2 	bl	8001ce8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e332      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045b2:	4b12      	ldr	r3, [pc, #72]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045be:	f7fd fbc3 	bl	8001d48 <HAL_GetREVID>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d819      	bhi.n	8004600 <HAL_RCC_OscConfig+0x28c>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b40      	cmp	r3, #64	; 0x40
 80045d2:	d108      	bne.n	80045e6 <HAL_RCC_OscConfig+0x272>
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045dc:	4a07      	ldr	r2, [pc, #28]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80045de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e2:	6053      	str	r3, [r2, #4]
 80045e4:	e030      	b.n	8004648 <HAL_RCC_OscConfig+0x2d4>
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	031b      	lsls	r3, r3, #12
 80045f4:	4901      	ldr	r1, [pc, #4]	; (80045fc <HAL_RCC_OscConfig+0x288>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]
 80045fa:	e025      	b.n	8004648 <HAL_RCC_OscConfig+0x2d4>
 80045fc:	58024400 	.word	0x58024400
 8004600:	4b9a      	ldr	r3, [pc, #616]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	061b      	lsls	r3, r3, #24
 800460e:	4997      	ldr	r1, [pc, #604]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 8004610:	4313      	orrs	r3, r2
 8004612:	604b      	str	r3, [r1, #4]
 8004614:	e018      	b.n	8004648 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004616:	4b95      	ldr	r3, [pc, #596]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a94      	ldr	r2, [pc, #592]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004622:	f7fd fb61 	bl	8001ce8 <HAL_GetTick>
 8004626:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462a:	f7fd fb5d 	bl	8001ce8 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e2ed      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800463c:	4b8b      	ldr	r3, [pc, #556]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f0      	bne.n	800462a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80a9 	beq.w	80047a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004656:	4b85      	ldr	r3, [pc, #532]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800465e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004660:	4b82      	ldr	r3, [pc, #520]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d007      	beq.n	800467c <HAL_RCC_OscConfig+0x308>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b18      	cmp	r3, #24
 8004670:	d13a      	bne.n	80046e8 <HAL_RCC_OscConfig+0x374>
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b01      	cmp	r3, #1
 800467a:	d135      	bne.n	80046e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800467c:	4b7b      	ldr	r3, [pc, #492]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_OscConfig+0x320>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	2b80      	cmp	r3, #128	; 0x80
 800468e:	d001      	beq.n	8004694 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e2c1      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004694:	f7fd fb58 	bl	8001d48 <HAL_GetREVID>
 8004698:	4603      	mov	r3, r0
 800469a:	f241 0203 	movw	r2, #4099	; 0x1003
 800469e:	4293      	cmp	r3, r2
 80046a0:	d817      	bhi.n	80046d2 <HAL_RCC_OscConfig+0x35e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d108      	bne.n	80046bc <HAL_RCC_OscConfig+0x348>
 80046aa:	4b70      	ldr	r3, [pc, #448]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80046b2:	4a6e      	ldr	r2, [pc, #440]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80046b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046ba:	e075      	b.n	80047a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046bc:	4b6b      	ldr	r3, [pc, #428]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	069b      	lsls	r3, r3, #26
 80046ca:	4968      	ldr	r1, [pc, #416]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046d0:	e06a      	b.n	80047a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046d2:	4b66      	ldr	r3, [pc, #408]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	061b      	lsls	r3, r3, #24
 80046e0:	4962      	ldr	r1, [pc, #392]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046e6:	e05f      	b.n	80047a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d042      	beq.n	8004776 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046f0:	4b5e      	ldr	r3, [pc, #376]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a5d      	ldr	r2, [pc, #372]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80046f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fd faf4 	bl	8001ce8 <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004704:	f7fd faf0 	bl	8001ce8 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e280      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004716:	4b55      	ldr	r3, [pc, #340]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004722:	f7fd fb11 	bl	8001d48 <HAL_GetREVID>
 8004726:	4603      	mov	r3, r0
 8004728:	f241 0203 	movw	r2, #4099	; 0x1003
 800472c:	4293      	cmp	r3, r2
 800472e:	d817      	bhi.n	8004760 <HAL_RCC_OscConfig+0x3ec>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	2b20      	cmp	r3, #32
 8004736:	d108      	bne.n	800474a <HAL_RCC_OscConfig+0x3d6>
 8004738:	4b4c      	ldr	r3, [pc, #304]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004740:	4a4a      	ldr	r2, [pc, #296]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 8004742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004746:	6053      	str	r3, [r2, #4]
 8004748:	e02e      	b.n	80047a8 <HAL_RCC_OscConfig+0x434>
 800474a:	4b48      	ldr	r3, [pc, #288]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	069b      	lsls	r3, r3, #26
 8004758:	4944      	ldr	r1, [pc, #272]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 800475a:	4313      	orrs	r3, r2
 800475c:	604b      	str	r3, [r1, #4]
 800475e:	e023      	b.n	80047a8 <HAL_RCC_OscConfig+0x434>
 8004760:	4b42      	ldr	r3, [pc, #264]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	493f      	ldr	r1, [pc, #252]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 8004770:	4313      	orrs	r3, r2
 8004772:	60cb      	str	r3, [r1, #12]
 8004774:	e018      	b.n	80047a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004776:	4b3d      	ldr	r3, [pc, #244]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a3c      	ldr	r2, [pc, #240]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 800477c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004782:	f7fd fab1 	bl	8001ce8 <HAL_GetTick>
 8004786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800478a:	f7fd faad 	bl	8001ce8 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e23d      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800479c:	4b33      	ldr	r3, [pc, #204]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d036      	beq.n	8004822 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d019      	beq.n	80047f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047bc:	4b2b      	ldr	r3, [pc, #172]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80047be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c0:	4a2a      	ldr	r2, [pc, #168]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fd fa8e 	bl	8001ce8 <HAL_GetTick>
 80047cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d0:	f7fd fa8a 	bl	8001ce8 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e21a      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047e2:	4b22      	ldr	r3, [pc, #136]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80047e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0x45c>
 80047ee:	e018      	b.n	8004822 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f0:	4b1e      	ldr	r3, [pc, #120]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80047f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f4:	4a1d      	ldr	r2, [pc, #116]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fc:	f7fd fa74 	bl	8001ce8 <HAL_GetTick>
 8004800:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004804:	f7fd fa70 	bl	8001ce8 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e200      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004816:	4b15      	ldr	r3, [pc, #84]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 8004818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d039      	beq.n	80048a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01c      	beq.n	8004870 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a0c      	ldr	r2, [pc, #48]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 800483c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004840:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004842:	f7fd fa51 	bl	8001ce8 <HAL_GetTick>
 8004846:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800484a:	f7fd fa4d 	bl	8001ce8 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e1dd      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800485c:	4b03      	ldr	r3, [pc, #12]	; (800486c <HAL_RCC_OscConfig+0x4f8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x4d6>
 8004868:	e01b      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
 800486a:	bf00      	nop
 800486c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004870:	4b9b      	ldr	r3, [pc, #620]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a9a      	ldr	r2, [pc, #616]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800487a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800487c:	f7fd fa34 	bl	8001ce8 <HAL_GetTick>
 8004880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004884:	f7fd fa30 	bl	8001ce8 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e1c0      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004896:	4b92      	ldr	r3, [pc, #584]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8081 	beq.w	80049b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048b0:	4b8c      	ldr	r3, [pc, #560]	; (8004ae4 <HAL_RCC_OscConfig+0x770>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a8b      	ldr	r2, [pc, #556]	; (8004ae4 <HAL_RCC_OscConfig+0x770>)
 80048b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048bc:	f7fd fa14 	bl	8001ce8 <HAL_GetTick>
 80048c0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c4:	f7fd fa10 	bl	8001ce8 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e1a0      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048d6:	4b83      	ldr	r3, [pc, #524]	; (8004ae4 <HAL_RCC_OscConfig+0x770>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d106      	bne.n	80048f8 <HAL_RCC_OscConfig+0x584>
 80048ea:	4b7d      	ldr	r3, [pc, #500]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4a7c      	ldr	r2, [pc, #496]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70
 80048f6:	e02d      	b.n	8004954 <HAL_RCC_OscConfig+0x5e0>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10c      	bne.n	800491a <HAL_RCC_OscConfig+0x5a6>
 8004900:	4b77      	ldr	r3, [pc, #476]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	4a76      	ldr	r2, [pc, #472]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	6713      	str	r3, [r2, #112]	; 0x70
 800490c:	4b74      	ldr	r3, [pc, #464]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	4a73      	ldr	r2, [pc, #460]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004912:	f023 0304 	bic.w	r3, r3, #4
 8004916:	6713      	str	r3, [r2, #112]	; 0x70
 8004918:	e01c      	b.n	8004954 <HAL_RCC_OscConfig+0x5e0>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b05      	cmp	r3, #5
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0x5c8>
 8004922:	4b6f      	ldr	r3, [pc, #444]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	4a6e      	ldr	r2, [pc, #440]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	6713      	str	r3, [r2, #112]	; 0x70
 800492e:	4b6c      	ldr	r3, [pc, #432]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a6b      	ldr	r2, [pc, #428]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	e00b      	b.n	8004954 <HAL_RCC_OscConfig+0x5e0>
 800493c:	4b68      	ldr	r3, [pc, #416]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	4a67      	ldr	r2, [pc, #412]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	6713      	str	r3, [r2, #112]	; 0x70
 8004948:	4b65      	ldr	r3, [pc, #404]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	4a64      	ldr	r2, [pc, #400]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 800494e:	f023 0304 	bic.w	r3, r3, #4
 8004952:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d015      	beq.n	8004988 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495c:	f7fd f9c4 	bl	8001ce8 <HAL_GetTick>
 8004960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004962:	e00a      	b.n	800497a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004964:	f7fd f9c0 	bl	8001ce8 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e14e      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800497a:	4b59      	ldr	r3, [pc, #356]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0ee      	beq.n	8004964 <HAL_RCC_OscConfig+0x5f0>
 8004986:	e014      	b.n	80049b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004988:	f7fd f9ae 	bl	8001ce8 <HAL_GetTick>
 800498c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004990:	f7fd f9aa 	bl	8001ce8 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	; 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e138      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049a6:	4b4e      	ldr	r3, [pc, #312]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ee      	bne.n	8004990 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 812d 	beq.w	8004c16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80049bc:	4b48      	ldr	r3, [pc, #288]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049c4:	2b18      	cmp	r3, #24
 80049c6:	f000 80bd 	beq.w	8004b44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	f040 809e 	bne.w	8004b10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d4:	4b42      	ldr	r3, [pc, #264]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a41      	ldr	r2, [pc, #260]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 80049da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7fd f982 	bl	8001ce8 <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fd f97e 	bl	8001ce8 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e10e      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049fa:	4b39      	ldr	r3, [pc, #228]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a06:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0a:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <HAL_RCC_OscConfig+0x774>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a16:	0112      	lsls	r2, r2, #4
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	4931      	ldr	r1, [pc, #196]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	628b      	str	r3, [r1, #40]	; 0x28
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	3b01      	subs	r3, #1
 8004a26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	025b      	lsls	r3, r3, #9
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	041b      	lsls	r3, r3, #16
 8004a3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	061b      	lsls	r3, r3, #24
 8004a4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a50:	4923      	ldr	r1, [pc, #140]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004a56:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	4a21      	ldr	r2, [pc, #132]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a62:	4b1f      	ldr	r3, [pc, #124]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a66:	4b21      	ldr	r3, [pc, #132]	; (8004aec <HAL_RCC_OscConfig+0x778>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a6e:	00d2      	lsls	r2, r2, #3
 8004a70:	491b      	ldr	r1, [pc, #108]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a76:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	f023 020c 	bic.w	r2, r3, #12
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	4917      	ldr	r1, [pc, #92]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a88:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	f023 0202 	bic.w	r2, r3, #2
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a94:	4912      	ldr	r1, [pc, #72]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a9a:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	4a10      	ldr	r2, [pc, #64]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	4a0d      	ldr	r2, [pc, #52]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	4a0a      	ldr	r2, [pc, #40]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004abc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004abe:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <HAL_RCC_OscConfig+0x76c>)
 8004ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad6:	f7fd f907 	bl	8001ce8 <HAL_GetTick>
 8004ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004adc:	e011      	b.n	8004b02 <HAL_RCC_OscConfig+0x78e>
 8004ade:	bf00      	nop
 8004ae0:	58024400 	.word	0x58024400
 8004ae4:	58024800 	.word	0x58024800
 8004ae8:	fffffc0c 	.word	0xfffffc0c
 8004aec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fd f8fa 	bl	8001ce8 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e08a      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b02:	4b47      	ldr	r3, [pc, #284]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x77c>
 8004b0e:	e082      	b.n	8004c16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b10:	4b43      	ldr	r3, [pc, #268]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a42      	ldr	r2, [pc, #264]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fd f8e4 	bl	8001ce8 <HAL_GetTick>
 8004b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b24:	f7fd f8e0 	bl	8001ce8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e070      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b36:	4b3a      	ldr	r3, [pc, #232]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x7b0>
 8004b42:	e068      	b.n	8004c16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b44:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b4a:	4b35      	ldr	r3, [pc, #212]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d031      	beq.n	8004bbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f003 0203 	and.w	r2, r3, #3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d12a      	bne.n	8004bbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d122      	bne.n	8004bbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d11a      	bne.n	8004bbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	0a5b      	lsrs	r3, r3, #9
 8004b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d111      	bne.n	8004bbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	0c1b      	lsrs	r3, r3, #16
 8004b9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d108      	bne.n	8004bbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	0e1b      	lsrs	r3, r3, #24
 8004bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e02b      	b.n	8004c18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004bc0:	4b17      	ldr	r3, [pc, #92]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc4:	08db      	lsrs	r3, r3, #3
 8004bc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d01f      	beq.n	8004c16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004bd6:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	4a11      	ldr	r2, [pc, #68]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004be2:	f7fd f881 	bl	8001ce8 <HAL_GetTick>
 8004be6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004be8:	bf00      	nop
 8004bea:	f7fd f87d 	bl	8001ce8 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d0f9      	beq.n	8004bea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <HAL_RCC_OscConfig+0x8b0>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c02:	00d2      	lsls	r2, r2, #3
 8004c04:	4906      	ldr	r1, [pc, #24]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <HAL_RCC_OscConfig+0x8ac>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3730      	adds	r7, #48	; 0x30
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	58024400 	.word	0x58024400
 8004c24:	ffff0007 	.word	0xffff0007

08004c28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e19c      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b8a      	ldr	r3, [pc, #552]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d910      	bls.n	8004c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b87      	ldr	r3, [pc, #540]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 020f 	bic.w	r2, r3, #15
 8004c52:	4985      	ldr	r1, [pc, #532]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b83      	ldr	r3, [pc, #524]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e184      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d010      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	4b7b      	ldr	r3, [pc, #492]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d908      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c88:	4b78      	ldr	r3, [pc, #480]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	4975      	ldr	r1, [pc, #468]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d010      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	4b70      	ldr	r3, [pc, #448]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d908      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	496a      	ldr	r1, [pc, #424]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d010      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	4b64      	ldr	r3, [pc, #400]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d908      	bls.n	8004cf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ce4:	4b61      	ldr	r3, [pc, #388]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	495e      	ldr	r1, [pc, #376]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d010      	beq.n	8004d24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	4b59      	ldr	r3, [pc, #356]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d908      	bls.n	8004d24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d12:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	4953      	ldr	r1, [pc, #332]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d010      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	4b4d      	ldr	r3, [pc, #308]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d908      	bls.n	8004d52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d40:	4b4a      	ldr	r3, [pc, #296]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f023 020f 	bic.w	r2, r3, #15
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4947      	ldr	r1, [pc, #284]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d055      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d5e:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	4940      	ldr	r1, [pc, #256]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d107      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d78:	4b3c      	ldr	r3, [pc, #240]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d121      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0f6      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d90:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d115      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0ea      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d107      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004da8:	4b30      	ldr	r3, [pc, #192]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0de      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004db8:	4b2c      	ldr	r3, [pc, #176]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0d6      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dc8:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f023 0207 	bic.w	r2, r3, #7
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	4925      	ldr	r1, [pc, #148]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dda:	f7fc ff85 	bl	8001ce8 <HAL_GetTick>
 8004dde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de0:	e00a      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de2:	f7fc ff81 	bl	8001ce8 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e0be      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df8:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d1eb      	bne.n	8004de2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d010      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d208      	bcs.n	8004e38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e26:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	f023 020f 	bic.w	r2, r3, #15
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	490e      	ldr	r1, [pc, #56]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e38:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d214      	bcs.n	8004e70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f023 020f 	bic.w	r2, r3, #15
 8004e4e:	4906      	ldr	r1, [pc, #24]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e086      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
 8004e68:	52002000 	.word	0x52002000
 8004e6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d010      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	4b3f      	ldr	r3, [pc, #252]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d208      	bcs.n	8004e9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e8c:	4b3c      	ldr	r3, [pc, #240]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	4939      	ldr	r1, [pc, #228]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d010      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	4b34      	ldr	r3, [pc, #208]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d208      	bcs.n	8004ecc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004eba:	4b31      	ldr	r3, [pc, #196]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	492e      	ldr	r1, [pc, #184]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d010      	beq.n	8004efa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d208      	bcs.n	8004efa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	4922      	ldr	r1, [pc, #136]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d010      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d208      	bcs.n	8004f28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	4917      	ldr	r1, [pc, #92]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f28:	f000 f834 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	4912      	ldr	r1, [pc, #72]	; (8004f84 <HAL_RCC_ClockConfig+0x35c>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f46:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <HAL_RCC_ClockConfig+0x35c>)
 8004f50:	5cd3      	ldrb	r3, [r2, r3]
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5c:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <HAL_RCC_ClockConfig+0x360>)
 8004f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <HAL_RCC_ClockConfig+0x364>)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <HAL_RCC_ClockConfig+0x368>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fc fe72 	bl	8001c54 <HAL_InitTick>
 8004f70:	4603      	mov	r3, r0
 8004f72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	58024400 	.word	0x58024400
 8004f84:	0800d684 	.word	0x0800d684
 8004f88:	24000004 	.word	0x24000004
 8004f8c:	24000000 	.word	0x24000000
 8004f90:	24000024 	.word	0x24000024

08004f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b089      	sub	sp, #36	; 0x24
 8004f98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f9a:	4bb3      	ldr	r3, [pc, #716]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fa2:	2b18      	cmp	r3, #24
 8004fa4:	f200 8155 	bhi.w	8005252 <HAL_RCC_GetSysClockFreq+0x2be>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08005015 	.word	0x08005015
 8004fb4:	08005253 	.word	0x08005253
 8004fb8:	08005253 	.word	0x08005253
 8004fbc:	08005253 	.word	0x08005253
 8004fc0:	08005253 	.word	0x08005253
 8004fc4:	08005253 	.word	0x08005253
 8004fc8:	08005253 	.word	0x08005253
 8004fcc:	08005253 	.word	0x08005253
 8004fd0:	0800503b 	.word	0x0800503b
 8004fd4:	08005253 	.word	0x08005253
 8004fd8:	08005253 	.word	0x08005253
 8004fdc:	08005253 	.word	0x08005253
 8004fe0:	08005253 	.word	0x08005253
 8004fe4:	08005253 	.word	0x08005253
 8004fe8:	08005253 	.word	0x08005253
 8004fec:	08005253 	.word	0x08005253
 8004ff0:	08005041 	.word	0x08005041
 8004ff4:	08005253 	.word	0x08005253
 8004ff8:	08005253 	.word	0x08005253
 8004ffc:	08005253 	.word	0x08005253
 8005000:	08005253 	.word	0x08005253
 8005004:	08005253 	.word	0x08005253
 8005008:	08005253 	.word	0x08005253
 800500c:	08005253 	.word	0x08005253
 8005010:	08005047 	.word	0x08005047
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005014:	4b94      	ldr	r3, [pc, #592]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005020:	4b91      	ldr	r3, [pc, #580]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	08db      	lsrs	r3, r3, #3
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	4a90      	ldr	r2, [pc, #576]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800502c:	fa22 f303 	lsr.w	r3, r2, r3
 8005030:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005032:	e111      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005034:	4b8d      	ldr	r3, [pc, #564]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005036:	61bb      	str	r3, [r7, #24]
      break;
 8005038:	e10e      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800503a:	4b8d      	ldr	r3, [pc, #564]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800503c:	61bb      	str	r3, [r7, #24]
      break;
 800503e:	e10b      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005040:	4b8c      	ldr	r3, [pc, #560]	; (8005274 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005042:	61bb      	str	r3, [r7, #24]
      break;
 8005044:	e108      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005046:	4b88      	ldr	r3, [pc, #544]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005050:	4b85      	ldr	r3, [pc, #532]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800505a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800505c:	4b82      	ldr	r3, [pc, #520]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005066:	4b80      	ldr	r3, [pc, #512]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	08db      	lsrs	r3, r3, #3
 800506c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80e1 	beq.w	800524c <HAL_RCC_GetSysClockFreq+0x2b8>
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b02      	cmp	r3, #2
 800508e:	f000 8083 	beq.w	8005198 <HAL_RCC_GetSysClockFreq+0x204>
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b02      	cmp	r3, #2
 8005096:	f200 80a1 	bhi.w	80051dc <HAL_RCC_GetSysClockFreq+0x248>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x114>
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d056      	beq.n	8005154 <HAL_RCC_GetSysClockFreq+0x1c0>
 80050a6:	e099      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050a8:	4b6f      	ldr	r3, [pc, #444]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02d      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050b4:	4b6c      	ldr	r3, [pc, #432]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	08db      	lsrs	r3, r3, #3
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	4a6b      	ldr	r2, [pc, #428]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
 80050c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	ee07 3a90 	vmov	s15, r3
 80050cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b62      	ldr	r3, [pc, #392]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005278 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800510e:	e087      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800527c <HAL_RCC_GetSysClockFreq+0x2e8>
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	4b51      	ldr	r3, [pc, #324]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a02 	vldr	s12, [r7, #8]
 8005136:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005278 <HAL_RCC_GetSysClockFreq+0x2e4>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005152:	e065      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005280 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005166:	4b40      	ldr	r3, [pc, #256]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005176:	ed97 6a02 	vldr	s12, [r7, #8]
 800517a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005278 <HAL_RCC_GetSysClockFreq+0x2e4>
 800517e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005192:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005196:	e043      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005284 <HAL_RCC_GetSysClockFreq+0x2f0>
 80051a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051aa:	4b2f      	ldr	r3, [pc, #188]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80051be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005278 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051da:	e021      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005280 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ee:	4b1e      	ldr	r3, [pc, #120]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005202:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005278 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800521e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	0a5b      	lsrs	r3, r3, #9
 8005226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522a:	3301      	adds	r3, #1
 800522c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005238:	edd7 6a07 	vldr	s13, [r7, #28]
 800523c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005244:	ee17 3a90 	vmov	r3, s15
 8005248:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800524a:	e005      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]
      break;
 8005250:	e002      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005252:	4b07      	ldr	r3, [pc, #28]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005254:	61bb      	str	r3, [r7, #24]
      break;
 8005256:	bf00      	nop
  }

  return sysclockfreq;
 8005258:	69bb      	ldr	r3, [r7, #24]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3724      	adds	r7, #36	; 0x24
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	58024400 	.word	0x58024400
 800526c:	03d09000 	.word	0x03d09000
 8005270:	003d0900 	.word	0x003d0900
 8005274:	016e3600 	.word	0x016e3600
 8005278:	46000000 	.word	0x46000000
 800527c:	4c742400 	.word	0x4c742400
 8005280:	4a742400 	.word	0x4a742400
 8005284:	4bb71b00 	.word	0x4bb71b00

08005288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800528e:	f7ff fe81 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8005292:	4602      	mov	r2, r0
 8005294:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	490f      	ldr	r1, [pc, #60]	; (80052dc <HAL_RCC_GetHCLKFreq+0x54>)
 80052a0:	5ccb      	ldrb	r3, [r1, r3]
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	4a09      	ldr	r2, [pc, #36]	; (80052dc <HAL_RCC_GetHCLKFreq+0x54>)
 80052b6:	5cd3      	ldrb	r3, [r2, r3]
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	fa22 f303 	lsr.w	r3, r2, r3
 80052c2:	4a07      	ldr	r2, [pc, #28]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80052c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052c6:	4a07      	ldr	r2, [pc, #28]	; (80052e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80052cc:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80052ce:	681b      	ldr	r3, [r3, #0]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	58024400 	.word	0x58024400
 80052dc:	0800d684 	.word	0x0800d684
 80052e0:	24000004 	.word	0x24000004
 80052e4:	24000000 	.word	0x24000000

080052e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052ec:	f7ff ffcc 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	091b      	lsrs	r3, r3, #4
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4904      	ldr	r1, [pc, #16]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052fe:	5ccb      	ldrb	r3, [r1, r3]
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005308:	4618      	mov	r0, r3
 800530a:	bd80      	pop	{r7, pc}
 800530c:	58024400 	.word	0x58024400
 8005310:	0800d684 	.word	0x0800d684

08005314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005318:	f7ff ffb6 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4904      	ldr	r1, [pc, #16]	; (800533c <HAL_RCC_GetPCLK2Freq+0x28>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005334:	4618      	mov	r0, r3
 8005336:	bd80      	pop	{r7, pc}
 8005338:	58024400 	.word	0x58024400
 800533c:	0800d684 	.word	0x0800d684

08005340 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005344:	b0ca      	sub	sp, #296	; 0x128
 8005346:	af00      	add	r7, sp, #0
 8005348:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800534c:	2300      	movs	r3, #0
 800534e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005352:	2300      	movs	r3, #0
 8005354:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005364:	2500      	movs	r5, #0
 8005366:	ea54 0305 	orrs.w	r3, r4, r5
 800536a:	d049      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800536c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005372:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005376:	d02f      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005378:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800537c:	d828      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800537e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005382:	d01a      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005388:	d822      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800538e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005392:	d007      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005394:	e01c      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005396:	4bb8      	ldr	r3, [pc, #736]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	4ab7      	ldr	r2, [pc, #732]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800539c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053a2:	e01a      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a8:	3308      	adds	r3, #8
 80053aa:	2102      	movs	r1, #2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 fc8f 	bl	8006cd0 <RCCEx_PLL2_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053b8:	e00f      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053be:	3328      	adds	r3, #40	; 0x28
 80053c0:	2102      	movs	r1, #2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f001 fd36 	bl	8006e34 <RCCEx_PLL3_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053ce:	e004      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053d6:	e000      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80053d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053e2:	4ba5      	ldr	r3, [pc, #660]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80053ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f0:	4aa1      	ldr	r2, [pc, #644]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053f2:	430b      	orrs	r3, r1
 80053f4:	6513      	str	r3, [r2, #80]	; 0x50
 80053f6:	e003      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800540c:	f04f 0900 	mov.w	r9, #0
 8005410:	ea58 0309 	orrs.w	r3, r8, r9
 8005414:	d047      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541c:	2b04      	cmp	r3, #4
 800541e:	d82a      	bhi.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005420:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	0800543d 	.word	0x0800543d
 800542c:	0800544b 	.word	0x0800544b
 8005430:	08005461 	.word	0x08005461
 8005434:	0800547f 	.word	0x0800547f
 8005438:	0800547f 	.word	0x0800547f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800543c:	4b8e      	ldr	r3, [pc, #568]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	4a8d      	ldr	r2, [pc, #564]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005446:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005448:	e01a      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544e:	3308      	adds	r3, #8
 8005450:	2100      	movs	r1, #0
 8005452:	4618      	mov	r0, r3
 8005454:	f001 fc3c 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800545e:	e00f      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005464:	3328      	adds	r3, #40	; 0x28
 8005466:	2100      	movs	r1, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f001 fce3 	bl	8006e34 <RCCEx_PLL3_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005474:	e004      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800547c:	e000      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800547e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005480:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005488:	4b7b      	ldr	r3, [pc, #492]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800548a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548c:	f023 0107 	bic.w	r1, r3, #7
 8005490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005496:	4a78      	ldr	r2, [pc, #480]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005498:	430b      	orrs	r3, r1
 800549a:	6513      	str	r3, [r2, #80]	; 0x50
 800549c:	e003      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80054b2:	f04f 0b00 	mov.w	fp, #0
 80054b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80054ba:	d04c      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c6:	d030      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80054c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054cc:	d829      	bhi.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054ce:	2bc0      	cmp	r3, #192	; 0xc0
 80054d0:	d02d      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80054d2:	2bc0      	cmp	r3, #192	; 0xc0
 80054d4:	d825      	bhi.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054d6:	2b80      	cmp	r3, #128	; 0x80
 80054d8:	d018      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80054da:	2b80      	cmp	r3, #128	; 0x80
 80054dc:	d821      	bhi.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80054e2:	2b40      	cmp	r3, #64	; 0x40
 80054e4:	d007      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80054e6:	e01c      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e8:	4b63      	ldr	r3, [pc, #396]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	4a62      	ldr	r2, [pc, #392]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054f4:	e01c      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054fa:	3308      	adds	r3, #8
 80054fc:	2100      	movs	r1, #0
 80054fe:	4618      	mov	r0, r3
 8005500:	f001 fbe6 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800550a:	e011      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800550c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005510:	3328      	adds	r3, #40	; 0x28
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f001 fc8d 	bl	8006e34 <RCCEx_PLL3_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005520:	e006      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005528:	e002      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800552e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005538:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800553a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005546:	4a4c      	ldr	r2, [pc, #304]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005548:	430b      	orrs	r3, r1
 800554a:	6513      	str	r3, [r2, #80]	; 0x50
 800554c:	e003      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005552:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005562:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005566:	2300      	movs	r3, #0
 8005568:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800556c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005570:	460b      	mov	r3, r1
 8005572:	4313      	orrs	r3, r2
 8005574:	d053      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800557a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800557e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005582:	d035      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005584:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005588:	d82e      	bhi.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800558a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800558e:	d031      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005590:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005594:	d828      	bhi.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800559a:	d01a      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800559c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055a0:	d822      	bhi.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80055a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055aa:	d007      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80055ac:	e01c      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ae:	4b32      	ldr	r3, [pc, #200]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	4a31      	ldr	r2, [pc, #196]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055ba:	e01c      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c0:	3308      	adds	r3, #8
 80055c2:	2100      	movs	r1, #0
 80055c4:	4618      	mov	r0, r3
 80055c6:	f001 fb83 	bl	8006cd0 <RCCEx_PLL2_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80055d0:	e011      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d6:	3328      	adds	r3, #40	; 0x28
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 fc2a 	bl	8006e34 <RCCEx_PLL3_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055e6:	e006      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055ee:	e002      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055f0:	bf00      	nop
 80055f2:	e000      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80055fe:	4b1e      	ldr	r3, [pc, #120]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005602:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800560e:	4a1a      	ldr	r2, [pc, #104]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005610:	430b      	orrs	r3, r1
 8005612:	6593      	str	r3, [r2, #88]	; 0x58
 8005614:	e003      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800561a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800562a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800562e:	2300      	movs	r3, #0
 8005630:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005634:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005638:	460b      	mov	r3, r1
 800563a:	4313      	orrs	r3, r2
 800563c:	d056      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800563e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005642:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005646:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800564a:	d038      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800564c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005650:	d831      	bhi.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005652:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005656:	d034      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005658:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800565c:	d82b      	bhi.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800565e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005662:	d01d      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005664:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005668:	d825      	bhi.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d006      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800566e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005674:	e01f      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005676:	bf00      	nop
 8005678:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800567c:	4ba2      	ldr	r3, [pc, #648]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	4aa1      	ldr	r2, [pc, #644]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005686:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005688:	e01c      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800568a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568e:	3308      	adds	r3, #8
 8005690:	2100      	movs	r1, #0
 8005692:	4618      	mov	r0, r3
 8005694:	f001 fb1c 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800569e:	e011      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a4:	3328      	adds	r3, #40	; 0x28
 80056a6:	2100      	movs	r1, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 fbc3 	bl	8006e34 <RCCEx_PLL3_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056b4:	e006      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056bc:	e002      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80056be:	bf00      	nop
 80056c0:	e000      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80056c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10b      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80056cc:	4b8e      	ldr	r3, [pc, #568]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056dc:	4a8a      	ldr	r2, [pc, #552]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056de:	430b      	orrs	r3, r1
 80056e0:	6593      	str	r3, [r2, #88]	; 0x58
 80056e2:	e003      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80056f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056fc:	2300      	movs	r3, #0
 80056fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005702:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005706:	460b      	mov	r3, r1
 8005708:	4313      	orrs	r3, r2
 800570a:	d03a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800570c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005712:	2b30      	cmp	r3, #48	; 0x30
 8005714:	d01f      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005716:	2b30      	cmp	r3, #48	; 0x30
 8005718:	d819      	bhi.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800571a:	2b20      	cmp	r3, #32
 800571c:	d00c      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800571e:	2b20      	cmp	r3, #32
 8005720:	d815      	bhi.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d019      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005726:	2b10      	cmp	r3, #16
 8005728:	d111      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800572a:	4b77      	ldr	r3, [pc, #476]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	4a76      	ldr	r2, [pc, #472]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005734:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005736:	e011      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573c:	3308      	adds	r3, #8
 800573e:	2102      	movs	r1, #2
 8005740:	4618      	mov	r0, r3
 8005742:	f001 fac5 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005746:	4603      	mov	r3, r0
 8005748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800574c:	e006      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005754:	e002      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800575a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005764:	4b68      	ldr	r3, [pc, #416]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005768:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005772:	4a65      	ldr	r2, [pc, #404]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005774:	430b      	orrs	r3, r1
 8005776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005778:	e003      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800577e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800578e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005792:	2300      	movs	r3, #0
 8005794:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005798:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800579c:	460b      	mov	r3, r1
 800579e:	4313      	orrs	r3, r2
 80057a0:	d051      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80057a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ac:	d035      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80057ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057b2:	d82e      	bhi.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057b8:	d031      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80057ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057be:	d828      	bhi.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c4:	d01a      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80057c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ca:	d822      	bhi.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80057d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d4:	d007      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80057d6:	e01c      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d8:	4b4b      	ldr	r3, [pc, #300]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	4a4a      	ldr	r2, [pc, #296]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057e4:	e01c      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ea:	3308      	adds	r3, #8
 80057ec:	2100      	movs	r1, #0
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 fa6e 	bl	8006cd0 <RCCEx_PLL2_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057fa:	e011      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005800:	3328      	adds	r3, #40	; 0x28
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f001 fb15 	bl	8006e34 <RCCEx_PLL3_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800581e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005828:	4b37      	ldr	r3, [pc, #220]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800582a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005836:	4a34      	ldr	r2, [pc, #208]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005838:	430b      	orrs	r3, r1
 800583a:	6513      	str	r3, [r2, #80]	; 0x50
 800583c:	e003      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005842:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005852:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005856:	2300      	movs	r3, #0
 8005858:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800585c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005860:	460b      	mov	r3, r1
 8005862:	4313      	orrs	r3, r2
 8005864:	d056      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800586c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005870:	d033      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005872:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005876:	d82c      	bhi.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005878:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800587c:	d02f      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800587e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005882:	d826      	bhi.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005884:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005888:	d02b      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800588a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800588e:	d820      	bhi.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005894:	d012      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800589a:	d81a      	bhi.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d022      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80058a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a4:	d115      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058aa:	3308      	adds	r3, #8
 80058ac:	2101      	movs	r1, #1
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 fa0e 	bl	8006cd0 <RCCEx_PLL2_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058ba:	e015      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c0:	3328      	adds	r3, #40	; 0x28
 80058c2:	2101      	movs	r1, #1
 80058c4:	4618      	mov	r0, r3
 80058c6:	f001 fab5 	bl	8006e34 <RCCEx_PLL3_Config>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058d0:	e00a      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058d8:	e006      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058da:	bf00      	nop
 80058dc:	e004      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058de:	bf00      	nop
 80058e0:	e002      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058e2:	bf00      	nop
 80058e4:	e000      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10d      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058f0:	4b05      	ldr	r3, [pc, #20]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80058f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058fe:	4a02      	ldr	r2, [pc, #8]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005900:	430b      	orrs	r3, r1
 8005902:	6513      	str	r3, [r2, #80]	; 0x50
 8005904:	e006      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005906:	bf00      	nop
 8005908:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005910:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005924:	2300      	movs	r3, #0
 8005926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800592a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800592e:	460b      	mov	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	d055      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005938:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800593c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005940:	d033      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005942:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005946:	d82c      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594c:	d02f      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005952:	d826      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005954:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005958:	d02b      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800595a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800595e:	d820      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005964:	d012      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800596a:	d81a      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d022      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005974:	d115      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597a:	3308      	adds	r3, #8
 800597c:	2101      	movs	r1, #1
 800597e:	4618      	mov	r0, r3
 8005980:	f001 f9a6 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800598a:	e015      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005990:	3328      	adds	r3, #40	; 0x28
 8005992:	2101      	movs	r1, #1
 8005994:	4618      	mov	r0, r3
 8005996:	f001 fa4d 	bl	8006e34 <RCCEx_PLL3_Config>
 800599a:	4603      	mov	r3, r0
 800599c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059a0:	e00a      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059a8:	e006      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059aa:	bf00      	nop
 80059ac:	e004      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059ae:	bf00      	nop
 80059b0:	e002      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059b2:	bf00      	nop
 80059b4:	e000      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80059c0:	4ba3      	ldr	r3, [pc, #652]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059d0:	4a9f      	ldr	r2, [pc, #636]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059d2:	430b      	orrs	r3, r1
 80059d4:	6593      	str	r3, [r2, #88]	; 0x58
 80059d6:	e003      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80059ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059f0:	2300      	movs	r3, #0
 80059f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059fa:	460b      	mov	r3, r1
 80059fc:	4313      	orrs	r3, r2
 80059fe:	d037      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a0a:	d00e      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a10:	d816      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d018      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a1a:	d111      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a1c:	4b8c      	ldr	r3, [pc, #560]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	4a8b      	ldr	r2, [pc, #556]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a28:	e00f      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2e:	3308      	adds	r3, #8
 8005a30:	2101      	movs	r1, #1
 8005a32:	4618      	mov	r0, r3
 8005a34:	f001 f94c 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a3e:	e004      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a46:	e000      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a52:	4b7f      	ldr	r3, [pc, #508]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a56:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a60:	4a7b      	ldr	r2, [pc, #492]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a62:	430b      	orrs	r3, r1
 8005a64:	6513      	str	r3, [r2, #80]	; 0x50
 8005a66:	e003      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a80:	2300      	movs	r3, #0
 8005a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	d039      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d81c      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005a9a:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005add 	.word	0x08005add
 8005aa4:	08005ab1 	.word	0x08005ab1
 8005aa8:	08005abf 	.word	0x08005abf
 8005aac:	08005add 	.word	0x08005add
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab0:	4b67      	ldr	r3, [pc, #412]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	4a66      	ldr	r2, [pc, #408]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005abc:	e00f      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 f902 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ad2:	e004      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ada:	e000      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ae6:	4b5a      	ldr	r3, [pc, #360]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aea:	f023 0103 	bic.w	r1, r3, #3
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af4:	4a56      	ldr	r2, [pc, #344]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005af6:	430b      	orrs	r3, r1
 8005af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005afa:	e003      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005b10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b14:	2300      	movs	r3, #0
 8005b16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f000 809f 	beq.w	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b26:	4b4b      	ldr	r3, [pc, #300]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a4a      	ldr	r2, [pc, #296]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b32:	f7fc f8d9 	bl	8001ce8 <HAL_GetTick>
 8005b36:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b3a:	e00b      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b3c:	f7fc f8d4 	bl	8001ce8 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b64      	cmp	r3, #100	; 0x64
 8005b4a:	d903      	bls.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b52:	e005      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b54:	4b3f      	ldr	r3, [pc, #252]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0ed      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005b60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d179      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b68:	4b39      	ldr	r3, [pc, #228]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b74:	4053      	eors	r3, r2
 8005b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d015      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b7e:	4b34      	ldr	r3, [pc, #208]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b8a:	4b31      	ldr	r3, [pc, #196]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	4a30      	ldr	r2, [pc, #192]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b94:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b96:	4b2e      	ldr	r3, [pc, #184]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9a:	4a2d      	ldr	r2, [pc, #180]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005ba2:	4a2b      	ldr	r2, [pc, #172]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ba8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb6:	d118      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb8:	f7fc f896 	bl	8001ce8 <HAL_GetTick>
 8005bbc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bc0:	e00d      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc2:	f7fc f891 	bl	8001ce8 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bcc:	1ad2      	subs	r2, r2, r3
 8005bce:	f241 3388 	movw	r3, #5000	; 0x1388
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d903      	bls.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005bdc:	e005      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bde:	4b1c      	ldr	r3, [pc, #112]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0eb      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005bea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d129      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c02:	d10e      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005c04:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c14:	091a      	lsrs	r2, r3, #4
 8005c16:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6113      	str	r3, [r2, #16]
 8005c20:	e005      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005c22:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c2c:	6113      	str	r3, [r2, #16]
 8005c2e:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c30:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c3e:	4a04      	ldr	r2, [pc, #16]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6713      	str	r3, [r2, #112]	; 0x70
 8005c44:	e00e      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005c4e:	e009      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005c50:	58024400 	.word	0x58024400
 8005c54:	58024800 	.word	0x58024800
 8005c58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f002 0301 	and.w	r3, r2, #1
 8005c70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c74:	2300      	movs	r3, #0
 8005c76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f000 8089 	beq.w	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c8c:	2b28      	cmp	r3, #40	; 0x28
 8005c8e:	d86b      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005c90:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005d71 	.word	0x08005d71
 8005c9c:	08005d69 	.word	0x08005d69
 8005ca0:	08005d69 	.word	0x08005d69
 8005ca4:	08005d69 	.word	0x08005d69
 8005ca8:	08005d69 	.word	0x08005d69
 8005cac:	08005d69 	.word	0x08005d69
 8005cb0:	08005d69 	.word	0x08005d69
 8005cb4:	08005d69 	.word	0x08005d69
 8005cb8:	08005d3d 	.word	0x08005d3d
 8005cbc:	08005d69 	.word	0x08005d69
 8005cc0:	08005d69 	.word	0x08005d69
 8005cc4:	08005d69 	.word	0x08005d69
 8005cc8:	08005d69 	.word	0x08005d69
 8005ccc:	08005d69 	.word	0x08005d69
 8005cd0:	08005d69 	.word	0x08005d69
 8005cd4:	08005d69 	.word	0x08005d69
 8005cd8:	08005d53 	.word	0x08005d53
 8005cdc:	08005d69 	.word	0x08005d69
 8005ce0:	08005d69 	.word	0x08005d69
 8005ce4:	08005d69 	.word	0x08005d69
 8005ce8:	08005d69 	.word	0x08005d69
 8005cec:	08005d69 	.word	0x08005d69
 8005cf0:	08005d69 	.word	0x08005d69
 8005cf4:	08005d69 	.word	0x08005d69
 8005cf8:	08005d71 	.word	0x08005d71
 8005cfc:	08005d69 	.word	0x08005d69
 8005d00:	08005d69 	.word	0x08005d69
 8005d04:	08005d69 	.word	0x08005d69
 8005d08:	08005d69 	.word	0x08005d69
 8005d0c:	08005d69 	.word	0x08005d69
 8005d10:	08005d69 	.word	0x08005d69
 8005d14:	08005d69 	.word	0x08005d69
 8005d18:	08005d71 	.word	0x08005d71
 8005d1c:	08005d69 	.word	0x08005d69
 8005d20:	08005d69 	.word	0x08005d69
 8005d24:	08005d69 	.word	0x08005d69
 8005d28:	08005d69 	.word	0x08005d69
 8005d2c:	08005d69 	.word	0x08005d69
 8005d30:	08005d69 	.word	0x08005d69
 8005d34:	08005d69 	.word	0x08005d69
 8005d38:	08005d71 	.word	0x08005d71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d40:	3308      	adds	r3, #8
 8005d42:	2101      	movs	r1, #1
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 ffc3 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d50:	e00f      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d56:	3328      	adds	r3, #40	; 0x28
 8005d58:	2101      	movs	r1, #1
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 f86a 	bl	8006e34 <RCCEx_PLL3_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d66:	e004      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d6e:	e000      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d7a:	4bbf      	ldr	r3, [pc, #764]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d88:	4abb      	ldr	r2, [pc, #748]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	6553      	str	r3, [r2, #84]	; 0x54
 8005d8e:	e003      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f002 0302 	and.w	r3, r2, #2
 8005da4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005da8:	2300      	movs	r3, #0
 8005daa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005dae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005db2:	460b      	mov	r3, r1
 8005db4:	4313      	orrs	r3, r2
 8005db6:	d041      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dbe:	2b05      	cmp	r3, #5
 8005dc0:	d824      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005dc2:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005e15 	.word	0x08005e15
 8005dcc:	08005de1 	.word	0x08005de1
 8005dd0:	08005df7 	.word	0x08005df7
 8005dd4:	08005e15 	.word	0x08005e15
 8005dd8:	08005e15 	.word	0x08005e15
 8005ddc:	08005e15 	.word	0x08005e15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de4:	3308      	adds	r3, #8
 8005de6:	2101      	movs	r1, #1
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 ff71 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005df4:	e00f      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dfa:	3328      	adds	r3, #40	; 0x28
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 f818 	bl	8006e34 <RCCEx_PLL3_Config>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e0a:	e004      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e12:	e000      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e1e:	4b96      	ldr	r3, [pc, #600]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	f023 0107 	bic.w	r1, r3, #7
 8005e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e2c:	4a92      	ldr	r2, [pc, #584]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	6553      	str	r3, [r2, #84]	; 0x54
 8005e32:	e003      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	f002 0304 	and.w	r3, r2, #4
 8005e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	d044      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e64:	2b05      	cmp	r3, #5
 8005e66:	d825      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005e68:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6e:	bf00      	nop
 8005e70:	08005ebd 	.word	0x08005ebd
 8005e74:	08005e89 	.word	0x08005e89
 8005e78:	08005e9f 	.word	0x08005e9f
 8005e7c:	08005ebd 	.word	0x08005ebd
 8005e80:	08005ebd 	.word	0x08005ebd
 8005e84:	08005ebd 	.word	0x08005ebd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	2101      	movs	r1, #1
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 ff1d 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e9c:	e00f      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea2:	3328      	adds	r3, #40	; 0x28
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 ffc4 	bl	8006e34 <RCCEx_PLL3_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005eb2:	e004      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005eba:	e000      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10b      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ec6:	4b6c      	ldr	r3, [pc, #432]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eca:	f023 0107 	bic.w	r1, r3, #7
 8005ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ed6:	4a68      	ldr	r2, [pc, #416]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6593      	str	r3, [r2, #88]	; 0x58
 8005edc:	e003      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ee2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f002 0320 	and.w	r3, r2, #32
 8005ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005efc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f00:	460b      	mov	r3, r1
 8005f02:	4313      	orrs	r3, r2
 8005f04:	d055      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f12:	d033      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f18:	d82c      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1e:	d02f      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f24:	d826      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f2a:	d02b      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005f2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f30:	d820      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f36:	d012      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f3c:	d81a      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d022      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f46:	d115      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	2100      	movs	r1, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 febd 	bl	8006cd0 <RCCEx_PLL2_Config>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f5c:	e015      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f62:	3328      	adds	r3, #40	; 0x28
 8005f64:	2102      	movs	r1, #2
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 ff64 	bl	8006e34 <RCCEx_PLL3_Config>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f72:	e00a      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f7a:	e006      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f7c:	bf00      	nop
 8005f7e:	e004      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f80:	bf00      	nop
 8005f82:	e002      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f84:	bf00      	nop
 8005f86:	e000      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f92:	4b39      	ldr	r3, [pc, #228]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f96:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa2:	4a35      	ldr	r2, [pc, #212]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6553      	str	r3, [r2, #84]	; 0x54
 8005fa8:	e003      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	d058      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005fde:	d033      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005fe0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005fe4:	d82c      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fea:	d02f      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff0:	d826      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ff2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff6:	d02b      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ffc:	d820      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006002:	d012      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006008:	d81a      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d022      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800600e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006012:	d115      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006018:	3308      	adds	r3, #8
 800601a:	2100      	movs	r1, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fe57 	bl	8006cd0 <RCCEx_PLL2_Config>
 8006022:	4603      	mov	r3, r0
 8006024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006028:	e015      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602e:	3328      	adds	r3, #40	; 0x28
 8006030:	2102      	movs	r1, #2
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fefe 	bl	8006e34 <RCCEx_PLL3_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800603e:	e00a      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006046:	e006      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006048:	bf00      	nop
 800604a:	e004      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800604c:	bf00      	nop
 800604e:	e002      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006050:	bf00      	nop
 8006052:	e000      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10e      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006062:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800606a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800606e:	4a02      	ldr	r2, [pc, #8]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006070:	430b      	orrs	r3, r1
 8006072:	6593      	str	r3, [r2, #88]	; 0x58
 8006074:	e006      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006076:	bf00      	nop
 8006078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006080:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006094:	2300      	movs	r3, #0
 8006096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800609a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800609e:	460b      	mov	r3, r1
 80060a0:	4313      	orrs	r3, r2
 80060a2:	d055      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060b0:	d033      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80060b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060b6:	d82c      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060bc:	d02f      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80060be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c2:	d826      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060c8:	d02b      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80060ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060ce:	d820      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060d4:	d012      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80060d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060da:	d81a      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d022      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80060e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e4:	d115      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ea:	3308      	adds	r3, #8
 80060ec:	2100      	movs	r1, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fdee 	bl	8006cd0 <RCCEx_PLL2_Config>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060fa:	e015      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006100:	3328      	adds	r3, #40	; 0x28
 8006102:	2102      	movs	r1, #2
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fe95 	bl	8006e34 <RCCEx_PLL3_Config>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006110:	e00a      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006118:	e006      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800611a:	bf00      	nop
 800611c:	e004      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800611e:	bf00      	nop
 8006120:	e002      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006122:	bf00      	nop
 8006124:	e000      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10b      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006130:	4ba1      	ldr	r3, [pc, #644]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006134:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800613c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006140:	4a9d      	ldr	r2, [pc, #628]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006142:	430b      	orrs	r3, r1
 8006144:	6593      	str	r3, [r2, #88]	; 0x58
 8006146:	e003      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800614c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f002 0308 	and.w	r3, r2, #8
 800615c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006160:	2300      	movs	r3, #0
 8006162:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006166:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800616a:	460b      	mov	r3, r1
 800616c:	4313      	orrs	r3, r2
 800616e:	d01e      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617c:	d10c      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800617e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006182:	3328      	adds	r3, #40	; 0x28
 8006184:	2102      	movs	r1, #2
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fe54 	bl	8006e34 <RCCEx_PLL3_Config>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006198:	4b87      	ldr	r3, [pc, #540]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800619a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a8:	4a83      	ldr	r2, [pc, #524]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061aa:	430b      	orrs	r3, r1
 80061ac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	f002 0310 	and.w	r3, r2, #16
 80061ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061be:	2300      	movs	r3, #0
 80061c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80061c8:	460b      	mov	r3, r1
 80061ca:	4313      	orrs	r3, r2
 80061cc:	d01e      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80061ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061da:	d10c      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e0:	3328      	adds	r3, #40	; 0x28
 80061e2:	2102      	movs	r1, #2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fe25 	bl	8006e34 <RCCEx_PLL3_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061f6:	4b70      	ldr	r3, [pc, #448]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006202:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006206:	4a6c      	ldr	r2, [pc, #432]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006208:	430b      	orrs	r3, r1
 800620a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800620c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800621c:	2300      	movs	r3, #0
 800621e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006222:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006226:	460b      	mov	r3, r1
 8006228:	4313      	orrs	r3, r2
 800622a:	d03e      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006230:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006238:	d022      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800623a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800623e:	d81b      	bhi.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d003      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006248:	d00b      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800624a:	e015      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006250:	3308      	adds	r3, #8
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fd3b 	bl	8006cd0 <RCCEx_PLL2_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006260:	e00f      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006266:	3328      	adds	r3, #40	; 0x28
 8006268:	2102      	movs	r1, #2
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fde2 	bl	8006e34 <RCCEx_PLL3_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006276:	e004      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800627e:	e000      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800628a:	4b4b      	ldr	r3, [pc, #300]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800628c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006296:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800629a:	4a47      	ldr	r2, [pc, #284]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800629c:	430b      	orrs	r3, r1
 800629e:	6593      	str	r3, [r2, #88]	; 0x58
 80062a0:	e003      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80062b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80062b8:	2300      	movs	r3, #0
 80062ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80062c0:	460b      	mov	r3, r1
 80062c2:	4313      	orrs	r3, r2
 80062c4:	d03b      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80062c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062d2:	d01f      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80062d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062d8:	d818      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80062da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062de:	d003      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80062e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062e4:	d007      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80062e6:	e011      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e8:	4b33      	ldr	r3, [pc, #204]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	4a32      	ldr	r2, [pc, #200]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062f4:	e00f      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062fa:	3328      	adds	r3, #40	; 0x28
 80062fc:	2101      	movs	r1, #1
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fd98 	bl	8006e34 <RCCEx_PLL3_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800630a:	e004      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006312:	e000      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10b      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800631e:	4b26      	ldr	r3, [pc, #152]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006322:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	4a22      	ldr	r2, [pc, #136]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006330:	430b      	orrs	r3, r1
 8006332:	6553      	str	r3, [r2, #84]	; 0x54
 8006334:	e003      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800633a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800633e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800634a:	673b      	str	r3, [r7, #112]	; 0x70
 800634c:	2300      	movs	r3, #0
 800634e:	677b      	str	r3, [r7, #116]	; 0x74
 8006350:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006354:	460b      	mov	r3, r1
 8006356:	4313      	orrs	r3, r2
 8006358:	d034      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006368:	d007      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800636a:	e011      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800636c:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	4a11      	ldr	r2, [pc, #68]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006376:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006378:	e00e      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637e:	3308      	adds	r3, #8
 8006380:	2102      	movs	r1, #2
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fca4 	bl	8006cd0 <RCCEx_PLL2_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800638e:	e003      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10d      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ae:	4a02      	ldr	r2, [pc, #8]	; (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063b0:	430b      	orrs	r3, r1
 80063b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063b4:	e006      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80063b6:	bf00      	nop
 80063b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80063d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80063d2:	2300      	movs	r3, #0
 80063d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80063da:	460b      	mov	r3, r1
 80063dc:	4313      	orrs	r3, r2
 80063de:	d00c      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e4:	3328      	adds	r3, #40	; 0x28
 80063e6:	2102      	movs	r1, #2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fd23 	bl	8006e34 <RCCEx_PLL3_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006402:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006406:	663b      	str	r3, [r7, #96]	; 0x60
 8006408:	2300      	movs	r3, #0
 800640a:	667b      	str	r3, [r7, #100]	; 0x64
 800640c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006410:	460b      	mov	r3, r1
 8006412:	4313      	orrs	r3, r2
 8006414:	d038      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800641e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006422:	d018      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006428:	d811      	bhi.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800642a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800642e:	d014      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006434:	d80b      	bhi.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d011      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800643a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643e:	d106      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006440:	4bc3      	ldr	r3, [pc, #780]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	4ac2      	ldr	r2, [pc, #776]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800644a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800644c:	e008      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006454:	e004      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006456:	bf00      	nop
 8006458:	e002      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800645a:	bf00      	nop
 800645c:	e000      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800645e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006468:	4bb9      	ldr	r3, [pc, #740]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800646a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006478:	4ab5      	ldr	r2, [pc, #724]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800647a:	430b      	orrs	r3, r1
 800647c:	6553      	str	r3, [r2, #84]	; 0x54
 800647e:	e003      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006480:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006484:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006494:	65bb      	str	r3, [r7, #88]	; 0x58
 8006496:	2300      	movs	r3, #0
 8006498:	65fb      	str	r3, [r7, #92]	; 0x5c
 800649a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800649e:	460b      	mov	r3, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	d009      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064a4:	4baa      	ldr	r3, [pc, #680]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b2:	4aa7      	ldr	r2, [pc, #668]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064b4:	430b      	orrs	r3, r1
 80064b6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80064c4:	653b      	str	r3, [r7, #80]	; 0x50
 80064c6:	2300      	movs	r3, #0
 80064c8:	657b      	str	r3, [r7, #84]	; 0x54
 80064ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80064ce:	460b      	mov	r3, r1
 80064d0:	4313      	orrs	r3, r2
 80064d2:	d00a      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80064d4:	4b9e      	ldr	r3, [pc, #632]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80064dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80064e4:	4a9a      	ldr	r2, [pc, #616]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064e6:	430b      	orrs	r3, r1
 80064e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80064f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f8:	2300      	movs	r3, #0
 80064fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006500:	460b      	mov	r3, r1
 8006502:	4313      	orrs	r3, r2
 8006504:	d009      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006506:	4b92      	ldr	r3, [pc, #584]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006514:	4a8e      	ldr	r2, [pc, #568]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006516:	430b      	orrs	r3, r1
 8006518:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800651a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006526:	643b      	str	r3, [r7, #64]	; 0x40
 8006528:	2300      	movs	r3, #0
 800652a:	647b      	str	r3, [r7, #68]	; 0x44
 800652c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006530:	460b      	mov	r3, r1
 8006532:	4313      	orrs	r3, r2
 8006534:	d00e      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006536:	4b86      	ldr	r3, [pc, #536]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	4a85      	ldr	r2, [pc, #532]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800653c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006540:	6113      	str	r3, [r2, #16]
 8006542:	4b83      	ldr	r3, [pc, #524]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006544:	6919      	ldr	r1, [r3, #16]
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800654e:	4a80      	ldr	r2, [pc, #512]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006550:	430b      	orrs	r3, r1
 8006552:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006560:	63bb      	str	r3, [r7, #56]	; 0x38
 8006562:	2300      	movs	r3, #0
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006566:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800656a:	460b      	mov	r3, r1
 800656c:	4313      	orrs	r3, r2
 800656e:	d009      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006570:	4b77      	ldr	r3, [pc, #476]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006574:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657e:	4a74      	ldr	r2, [pc, #464]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006580:	430b      	orrs	r3, r1
 8006582:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006590:	633b      	str	r3, [r7, #48]	; 0x30
 8006592:	2300      	movs	r3, #0
 8006594:	637b      	str	r3, [r7, #52]	; 0x34
 8006596:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800659a:	460b      	mov	r3, r1
 800659c:	4313      	orrs	r3, r2
 800659e:	d00a      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065a0:	4b6b      	ldr	r3, [pc, #428]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80065a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b0:	4a67      	ldr	r2, [pc, #412]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065b2:	430b      	orrs	r3, r1
 80065b4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	2100      	movs	r1, #0
 80065c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80065cc:	460b      	mov	r3, r1
 80065ce:	4313      	orrs	r3, r2
 80065d0:	d011      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d6:	3308      	adds	r3, #8
 80065d8:	2100      	movs	r1, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fb78 	bl	8006cd0 <RCCEx_PLL2_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80065e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	2100      	movs	r1, #0
 8006600:	6239      	str	r1, [r7, #32]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
 8006608:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800660c:	460b      	mov	r3, r1
 800660e:	4313      	orrs	r3, r2
 8006610:	d011      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006616:	3308      	adds	r3, #8
 8006618:	2101      	movs	r1, #1
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fb58 	bl	8006cd0 <RCCEx_PLL2_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006632:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	2100      	movs	r1, #0
 8006640:	61b9      	str	r1, [r7, #24]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800664c:	460b      	mov	r3, r1
 800664e:	4313      	orrs	r3, r2
 8006650:	d011      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006656:	3308      	adds	r3, #8
 8006658:	2102      	movs	r1, #2
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fb38 	bl	8006cd0 <RCCEx_PLL2_Config>
 8006660:	4603      	mov	r3, r0
 8006662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006672:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	2100      	movs	r1, #0
 8006680:	6139      	str	r1, [r7, #16]
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800668c:	460b      	mov	r3, r1
 800668e:	4313      	orrs	r3, r2
 8006690:	d011      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006696:	3328      	adds	r3, #40	; 0x28
 8006698:	2100      	movs	r1, #0
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fbca 	bl	8006e34 <RCCEx_PLL3_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80066a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	2100      	movs	r1, #0
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80066cc:	460b      	mov	r3, r1
 80066ce:	4313      	orrs	r3, r2
 80066d0:	d011      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d6:	3328      	adds	r3, #40	; 0x28
 80066d8:	2101      	movs	r1, #1
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fbaa 	bl	8006e34 <RCCEx_PLL3_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80066f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	2100      	movs	r1, #0
 8006700:	6039      	str	r1, [r7, #0]
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	607b      	str	r3, [r7, #4]
 8006708:	e9d7 1200 	ldrd	r1, r2, [r7]
 800670c:	460b      	mov	r3, r1
 800670e:	4313      	orrs	r3, r2
 8006710:	d011      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006716:	3328      	adds	r3, #40	; 0x28
 8006718:	2102      	movs	r1, #2
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fb8a 	bl	8006e34 <RCCEx_PLL3_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006732:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006736:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	e000      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
}
 8006744:	4618      	mov	r0, r3
 8006746:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800674a:	46bd      	mov	sp, r7
 800674c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006750:	58024400 	.word	0x58024400

08006754 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006758:	f7fe fd96 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 800675c:	4602      	mov	r2, r0
 800675e:	4b06      	ldr	r3, [pc, #24]	; (8006778 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	091b      	lsrs	r3, r3, #4
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	4904      	ldr	r1, [pc, #16]	; (800677c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800676a:	5ccb      	ldrb	r3, [r1, r3]
 800676c:	f003 031f 	and.w	r3, r3, #31
 8006770:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006774:	4618      	mov	r0, r3
 8006776:	bd80      	pop	{r7, pc}
 8006778:	58024400 	.word	0x58024400
 800677c:	0800d684 	.word	0x0800d684

08006780 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006780:	b480      	push	{r7}
 8006782:	b089      	sub	sp, #36	; 0x24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006788:	4ba1      	ldr	r3, [pc, #644]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006792:	4b9f      	ldr	r3, [pc, #636]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006796:	0b1b      	lsrs	r3, r3, #12
 8006798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800679c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800679e:	4b9c      	ldr	r3, [pc, #624]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	091b      	lsrs	r3, r3, #4
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80067aa:	4b99      	ldr	r3, [pc, #612]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	08db      	lsrs	r3, r3, #3
 80067b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	fb02 f303 	mul.w	r3, r2, r3
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 8111 	beq.w	80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	f000 8083 	beq.w	80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b02      	cmp	r3, #2
 80067da:	f200 80a1 	bhi.w	8006920 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d056      	beq.n	8006898 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067ea:	e099      	b.n	8006920 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ec:	4b88      	ldr	r3, [pc, #544]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d02d      	beq.n	8006854 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067f8:	4b85      	ldr	r3, [pc, #532]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	08db      	lsrs	r3, r3, #3
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	4a84      	ldr	r2, [pc, #528]	; (8006a14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006804:	fa22 f303 	lsr.w	r3, r2, r3
 8006808:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	ee07 3a90 	vmov	s15, r3
 8006810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006822:	4b7b      	ldr	r3, [pc, #492]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006832:	ed97 6a03 	vldr	s12, [r7, #12]
 8006836:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800683a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006852:	e087      	b.n	8006964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006866:	4b6a      	ldr	r3, [pc, #424]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006876:	ed97 6a03 	vldr	s12, [r7, #12]
 800687a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800687e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800688a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006896:	e065      	b.n	8006964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068aa:	4b59      	ldr	r3, [pc, #356]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80068be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068da:	e043      	b.n	8006964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ee:	4b48      	ldr	r3, [pc, #288]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006902:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800691e:	e021      	b.n	8006964 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800692e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006932:	4b37      	ldr	r3, [pc, #220]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006942:	ed97 6a03 	vldr	s12, [r7, #12]
 8006946:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800694a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800694e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800695e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006962:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006964:	4b2a      	ldr	r3, [pc, #168]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	0a5b      	lsrs	r3, r3, #9
 800696a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800696e:	ee07 3a90 	vmov	s15, r3
 8006972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800697a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800697e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800698a:	ee17 2a90 	vmov	r2, s15
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006992:	4b1f      	ldr	r3, [pc, #124]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	0c1b      	lsrs	r3, r3, #16
 8006998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80069b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069b8:	ee17 2a90 	vmov	r2, s15
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80069c0:	4b13      	ldr	r3, [pc, #76]	; (8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	0e1b      	lsrs	r3, r3, #24
 80069c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069da:	edd7 6a07 	vldr	s13, [r7, #28]
 80069de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069e6:	ee17 2a90 	vmov	r2, s15
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069ee:	e008      	b.n	8006a02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	609a      	str	r2, [r3, #8]
}
 8006a02:	bf00      	nop
 8006a04:	3724      	adds	r7, #36	; 0x24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	58024400 	.word	0x58024400
 8006a14:	03d09000 	.word	0x03d09000
 8006a18:	46000000 	.word	0x46000000
 8006a1c:	4c742400 	.word	0x4c742400
 8006a20:	4a742400 	.word	0x4a742400
 8006a24:	4bb71b00 	.word	0x4bb71b00

08006a28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b089      	sub	sp, #36	; 0x24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a30:	4ba1      	ldr	r3, [pc, #644]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a34:	f003 0303 	and.w	r3, r3, #3
 8006a38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006a3a:	4b9f      	ldr	r3, [pc, #636]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3e:	0d1b      	lsrs	r3, r3, #20
 8006a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a46:	4b9c      	ldr	r3, [pc, #624]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4a:	0a1b      	lsrs	r3, r3, #8
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a52:	4b99      	ldr	r3, [pc, #612]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a56:	08db      	lsrs	r3, r3, #3
 8006a58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	fb02 f303 	mul.w	r3, r2, r3
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8111 	beq.w	8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	f000 8083 	beq.w	8006b84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	f200 80a1 	bhi.w	8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d056      	beq.n	8006b40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a92:	e099      	b.n	8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a94:	4b88      	ldr	r3, [pc, #544]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0320 	and.w	r3, r3, #32
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d02d      	beq.n	8006afc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aa0:	4b85      	ldr	r3, [pc, #532]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	08db      	lsrs	r3, r3, #3
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	4a84      	ldr	r2, [pc, #528]	; (8006cbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006aac:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aca:	4b7b      	ldr	r3, [pc, #492]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ade:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006afa:	e087      	b.n	8006c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b0e:	4b6a      	ldr	r3, [pc, #424]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b3e:	e065      	b.n	8006c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b52:	4b59      	ldr	r3, [pc, #356]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b82:	e043      	b.n	8006c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ccc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b96:	4b48      	ldr	r3, [pc, #288]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006baa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bc6:	e021      	b.n	8006c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bda:	4b37      	ldr	r3, [pc, #220]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006c0c:	4b2a      	ldr	r3, [pc, #168]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	0a5b      	lsrs	r3, r3, #9
 8006c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c32:	ee17 2a90 	vmov	r2, s15
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006c3a:	4b1f      	ldr	r3, [pc, #124]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	0c1b      	lsrs	r3, r3, #16
 8006c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c60:	ee17 2a90 	vmov	r2, s15
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c68:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	0e1b      	lsrs	r3, r3, #24
 8006c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c82:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c8e:	ee17 2a90 	vmov	r2, s15
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c96:	e008      	b.n	8006caa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	609a      	str	r2, [r3, #8]
}
 8006caa:	bf00      	nop
 8006cac:	3724      	adds	r7, #36	; 0x24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	58024400 	.word	0x58024400
 8006cbc:	03d09000 	.word	0x03d09000
 8006cc0:	46000000 	.word	0x46000000
 8006cc4:	4c742400 	.word	0x4c742400
 8006cc8:	4a742400 	.word	0x4a742400
 8006ccc:	4bb71b00 	.word	0x4bb71b00

08006cd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cde:	4b53      	ldr	r3, [pc, #332]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d101      	bne.n	8006cee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e099      	b.n	8006e22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006cee:	4b4f      	ldr	r3, [pc, #316]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a4e      	ldr	r2, [pc, #312]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006cf4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cfa:	f7fa fff5 	bl	8001ce8 <HAL_GetTick>
 8006cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d00:	e008      	b.n	8006d14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d02:	f7fa fff1 	bl	8001ce8 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d901      	bls.n	8006d14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e086      	b.n	8006e22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d14:	4b45      	ldr	r3, [pc, #276]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1f0      	bne.n	8006d02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d20:	4b42      	ldr	r3, [pc, #264]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	031b      	lsls	r3, r3, #12
 8006d2e:	493f      	ldr	r1, [pc, #252]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	628b      	str	r3, [r1, #40]	; 0x28
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	025b      	lsls	r3, r3, #9
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	041b      	lsls	r3, r3, #16
 8006d52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	061b      	lsls	r3, r3, #24
 8006d60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d64:	4931      	ldr	r1, [pc, #196]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d6a:	4b30      	ldr	r3, [pc, #192]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	492d      	ldr	r1, [pc, #180]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d7c:	4b2b      	ldr	r3, [pc, #172]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	f023 0220 	bic.w	r2, r3, #32
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	4928      	ldr	r1, [pc, #160]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d8e:	4b27      	ldr	r3, [pc, #156]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d92:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d94:	f023 0310 	bic.w	r3, r3, #16
 8006d98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d9a:	4b24      	ldr	r3, [pc, #144]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006d9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d9e:	4b24      	ldr	r3, [pc, #144]	; (8006e30 <RCCEx_PLL2_Config+0x160>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	69d2      	ldr	r2, [r2, #28]
 8006da6:	00d2      	lsls	r2, r2, #3
 8006da8:	4920      	ldr	r1, [pc, #128]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006dae:	4b1f      	ldr	r3, [pc, #124]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	4a1e      	ldr	r2, [pc, #120]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006db4:	f043 0310 	orr.w	r3, r3, #16
 8006db8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d106      	bne.n	8006dce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	4a19      	ldr	r2, [pc, #100]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006dc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006dcc:	e00f      	b.n	8006dee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d106      	bne.n	8006de2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006dd4:	4b15      	ldr	r3, [pc, #84]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006de0:	e005      	b.n	8006dee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006de2:	4b12      	ldr	r3, [pc, #72]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	4a11      	ldr	r2, [pc, #68]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006de8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006dec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006dee:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a0e      	ldr	r2, [pc, #56]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006df4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dfa:	f7fa ff75 	bl	8001ce8 <HAL_GetTick>
 8006dfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e00:	e008      	b.n	8006e14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e02:	f7fa ff71 	bl	8001ce8 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d901      	bls.n	8006e14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e006      	b.n	8006e22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <RCCEx_PLL2_Config+0x15c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0f0      	beq.n	8006e02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	ffff0007 	.word	0xffff0007

08006e34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e42:	4b53      	ldr	r3, [pc, #332]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d101      	bne.n	8006e52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e099      	b.n	8006f86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e52:	4b4f      	ldr	r3, [pc, #316]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a4e      	ldr	r2, [pc, #312]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e5e:	f7fa ff43 	bl	8001ce8 <HAL_GetTick>
 8006e62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e64:	e008      	b.n	8006e78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e66:	f7fa ff3f 	bl	8001ce8 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e086      	b.n	8006f86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e78:	4b45      	ldr	r3, [pc, #276]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1f0      	bne.n	8006e66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e84:	4b42      	ldr	r3, [pc, #264]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	051b      	lsls	r3, r3, #20
 8006e92:	493f      	ldr	r1, [pc, #252]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	628b      	str	r3, [r1, #40]	; 0x28
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	025b      	lsls	r3, r3, #9
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	041b      	lsls	r3, r3, #16
 8006eb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	061b      	lsls	r3, r3, #24
 8006ec4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ec8:	4931      	ldr	r1, [pc, #196]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ece:	4b30      	ldr	r3, [pc, #192]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	492d      	ldr	r1, [pc, #180]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ee0:	4b2b      	ldr	r3, [pc, #172]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	4928      	ldr	r1, [pc, #160]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ef2:	4b27      	ldr	r3, [pc, #156]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	4a26      	ldr	r2, [pc, #152]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006efc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006efe:	4b24      	ldr	r3, [pc, #144]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f02:	4b24      	ldr	r3, [pc, #144]	; (8006f94 <RCCEx_PLL3_Config+0x160>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	69d2      	ldr	r2, [r2, #28]
 8006f0a:	00d2      	lsls	r2, r2, #3
 8006f0c:	4920      	ldr	r1, [pc, #128]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f12:	4b1f      	ldr	r3, [pc, #124]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	4a1e      	ldr	r2, [pc, #120]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f24:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	4a19      	ldr	r2, [pc, #100]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f30:	e00f      	b.n	8006f52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d106      	bne.n	8006f46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f38:	4b15      	ldr	r3, [pc, #84]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	4a14      	ldr	r2, [pc, #80]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f44:	e005      	b.n	8006f52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f46:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	4a11      	ldr	r2, [pc, #68]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f52:	4b0f      	ldr	r3, [pc, #60]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a0e      	ldr	r2, [pc, #56]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f5e:	f7fa fec3 	bl	8001ce8 <HAL_GetTick>
 8006f62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f64:	e008      	b.n	8006f78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f66:	f7fa febf 	bl	8001ce8 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d901      	bls.n	8006f78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e006      	b.n	8006f86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f78:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <RCCEx_PLL3_Config+0x15c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0f0      	beq.n	8006f66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	58024400 	.word	0x58024400
 8006f94:	ffff0007 	.word	0xffff0007

08006f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e042      	b.n	8007030 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7f9 fef3 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2224      	movs	r2, #36	; 0x24
 8006fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0201 	bic.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f8ba 	bl	8007154 <UART_SetConfig>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d101      	bne.n	8006fea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e022      	b.n	8007030 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fe16 	bl	8007c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0201 	orr.w	r2, r2, #1
 8007026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fe9d 	bl	8007d68 <UART_CheckIdleState>
 800702e:	4603      	mov	r3, r0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08a      	sub	sp, #40	; 0x28
 800703c:	af02      	add	r7, sp, #8
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	4613      	mov	r3, r2
 8007046:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704e:	2b20      	cmp	r3, #32
 8007050:	d17b      	bne.n	800714a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <HAL_UART_Transmit+0x26>
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e074      	b.n	800714c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2221      	movs	r2, #33	; 0x21
 800706e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007072:	f7fa fe39 	bl	8001ce8 <HAL_GetTick>
 8007076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	88fa      	ldrh	r2, [r7, #6]
 8007084:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007090:	d108      	bne.n	80070a4 <HAL_UART_Transmit+0x6c>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d104      	bne.n	80070a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	e003      	b.n	80070ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070ac:	e030      	b.n	8007110 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2200      	movs	r2, #0
 80070b6:	2180      	movs	r1, #128	; 0x80
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 feff 	bl	8007ebc <UART_WaitOnFlagUntilTimeout>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e03d      	b.n	800714c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	3302      	adds	r3, #2
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	e007      	b.n	80070fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	781a      	ldrb	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	3301      	adds	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1c8      	bne.n	80070ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2200      	movs	r2, #0
 8007124:	2140      	movs	r1, #64	; 0x40
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 fec8 	bl	8007ebc <UART_WaitOnFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2220      	movs	r2, #32
 8007136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e006      	b.n	800714c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	e000      	b.n	800714c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800714a:	2302      	movs	r3, #2
  }
}
 800714c:	4618      	mov	r0, r3
 800714e:	3720      	adds	r7, #32
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007158:	b092      	sub	sp, #72	; 0x48
 800715a:	af00      	add	r7, sp, #0
 800715c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	431a      	orrs	r2, r3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	431a      	orrs	r2, r3
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	4313      	orrs	r3, r2
 800717a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4bbe      	ldr	r3, [pc, #760]	; (800747c <UART_SetConfig+0x328>)
 8007184:	4013      	ands	r3, r2
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800718c:	430b      	orrs	r3, r1
 800718e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4ab3      	ldr	r2, [pc, #716]	; (8007480 <UART_SetConfig+0x32c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d004      	beq.n	80071c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071bc:	4313      	orrs	r3, r2
 80071be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	4baf      	ldr	r3, [pc, #700]	; (8007484 <UART_SetConfig+0x330>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	f023 010f 	bic.w	r1, r3, #15
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4aa6      	ldr	r2, [pc, #664]	; (8007488 <UART_SetConfig+0x334>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d177      	bne.n	80072e4 <UART_SetConfig+0x190>
 80071f4:	4ba5      	ldr	r3, [pc, #660]	; (800748c <UART_SetConfig+0x338>)
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071fc:	2b28      	cmp	r3, #40	; 0x28
 80071fe:	d86d      	bhi.n	80072dc <UART_SetConfig+0x188>
 8007200:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <UART_SetConfig+0xb4>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	080072ad 	.word	0x080072ad
 800720c:	080072dd 	.word	0x080072dd
 8007210:	080072dd 	.word	0x080072dd
 8007214:	080072dd 	.word	0x080072dd
 8007218:	080072dd 	.word	0x080072dd
 800721c:	080072dd 	.word	0x080072dd
 8007220:	080072dd 	.word	0x080072dd
 8007224:	080072dd 	.word	0x080072dd
 8007228:	080072b5 	.word	0x080072b5
 800722c:	080072dd 	.word	0x080072dd
 8007230:	080072dd 	.word	0x080072dd
 8007234:	080072dd 	.word	0x080072dd
 8007238:	080072dd 	.word	0x080072dd
 800723c:	080072dd 	.word	0x080072dd
 8007240:	080072dd 	.word	0x080072dd
 8007244:	080072dd 	.word	0x080072dd
 8007248:	080072bd 	.word	0x080072bd
 800724c:	080072dd 	.word	0x080072dd
 8007250:	080072dd 	.word	0x080072dd
 8007254:	080072dd 	.word	0x080072dd
 8007258:	080072dd 	.word	0x080072dd
 800725c:	080072dd 	.word	0x080072dd
 8007260:	080072dd 	.word	0x080072dd
 8007264:	080072dd 	.word	0x080072dd
 8007268:	080072c5 	.word	0x080072c5
 800726c:	080072dd 	.word	0x080072dd
 8007270:	080072dd 	.word	0x080072dd
 8007274:	080072dd 	.word	0x080072dd
 8007278:	080072dd 	.word	0x080072dd
 800727c:	080072dd 	.word	0x080072dd
 8007280:	080072dd 	.word	0x080072dd
 8007284:	080072dd 	.word	0x080072dd
 8007288:	080072cd 	.word	0x080072cd
 800728c:	080072dd 	.word	0x080072dd
 8007290:	080072dd 	.word	0x080072dd
 8007294:	080072dd 	.word	0x080072dd
 8007298:	080072dd 	.word	0x080072dd
 800729c:	080072dd 	.word	0x080072dd
 80072a0:	080072dd 	.word	0x080072dd
 80072a4:	080072dd 	.word	0x080072dd
 80072a8:	080072d5 	.word	0x080072d5
 80072ac:	2301      	movs	r3, #1
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e222      	b.n	80076fa <UART_SetConfig+0x5a6>
 80072b4:	2304      	movs	r3, #4
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e21e      	b.n	80076fa <UART_SetConfig+0x5a6>
 80072bc:	2308      	movs	r3, #8
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e21a      	b.n	80076fa <UART_SetConfig+0x5a6>
 80072c4:	2310      	movs	r3, #16
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e216      	b.n	80076fa <UART_SetConfig+0x5a6>
 80072cc:	2320      	movs	r3, #32
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d2:	e212      	b.n	80076fa <UART_SetConfig+0x5a6>
 80072d4:	2340      	movs	r3, #64	; 0x40
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072da:	e20e      	b.n	80076fa <UART_SetConfig+0x5a6>
 80072dc:	2380      	movs	r3, #128	; 0x80
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e2:	e20a      	b.n	80076fa <UART_SetConfig+0x5a6>
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a69      	ldr	r2, [pc, #420]	; (8007490 <UART_SetConfig+0x33c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d130      	bne.n	8007350 <UART_SetConfig+0x1fc>
 80072ee:	4b67      	ldr	r3, [pc, #412]	; (800748c <UART_SetConfig+0x338>)
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	2b05      	cmp	r3, #5
 80072f8:	d826      	bhi.n	8007348 <UART_SetConfig+0x1f4>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <UART_SetConfig+0x1ac>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007319 	.word	0x08007319
 8007304:	08007321 	.word	0x08007321
 8007308:	08007329 	.word	0x08007329
 800730c:	08007331 	.word	0x08007331
 8007310:	08007339 	.word	0x08007339
 8007314:	08007341 	.word	0x08007341
 8007318:	2300      	movs	r3, #0
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e1ec      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007320:	2304      	movs	r3, #4
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007326:	e1e8      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007328:	2308      	movs	r3, #8
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732e:	e1e4      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007330:	2310      	movs	r3, #16
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007336:	e1e0      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007338:	2320      	movs	r3, #32
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733e:	e1dc      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007340:	2340      	movs	r3, #64	; 0x40
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007346:	e1d8      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007348:	2380      	movs	r3, #128	; 0x80
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734e:	e1d4      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a4f      	ldr	r2, [pc, #316]	; (8007494 <UART_SetConfig+0x340>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d130      	bne.n	80073bc <UART_SetConfig+0x268>
 800735a:	4b4c      	ldr	r3, [pc, #304]	; (800748c <UART_SetConfig+0x338>)
 800735c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	2b05      	cmp	r3, #5
 8007364:	d826      	bhi.n	80073b4 <UART_SetConfig+0x260>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <UART_SetConfig+0x218>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	08007385 	.word	0x08007385
 8007370:	0800738d 	.word	0x0800738d
 8007374:	08007395 	.word	0x08007395
 8007378:	0800739d 	.word	0x0800739d
 800737c:	080073a5 	.word	0x080073a5
 8007380:	080073ad 	.word	0x080073ad
 8007384:	2300      	movs	r3, #0
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800738a:	e1b6      	b.n	80076fa <UART_SetConfig+0x5a6>
 800738c:	2304      	movs	r3, #4
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007392:	e1b2      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007394:	2308      	movs	r3, #8
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739a:	e1ae      	b.n	80076fa <UART_SetConfig+0x5a6>
 800739c:	2310      	movs	r3, #16
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a2:	e1aa      	b.n	80076fa <UART_SetConfig+0x5a6>
 80073a4:	2320      	movs	r3, #32
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073aa:	e1a6      	b.n	80076fa <UART_SetConfig+0x5a6>
 80073ac:	2340      	movs	r3, #64	; 0x40
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b2:	e1a2      	b.n	80076fa <UART_SetConfig+0x5a6>
 80073b4:	2380      	movs	r3, #128	; 0x80
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ba:	e19e      	b.n	80076fa <UART_SetConfig+0x5a6>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a35      	ldr	r2, [pc, #212]	; (8007498 <UART_SetConfig+0x344>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d130      	bne.n	8007428 <UART_SetConfig+0x2d4>
 80073c6:	4b31      	ldr	r3, [pc, #196]	; (800748c <UART_SetConfig+0x338>)
 80073c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	d826      	bhi.n	8007420 <UART_SetConfig+0x2cc>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <UART_SetConfig+0x284>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	080073f1 	.word	0x080073f1
 80073dc:	080073f9 	.word	0x080073f9
 80073e0:	08007401 	.word	0x08007401
 80073e4:	08007409 	.word	0x08007409
 80073e8:	08007411 	.word	0x08007411
 80073ec:	08007419 	.word	0x08007419
 80073f0:	2300      	movs	r3, #0
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f6:	e180      	b.n	80076fa <UART_SetConfig+0x5a6>
 80073f8:	2304      	movs	r3, #4
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fe:	e17c      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007400:	2308      	movs	r3, #8
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007406:	e178      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007408:	2310      	movs	r3, #16
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740e:	e174      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007410:	2320      	movs	r3, #32
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007416:	e170      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007418:	2340      	movs	r3, #64	; 0x40
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741e:	e16c      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007420:	2380      	movs	r3, #128	; 0x80
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007426:	e168      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1b      	ldr	r2, [pc, #108]	; (800749c <UART_SetConfig+0x348>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d142      	bne.n	80074b8 <UART_SetConfig+0x364>
 8007432:	4b16      	ldr	r3, [pc, #88]	; (800748c <UART_SetConfig+0x338>)
 8007434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	2b05      	cmp	r3, #5
 800743c:	d838      	bhi.n	80074b0 <UART_SetConfig+0x35c>
 800743e:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <UART_SetConfig+0x2f0>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	0800745d 	.word	0x0800745d
 8007448:	08007465 	.word	0x08007465
 800744c:	0800746d 	.word	0x0800746d
 8007450:	08007475 	.word	0x08007475
 8007454:	080074a1 	.word	0x080074a1
 8007458:	080074a9 	.word	0x080074a9
 800745c:	2300      	movs	r3, #0
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007462:	e14a      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007464:	2304      	movs	r3, #4
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746a:	e146      	b.n	80076fa <UART_SetConfig+0x5a6>
 800746c:	2308      	movs	r3, #8
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e142      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007474:	2310      	movs	r3, #16
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747a:	e13e      	b.n	80076fa <UART_SetConfig+0x5a6>
 800747c:	cfff69f3 	.word	0xcfff69f3
 8007480:	58000c00 	.word	0x58000c00
 8007484:	11fff4ff 	.word	0x11fff4ff
 8007488:	40011000 	.word	0x40011000
 800748c:	58024400 	.word	0x58024400
 8007490:	40004400 	.word	0x40004400
 8007494:	40004800 	.word	0x40004800
 8007498:	40004c00 	.word	0x40004c00
 800749c:	40005000 	.word	0x40005000
 80074a0:	2320      	movs	r3, #32
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a6:	e128      	b.n	80076fa <UART_SetConfig+0x5a6>
 80074a8:	2340      	movs	r3, #64	; 0x40
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ae:	e124      	b.n	80076fa <UART_SetConfig+0x5a6>
 80074b0:	2380      	movs	r3, #128	; 0x80
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b6:	e120      	b.n	80076fa <UART_SetConfig+0x5a6>
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4acb      	ldr	r2, [pc, #812]	; (80077ec <UART_SetConfig+0x698>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d176      	bne.n	80075b0 <UART_SetConfig+0x45c>
 80074c2:	4bcb      	ldr	r3, [pc, #812]	; (80077f0 <UART_SetConfig+0x69c>)
 80074c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074ca:	2b28      	cmp	r3, #40	; 0x28
 80074cc:	d86c      	bhi.n	80075a8 <UART_SetConfig+0x454>
 80074ce:	a201      	add	r2, pc, #4	; (adr r2, 80074d4 <UART_SetConfig+0x380>)
 80074d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d4:	08007579 	.word	0x08007579
 80074d8:	080075a9 	.word	0x080075a9
 80074dc:	080075a9 	.word	0x080075a9
 80074e0:	080075a9 	.word	0x080075a9
 80074e4:	080075a9 	.word	0x080075a9
 80074e8:	080075a9 	.word	0x080075a9
 80074ec:	080075a9 	.word	0x080075a9
 80074f0:	080075a9 	.word	0x080075a9
 80074f4:	08007581 	.word	0x08007581
 80074f8:	080075a9 	.word	0x080075a9
 80074fc:	080075a9 	.word	0x080075a9
 8007500:	080075a9 	.word	0x080075a9
 8007504:	080075a9 	.word	0x080075a9
 8007508:	080075a9 	.word	0x080075a9
 800750c:	080075a9 	.word	0x080075a9
 8007510:	080075a9 	.word	0x080075a9
 8007514:	08007589 	.word	0x08007589
 8007518:	080075a9 	.word	0x080075a9
 800751c:	080075a9 	.word	0x080075a9
 8007520:	080075a9 	.word	0x080075a9
 8007524:	080075a9 	.word	0x080075a9
 8007528:	080075a9 	.word	0x080075a9
 800752c:	080075a9 	.word	0x080075a9
 8007530:	080075a9 	.word	0x080075a9
 8007534:	08007591 	.word	0x08007591
 8007538:	080075a9 	.word	0x080075a9
 800753c:	080075a9 	.word	0x080075a9
 8007540:	080075a9 	.word	0x080075a9
 8007544:	080075a9 	.word	0x080075a9
 8007548:	080075a9 	.word	0x080075a9
 800754c:	080075a9 	.word	0x080075a9
 8007550:	080075a9 	.word	0x080075a9
 8007554:	08007599 	.word	0x08007599
 8007558:	080075a9 	.word	0x080075a9
 800755c:	080075a9 	.word	0x080075a9
 8007560:	080075a9 	.word	0x080075a9
 8007564:	080075a9 	.word	0x080075a9
 8007568:	080075a9 	.word	0x080075a9
 800756c:	080075a9 	.word	0x080075a9
 8007570:	080075a9 	.word	0x080075a9
 8007574:	080075a1 	.word	0x080075a1
 8007578:	2301      	movs	r3, #1
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757e:	e0bc      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007580:	2304      	movs	r3, #4
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007586:	e0b8      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007588:	2308      	movs	r3, #8
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758e:	e0b4      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007590:	2310      	movs	r3, #16
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007596:	e0b0      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007598:	2320      	movs	r3, #32
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759e:	e0ac      	b.n	80076fa <UART_SetConfig+0x5a6>
 80075a0:	2340      	movs	r3, #64	; 0x40
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075a6:	e0a8      	b.n	80076fa <UART_SetConfig+0x5a6>
 80075a8:	2380      	movs	r3, #128	; 0x80
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ae:	e0a4      	b.n	80076fa <UART_SetConfig+0x5a6>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a8f      	ldr	r2, [pc, #572]	; (80077f4 <UART_SetConfig+0x6a0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d130      	bne.n	800761c <UART_SetConfig+0x4c8>
 80075ba:	4b8d      	ldr	r3, [pc, #564]	; (80077f0 <UART_SetConfig+0x69c>)
 80075bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	2b05      	cmp	r3, #5
 80075c4:	d826      	bhi.n	8007614 <UART_SetConfig+0x4c0>
 80075c6:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <UART_SetConfig+0x478>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075e5 	.word	0x080075e5
 80075d0:	080075ed 	.word	0x080075ed
 80075d4:	080075f5 	.word	0x080075f5
 80075d8:	080075fd 	.word	0x080075fd
 80075dc:	08007605 	.word	0x08007605
 80075e0:	0800760d 	.word	0x0800760d
 80075e4:	2300      	movs	r3, #0
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ea:	e086      	b.n	80076fa <UART_SetConfig+0x5a6>
 80075ec:	2304      	movs	r3, #4
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f2:	e082      	b.n	80076fa <UART_SetConfig+0x5a6>
 80075f4:	2308      	movs	r3, #8
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fa:	e07e      	b.n	80076fa <UART_SetConfig+0x5a6>
 80075fc:	2310      	movs	r3, #16
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007602:	e07a      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007604:	2320      	movs	r3, #32
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760a:	e076      	b.n	80076fa <UART_SetConfig+0x5a6>
 800760c:	2340      	movs	r3, #64	; 0x40
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007612:	e072      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007614:	2380      	movs	r3, #128	; 0x80
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761a:	e06e      	b.n	80076fa <UART_SetConfig+0x5a6>
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a75      	ldr	r2, [pc, #468]	; (80077f8 <UART_SetConfig+0x6a4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d130      	bne.n	8007688 <UART_SetConfig+0x534>
 8007626:	4b72      	ldr	r3, [pc, #456]	; (80077f0 <UART_SetConfig+0x69c>)
 8007628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	2b05      	cmp	r3, #5
 8007630:	d826      	bhi.n	8007680 <UART_SetConfig+0x52c>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <UART_SetConfig+0x4e4>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	08007651 	.word	0x08007651
 800763c:	08007659 	.word	0x08007659
 8007640:	08007661 	.word	0x08007661
 8007644:	08007669 	.word	0x08007669
 8007648:	08007671 	.word	0x08007671
 800764c:	08007679 	.word	0x08007679
 8007650:	2300      	movs	r3, #0
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007656:	e050      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007658:	2304      	movs	r3, #4
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765e:	e04c      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007660:	2308      	movs	r3, #8
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007666:	e048      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007668:	2310      	movs	r3, #16
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766e:	e044      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007670:	2320      	movs	r3, #32
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007676:	e040      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007678:	2340      	movs	r3, #64	; 0x40
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767e:	e03c      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007680:	2380      	movs	r3, #128	; 0x80
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007686:	e038      	b.n	80076fa <UART_SetConfig+0x5a6>
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a5b      	ldr	r2, [pc, #364]	; (80077fc <UART_SetConfig+0x6a8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d130      	bne.n	80076f4 <UART_SetConfig+0x5a0>
 8007692:	4b57      	ldr	r3, [pc, #348]	; (80077f0 <UART_SetConfig+0x69c>)
 8007694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	2b05      	cmp	r3, #5
 800769c:	d826      	bhi.n	80076ec <UART_SetConfig+0x598>
 800769e:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <UART_SetConfig+0x550>)
 80076a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a4:	080076bd 	.word	0x080076bd
 80076a8:	080076c5 	.word	0x080076c5
 80076ac:	080076cd 	.word	0x080076cd
 80076b0:	080076d5 	.word	0x080076d5
 80076b4:	080076dd 	.word	0x080076dd
 80076b8:	080076e5 	.word	0x080076e5
 80076bc:	2302      	movs	r3, #2
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c2:	e01a      	b.n	80076fa <UART_SetConfig+0x5a6>
 80076c4:	2304      	movs	r3, #4
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ca:	e016      	b.n	80076fa <UART_SetConfig+0x5a6>
 80076cc:	2308      	movs	r3, #8
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d2:	e012      	b.n	80076fa <UART_SetConfig+0x5a6>
 80076d4:	2310      	movs	r3, #16
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076da:	e00e      	b.n	80076fa <UART_SetConfig+0x5a6>
 80076dc:	2320      	movs	r3, #32
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e2:	e00a      	b.n	80076fa <UART_SetConfig+0x5a6>
 80076e4:	2340      	movs	r3, #64	; 0x40
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ea:	e006      	b.n	80076fa <UART_SetConfig+0x5a6>
 80076ec:	2380      	movs	r3, #128	; 0x80
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f2:	e002      	b.n	80076fa <UART_SetConfig+0x5a6>
 80076f4:	2380      	movs	r3, #128	; 0x80
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a3f      	ldr	r2, [pc, #252]	; (80077fc <UART_SetConfig+0x6a8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	f040 80f8 	bne.w	80078f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007706:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800770a:	2b20      	cmp	r3, #32
 800770c:	dc46      	bgt.n	800779c <UART_SetConfig+0x648>
 800770e:	2b02      	cmp	r3, #2
 8007710:	f2c0 8082 	blt.w	8007818 <UART_SetConfig+0x6c4>
 8007714:	3b02      	subs	r3, #2
 8007716:	2b1e      	cmp	r3, #30
 8007718:	d87e      	bhi.n	8007818 <UART_SetConfig+0x6c4>
 800771a:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <UART_SetConfig+0x5cc>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	080077a3 	.word	0x080077a3
 8007724:	08007819 	.word	0x08007819
 8007728:	080077ab 	.word	0x080077ab
 800772c:	08007819 	.word	0x08007819
 8007730:	08007819 	.word	0x08007819
 8007734:	08007819 	.word	0x08007819
 8007738:	080077bb 	.word	0x080077bb
 800773c:	08007819 	.word	0x08007819
 8007740:	08007819 	.word	0x08007819
 8007744:	08007819 	.word	0x08007819
 8007748:	08007819 	.word	0x08007819
 800774c:	08007819 	.word	0x08007819
 8007750:	08007819 	.word	0x08007819
 8007754:	08007819 	.word	0x08007819
 8007758:	080077cb 	.word	0x080077cb
 800775c:	08007819 	.word	0x08007819
 8007760:	08007819 	.word	0x08007819
 8007764:	08007819 	.word	0x08007819
 8007768:	08007819 	.word	0x08007819
 800776c:	08007819 	.word	0x08007819
 8007770:	08007819 	.word	0x08007819
 8007774:	08007819 	.word	0x08007819
 8007778:	08007819 	.word	0x08007819
 800777c:	08007819 	.word	0x08007819
 8007780:	08007819 	.word	0x08007819
 8007784:	08007819 	.word	0x08007819
 8007788:	08007819 	.word	0x08007819
 800778c:	08007819 	.word	0x08007819
 8007790:	08007819 	.word	0x08007819
 8007794:	08007819 	.word	0x08007819
 8007798:	0800780b 	.word	0x0800780b
 800779c:	2b40      	cmp	r3, #64	; 0x40
 800779e:	d037      	beq.n	8007810 <UART_SetConfig+0x6bc>
 80077a0:	e03a      	b.n	8007818 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80077a2:	f7fe ffd7 	bl	8006754 <HAL_RCCEx_GetD3PCLK1Freq>
 80077a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80077a8:	e03c      	b.n	8007824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe ffe6 	bl	8006780 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077b8:	e034      	b.n	8007824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ba:	f107 0318 	add.w	r3, r7, #24
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff f932 	bl	8006a28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077c8:	e02c      	b.n	8007824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077ca:	4b09      	ldr	r3, [pc, #36]	; (80077f0 <UART_SetConfig+0x69c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d016      	beq.n	8007804 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077d6:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <UART_SetConfig+0x69c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	08db      	lsrs	r3, r3, #3
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	4a07      	ldr	r2, [pc, #28]	; (8007800 <UART_SetConfig+0x6ac>)
 80077e2:	fa22 f303 	lsr.w	r3, r2, r3
 80077e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077e8:	e01c      	b.n	8007824 <UART_SetConfig+0x6d0>
 80077ea:	bf00      	nop
 80077ec:	40011400 	.word	0x40011400
 80077f0:	58024400 	.word	0x58024400
 80077f4:	40007800 	.word	0x40007800
 80077f8:	40007c00 	.word	0x40007c00
 80077fc:	58000c00 	.word	0x58000c00
 8007800:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007804:	4b9d      	ldr	r3, [pc, #628]	; (8007a7c <UART_SetConfig+0x928>)
 8007806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007808:	e00c      	b.n	8007824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800780a:	4b9d      	ldr	r3, [pc, #628]	; (8007a80 <UART_SetConfig+0x92c>)
 800780c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800780e:	e009      	b.n	8007824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007816:	e005      	b.n	8007824 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007822:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 81de 	beq.w	8007be8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	4a94      	ldr	r2, [pc, #592]	; (8007a84 <UART_SetConfig+0x930>)
 8007832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007836:	461a      	mov	r2, r3
 8007838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783a:	fbb3 f3f2 	udiv	r3, r3, r2
 800783e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	4613      	mov	r3, r2
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	4413      	add	r3, r2
 800784a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800784c:	429a      	cmp	r2, r3
 800784e:	d305      	bcc.n	800785c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007858:	429a      	cmp	r2, r3
 800785a:	d903      	bls.n	8007864 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007862:	e1c1      	b.n	8007be8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007866:	2200      	movs	r2, #0
 8007868:	60bb      	str	r3, [r7, #8]
 800786a:	60fa      	str	r2, [r7, #12]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	4a84      	ldr	r2, [pc, #528]	; (8007a84 <UART_SetConfig+0x930>)
 8007872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007876:	b29b      	uxth	r3, r3
 8007878:	2200      	movs	r2, #0
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	607a      	str	r2, [r7, #4]
 800787e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007882:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007886:	f7f8 fd7b 	bl	8000380 <__aeabi_uldivmod>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4610      	mov	r0, r2
 8007890:	4619      	mov	r1, r3
 8007892:	f04f 0200 	mov.w	r2, #0
 8007896:	f04f 0300 	mov.w	r3, #0
 800789a:	020b      	lsls	r3, r1, #8
 800789c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078a0:	0202      	lsls	r2, r0, #8
 80078a2:	6979      	ldr	r1, [r7, #20]
 80078a4:	6849      	ldr	r1, [r1, #4]
 80078a6:	0849      	lsrs	r1, r1, #1
 80078a8:	2000      	movs	r0, #0
 80078aa:	460c      	mov	r4, r1
 80078ac:	4605      	mov	r5, r0
 80078ae:	eb12 0804 	adds.w	r8, r2, r4
 80078b2:	eb43 0905 	adc.w	r9, r3, r5
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	469a      	mov	sl, r3
 80078be:	4693      	mov	fp, r2
 80078c0:	4652      	mov	r2, sl
 80078c2:	465b      	mov	r3, fp
 80078c4:	4640      	mov	r0, r8
 80078c6:	4649      	mov	r1, r9
 80078c8:	f7f8 fd5a 	bl	8000380 <__aeabi_uldivmod>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4613      	mov	r3, r2
 80078d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078da:	d308      	bcc.n	80078ee <UART_SetConfig+0x79a>
 80078dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078e2:	d204      	bcs.n	80078ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ea:	60da      	str	r2, [r3, #12]
 80078ec:	e17c      	b.n	8007be8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80078f4:	e178      	b.n	8007be8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078fe:	f040 80c5 	bne.w	8007a8c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007902:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007906:	2b20      	cmp	r3, #32
 8007908:	dc48      	bgt.n	800799c <UART_SetConfig+0x848>
 800790a:	2b00      	cmp	r3, #0
 800790c:	db7b      	blt.n	8007a06 <UART_SetConfig+0x8b2>
 800790e:	2b20      	cmp	r3, #32
 8007910:	d879      	bhi.n	8007a06 <UART_SetConfig+0x8b2>
 8007912:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <UART_SetConfig+0x7c4>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	080079a3 	.word	0x080079a3
 800791c:	080079ab 	.word	0x080079ab
 8007920:	08007a07 	.word	0x08007a07
 8007924:	08007a07 	.word	0x08007a07
 8007928:	080079b3 	.word	0x080079b3
 800792c:	08007a07 	.word	0x08007a07
 8007930:	08007a07 	.word	0x08007a07
 8007934:	08007a07 	.word	0x08007a07
 8007938:	080079c3 	.word	0x080079c3
 800793c:	08007a07 	.word	0x08007a07
 8007940:	08007a07 	.word	0x08007a07
 8007944:	08007a07 	.word	0x08007a07
 8007948:	08007a07 	.word	0x08007a07
 800794c:	08007a07 	.word	0x08007a07
 8007950:	08007a07 	.word	0x08007a07
 8007954:	08007a07 	.word	0x08007a07
 8007958:	080079d3 	.word	0x080079d3
 800795c:	08007a07 	.word	0x08007a07
 8007960:	08007a07 	.word	0x08007a07
 8007964:	08007a07 	.word	0x08007a07
 8007968:	08007a07 	.word	0x08007a07
 800796c:	08007a07 	.word	0x08007a07
 8007970:	08007a07 	.word	0x08007a07
 8007974:	08007a07 	.word	0x08007a07
 8007978:	08007a07 	.word	0x08007a07
 800797c:	08007a07 	.word	0x08007a07
 8007980:	08007a07 	.word	0x08007a07
 8007984:	08007a07 	.word	0x08007a07
 8007988:	08007a07 	.word	0x08007a07
 800798c:	08007a07 	.word	0x08007a07
 8007990:	08007a07 	.word	0x08007a07
 8007994:	08007a07 	.word	0x08007a07
 8007998:	080079f9 	.word	0x080079f9
 800799c:	2b40      	cmp	r3, #64	; 0x40
 800799e:	d02e      	beq.n	80079fe <UART_SetConfig+0x8aa>
 80079a0:	e031      	b.n	8007a06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079a2:	f7fd fca1 	bl	80052e8 <HAL_RCC_GetPCLK1Freq>
 80079a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079a8:	e033      	b.n	8007a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079aa:	f7fd fcb3 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 80079ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079b0:	e02f      	b.n	8007a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fee2 	bl	8006780 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c0:	e027      	b.n	8007a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079c2:	f107 0318 	add.w	r3, r7, #24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff f82e 	bl	8006a28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079d0:	e01f      	b.n	8007a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079d2:	4b2d      	ldr	r3, [pc, #180]	; (8007a88 <UART_SetConfig+0x934>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079de:	4b2a      	ldr	r3, [pc, #168]	; (8007a88 <UART_SetConfig+0x934>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	08db      	lsrs	r3, r3, #3
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	4a24      	ldr	r2, [pc, #144]	; (8007a7c <UART_SetConfig+0x928>)
 80079ea:	fa22 f303 	lsr.w	r3, r2, r3
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079f0:	e00f      	b.n	8007a12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80079f2:	4b22      	ldr	r3, [pc, #136]	; (8007a7c <UART_SetConfig+0x928>)
 80079f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f6:	e00c      	b.n	8007a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079f8:	4b21      	ldr	r3, [pc, #132]	; (8007a80 <UART_SetConfig+0x92c>)
 80079fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079fc:	e009      	b.n	8007a12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a04:	e005      	b.n	8007a12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 80e7 	beq.w	8007be8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	4a19      	ldr	r2, [pc, #100]	; (8007a84 <UART_SetConfig+0x930>)
 8007a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a24:	461a      	mov	r2, r3
 8007a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a2c:	005a      	lsls	r2, r3, #1
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	085b      	lsrs	r3, r3, #1
 8007a34:	441a      	add	r2, r3
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a42:	2b0f      	cmp	r3, #15
 8007a44:	d916      	bls.n	8007a74 <UART_SetConfig+0x920>
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a4c:	d212      	bcs.n	8007a74 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	f023 030f 	bic.w	r3, r3, #15
 8007a56:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	085b      	lsrs	r3, r3, #1
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a66:	4313      	orrs	r3, r2
 8007a68:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007a70:	60da      	str	r2, [r3, #12]
 8007a72:	e0b9      	b.n	8007be8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a7a:	e0b5      	b.n	8007be8 <UART_SetConfig+0xa94>
 8007a7c:	03d09000 	.word	0x03d09000
 8007a80:	003d0900 	.word	0x003d0900
 8007a84:	0800d694 	.word	0x0800d694
 8007a88:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	dc49      	bgt.n	8007b28 <UART_SetConfig+0x9d4>
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	db7c      	blt.n	8007b92 <UART_SetConfig+0xa3e>
 8007a98:	2b20      	cmp	r3, #32
 8007a9a:	d87a      	bhi.n	8007b92 <UART_SetConfig+0xa3e>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <UART_SetConfig+0x950>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007b2f 	.word	0x08007b2f
 8007aa8:	08007b37 	.word	0x08007b37
 8007aac:	08007b93 	.word	0x08007b93
 8007ab0:	08007b93 	.word	0x08007b93
 8007ab4:	08007b3f 	.word	0x08007b3f
 8007ab8:	08007b93 	.word	0x08007b93
 8007abc:	08007b93 	.word	0x08007b93
 8007ac0:	08007b93 	.word	0x08007b93
 8007ac4:	08007b4f 	.word	0x08007b4f
 8007ac8:	08007b93 	.word	0x08007b93
 8007acc:	08007b93 	.word	0x08007b93
 8007ad0:	08007b93 	.word	0x08007b93
 8007ad4:	08007b93 	.word	0x08007b93
 8007ad8:	08007b93 	.word	0x08007b93
 8007adc:	08007b93 	.word	0x08007b93
 8007ae0:	08007b93 	.word	0x08007b93
 8007ae4:	08007b5f 	.word	0x08007b5f
 8007ae8:	08007b93 	.word	0x08007b93
 8007aec:	08007b93 	.word	0x08007b93
 8007af0:	08007b93 	.word	0x08007b93
 8007af4:	08007b93 	.word	0x08007b93
 8007af8:	08007b93 	.word	0x08007b93
 8007afc:	08007b93 	.word	0x08007b93
 8007b00:	08007b93 	.word	0x08007b93
 8007b04:	08007b93 	.word	0x08007b93
 8007b08:	08007b93 	.word	0x08007b93
 8007b0c:	08007b93 	.word	0x08007b93
 8007b10:	08007b93 	.word	0x08007b93
 8007b14:	08007b93 	.word	0x08007b93
 8007b18:	08007b93 	.word	0x08007b93
 8007b1c:	08007b93 	.word	0x08007b93
 8007b20:	08007b93 	.word	0x08007b93
 8007b24:	08007b85 	.word	0x08007b85
 8007b28:	2b40      	cmp	r3, #64	; 0x40
 8007b2a:	d02e      	beq.n	8007b8a <UART_SetConfig+0xa36>
 8007b2c:	e031      	b.n	8007b92 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b2e:	f7fd fbdb 	bl	80052e8 <HAL_RCC_GetPCLK1Freq>
 8007b32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b34:	e033      	b.n	8007b9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b36:	f7fd fbed 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 8007b3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b3c:	e02f      	b.n	8007b9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe fe1c 	bl	8006780 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b4c:	e027      	b.n	8007b9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b4e:	f107 0318 	add.w	r3, r7, #24
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe ff68 	bl	8006a28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b5c:	e01f      	b.n	8007b9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b5e:	4b2d      	ldr	r3, [pc, #180]	; (8007c14 <UART_SetConfig+0xac0>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b6a:	4b2a      	ldr	r3, [pc, #168]	; (8007c14 <UART_SetConfig+0xac0>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	08db      	lsrs	r3, r3, #3
 8007b70:	f003 0303 	and.w	r3, r3, #3
 8007b74:	4a28      	ldr	r2, [pc, #160]	; (8007c18 <UART_SetConfig+0xac4>)
 8007b76:	fa22 f303 	lsr.w	r3, r2, r3
 8007b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b7c:	e00f      	b.n	8007b9e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007b7e:	4b26      	ldr	r3, [pc, #152]	; (8007c18 <UART_SetConfig+0xac4>)
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b82:	e00c      	b.n	8007b9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b84:	4b25      	ldr	r3, [pc, #148]	; (8007c1c <UART_SetConfig+0xac8>)
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b88:	e009      	b.n	8007b9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b90:	e005      	b.n	8007b9e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b9c:	bf00      	nop
    }

    if (pclk != 0U)
 8007b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d021      	beq.n	8007be8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	4a1d      	ldr	r2, [pc, #116]	; (8007c20 <UART_SetConfig+0xacc>)
 8007baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	085b      	lsrs	r3, r3, #1
 8007bbc:	441a      	add	r2, r3
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	2b0f      	cmp	r3, #15
 8007bcc:	d909      	bls.n	8007be2 <UART_SetConfig+0xa8e>
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd4:	d205      	bcs.n	8007be2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60da      	str	r2, [r3, #12]
 8007be0:	e002      	b.n	8007be8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2200      	movs	r2, #0
 8007c02:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007c04:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3748      	adds	r7, #72	; 0x48
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c12:	bf00      	nop
 8007c14:	58024400 	.word	0x58024400
 8007c18:	03d09000 	.word	0x03d09000
 8007c1c:	003d0900 	.word	0x003d0900
 8007c20:	0800d694 	.word	0x0800d694

08007c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c96:	f003 0308 	and.w	r3, r3, #8
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb8:	f003 0310 	and.w	r3, r3, #16
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cda:	f003 0320 	and.w	r3, r3, #32
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01a      	beq.n	8007d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d22:	d10a      	bne.n	8007d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	605a      	str	r2, [r3, #4]
  }
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b098      	sub	sp, #96	; 0x60
 8007d6c:	af02      	add	r7, sp, #8
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d78:	f7f9 ffb6 	bl	8001ce8 <HAL_GetTick>
 8007d7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d12f      	bne.n	8007dec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d94:	2200      	movs	r2, #0
 8007d96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f88e 	bl	8007ebc <UART_WaitOnFlagUntilTimeout>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d022      	beq.n	8007dec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dba:	653b      	str	r3, [r7, #80]	; 0x50
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8007dc6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e6      	bne.n	8007da6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e063      	b.n	8007eb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d149      	bne.n	8007e8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dfa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e02:	2200      	movs	r2, #0
 8007e04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f857 	bl	8007ebc <UART_WaitOnFlagUntilTimeout>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d03c      	beq.n	8007e8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	623b      	str	r3, [r7, #32]
   return(result);
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e32:	633b      	str	r3, [r7, #48]	; 0x30
 8007e34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e6      	bne.n	8007e14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f023 0301 	bic.w	r3, r3, #1
 8007e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3308      	adds	r3, #8
 8007e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e66:	61fa      	str	r2, [r7, #28]
 8007e68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	69b9      	ldr	r1, [r7, #24]
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	617b      	str	r3, [r7, #20]
   return(result);
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e5      	bne.n	8007e46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e012      	b.n	8007eb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3758      	adds	r7, #88	; 0x58
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ecc:	e049      	b.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed4:	d045      	beq.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ed6:	f7f9 ff07 	bl	8001ce8 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d302      	bcc.n	8007eec <UART_WaitOnFlagUntilTimeout+0x30>
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e048      	b.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d031      	beq.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	f003 0308 	and.w	r3, r3, #8
 8007f08:	2b08      	cmp	r3, #8
 8007f0a:	d110      	bne.n	8007f2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2208      	movs	r2, #8
 8007f12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 f839 	bl	8007f8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e029      	b.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69db      	ldr	r3, [r3, #28]
 8007f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f3c:	d111      	bne.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f81f 	bl	8007f8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e00f      	b.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69da      	ldr	r2, [r3, #28]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	bf0c      	ite	eq
 8007f72:	2301      	moveq	r3, #1
 8007f74:	2300      	movne	r3, #0
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d0a6      	beq.n	8007ece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b095      	sub	sp, #84	; 0x54
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9c:	e853 3f00 	ldrex	r3, [r3]
 8007fa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8007fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fba:	e841 2300 	strex	r3, r2, [r1]
 8007fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1e6      	bne.n	8007f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3308      	adds	r3, #8
 8007fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	4b1e      	ldr	r3, [pc, #120]	; (8008054 <UART_EndRxTransfer+0xc8>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fee:	e841 2300 	strex	r3, r2, [r1]
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1e5      	bne.n	8007fc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d118      	bne.n	8008034 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f023 0310 	bic.w	r3, r3, #16
 8008016:	647b      	str	r3, [r7, #68]	; 0x44
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008020:	61bb      	str	r3, [r7, #24]
 8008022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	6979      	ldr	r1, [r7, #20]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	613b      	str	r3, [r7, #16]
   return(result);
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e6      	bne.n	8008002 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008048:	bf00      	nop
 800804a:	3754      	adds	r7, #84	; 0x54
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	effffffe 	.word	0xeffffffe

08008058 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008066:	2b01      	cmp	r3, #1
 8008068:	d101      	bne.n	800806e <HAL_UARTEx_DisableFifoMode+0x16>
 800806a:	2302      	movs	r3, #2
 800806c:	e027      	b.n	80080be <HAL_UARTEx_DisableFifoMode+0x66>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2224      	movs	r2, #36	; 0x24
 800807a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0201 	bic.w	r2, r2, #1
 8008094:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800809c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d101      	bne.n	80080e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080de:	2302      	movs	r3, #2
 80080e0:	e02d      	b.n	800813e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2224      	movs	r2, #36	; 0x24
 80080ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f022 0201 	bic.w	r2, r2, #1
 8008108:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f850 	bl	80081c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2220      	movs	r2, #32
 8008130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008156:	2b01      	cmp	r3, #1
 8008158:	d101      	bne.n	800815e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800815a:	2302      	movs	r3, #2
 800815c:	e02d      	b.n	80081ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2224      	movs	r2, #36	; 0x24
 800816a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f022 0201 	bic.w	r2, r2, #1
 8008184:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f812 	bl	80081c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2220      	movs	r2, #32
 80081ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d108      	bne.n	80081e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081e4:	e031      	b.n	800824a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081e6:	2310      	movs	r3, #16
 80081e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081ea:	2310      	movs	r3, #16
 80081ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	0e5b      	lsrs	r3, r3, #25
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	0f5b      	lsrs	r3, r3, #29
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	7b3a      	ldrb	r2, [r7, #12]
 8008212:	4911      	ldr	r1, [pc, #68]	; (8008258 <UARTEx_SetNbDataToProcess+0x94>)
 8008214:	5c8a      	ldrb	r2, [r1, r2]
 8008216:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800821a:	7b3a      	ldrb	r2, [r7, #12]
 800821c:	490f      	ldr	r1, [pc, #60]	; (800825c <UARTEx_SetNbDataToProcess+0x98>)
 800821e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008220:	fb93 f3f2 	sdiv	r3, r3, r2
 8008224:	b29a      	uxth	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	7b7a      	ldrb	r2, [r7, #13]
 8008230:	4909      	ldr	r1, [pc, #36]	; (8008258 <UARTEx_SetNbDataToProcess+0x94>)
 8008232:	5c8a      	ldrb	r2, [r1, r2]
 8008234:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008238:	7b7a      	ldrb	r2, [r7, #13]
 800823a:	4908      	ldr	r1, [pc, #32]	; (800825c <UARTEx_SetNbDataToProcess+0x98>)
 800823c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800823e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008242:	b29a      	uxth	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800824a:	bf00      	nop
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	0800d6ac 	.word	0x0800d6ac
 800825c:	0800d6b4 	.word	0x0800d6b4

08008260 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008260:	b084      	sub	sp, #16
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	f107 001c 	add.w	r0, r7, #28
 800826e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	2b01      	cmp	r3, #1
 8008276:	d120      	bne.n	80082ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	4b2a      	ldr	r3, [pc, #168]	; (8008334 <USB_CoreInit+0xd4>)
 800828a:	4013      	ands	r3, r2
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800829c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d105      	bne.n	80082ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 fa1c 	bl	80096ec <USB_CoreReset>
 80082b4:	4603      	mov	r3, r0
 80082b6:	73fb      	strb	r3, [r7, #15]
 80082b8:	e01a      	b.n	80082f0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 fa10 	bl	80096ec <USB_CoreReset>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38
 80082e2:	e005      	b.n	80082f0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d116      	bne.n	8008324 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008304:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <USB_CoreInit+0xd8>)
 8008306:	4313      	orrs	r3, r2
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f043 0206 	orr.w	r2, r3, #6
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f043 0220 	orr.w	r2, r3, #32
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008330:	b004      	add	sp, #16
 8008332:	4770      	bx	lr
 8008334:	ffbdffbf 	.word	0xffbdffbf
 8008338:	03ee0000 	.word	0x03ee0000

0800833c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	2b02      	cmp	r3, #2
 800834e:	d165      	bne.n	800841c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4a41      	ldr	r2, [pc, #260]	; (8008458 <USB_SetTurnaroundTime+0x11c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d906      	bls.n	8008366 <USB_SetTurnaroundTime+0x2a>
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4a40      	ldr	r2, [pc, #256]	; (800845c <USB_SetTurnaroundTime+0x120>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d202      	bcs.n	8008366 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008360:	230f      	movs	r3, #15
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	e062      	b.n	800842c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	4a3c      	ldr	r2, [pc, #240]	; (800845c <USB_SetTurnaroundTime+0x120>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d306      	bcc.n	800837c <USB_SetTurnaroundTime+0x40>
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	4a3b      	ldr	r2, [pc, #236]	; (8008460 <USB_SetTurnaroundTime+0x124>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d202      	bcs.n	800837c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008376:	230e      	movs	r3, #14
 8008378:	617b      	str	r3, [r7, #20]
 800837a:	e057      	b.n	800842c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	4a38      	ldr	r2, [pc, #224]	; (8008460 <USB_SetTurnaroundTime+0x124>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d306      	bcc.n	8008392 <USB_SetTurnaroundTime+0x56>
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	4a37      	ldr	r2, [pc, #220]	; (8008464 <USB_SetTurnaroundTime+0x128>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d202      	bcs.n	8008392 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800838c:	230d      	movs	r3, #13
 800838e:	617b      	str	r3, [r7, #20]
 8008390:	e04c      	b.n	800842c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	4a33      	ldr	r2, [pc, #204]	; (8008464 <USB_SetTurnaroundTime+0x128>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d306      	bcc.n	80083a8 <USB_SetTurnaroundTime+0x6c>
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	4a32      	ldr	r2, [pc, #200]	; (8008468 <USB_SetTurnaroundTime+0x12c>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d802      	bhi.n	80083a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80083a2:	230c      	movs	r3, #12
 80083a4:	617b      	str	r3, [r7, #20]
 80083a6:	e041      	b.n	800842c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	4a2f      	ldr	r2, [pc, #188]	; (8008468 <USB_SetTurnaroundTime+0x12c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d906      	bls.n	80083be <USB_SetTurnaroundTime+0x82>
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4a2e      	ldr	r2, [pc, #184]	; (800846c <USB_SetTurnaroundTime+0x130>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d802      	bhi.n	80083be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80083b8:	230b      	movs	r3, #11
 80083ba:	617b      	str	r3, [r7, #20]
 80083bc:	e036      	b.n	800842c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	4a2a      	ldr	r2, [pc, #168]	; (800846c <USB_SetTurnaroundTime+0x130>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d906      	bls.n	80083d4 <USB_SetTurnaroundTime+0x98>
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4a29      	ldr	r2, [pc, #164]	; (8008470 <USB_SetTurnaroundTime+0x134>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d802      	bhi.n	80083d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80083ce:	230a      	movs	r3, #10
 80083d0:	617b      	str	r3, [r7, #20]
 80083d2:	e02b      	b.n	800842c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4a26      	ldr	r2, [pc, #152]	; (8008470 <USB_SetTurnaroundTime+0x134>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d906      	bls.n	80083ea <USB_SetTurnaroundTime+0xae>
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4a25      	ldr	r2, [pc, #148]	; (8008474 <USB_SetTurnaroundTime+0x138>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d202      	bcs.n	80083ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80083e4:	2309      	movs	r3, #9
 80083e6:	617b      	str	r3, [r7, #20]
 80083e8:	e020      	b.n	800842c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	4a21      	ldr	r2, [pc, #132]	; (8008474 <USB_SetTurnaroundTime+0x138>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d306      	bcc.n	8008400 <USB_SetTurnaroundTime+0xc4>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	4a20      	ldr	r2, [pc, #128]	; (8008478 <USB_SetTurnaroundTime+0x13c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d802      	bhi.n	8008400 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80083fa:	2308      	movs	r3, #8
 80083fc:	617b      	str	r3, [r7, #20]
 80083fe:	e015      	b.n	800842c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4a1d      	ldr	r2, [pc, #116]	; (8008478 <USB_SetTurnaroundTime+0x13c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d906      	bls.n	8008416 <USB_SetTurnaroundTime+0xda>
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4a1c      	ldr	r2, [pc, #112]	; (800847c <USB_SetTurnaroundTime+0x140>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d202      	bcs.n	8008416 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008410:	2307      	movs	r3, #7
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	e00a      	b.n	800842c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008416:	2306      	movs	r3, #6
 8008418:	617b      	str	r3, [r7, #20]
 800841a:	e007      	b.n	800842c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800841c:	79fb      	ldrb	r3, [r7, #7]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d102      	bne.n	8008428 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008422:	2309      	movs	r3, #9
 8008424:	617b      	str	r3, [r7, #20]
 8008426:	e001      	b.n	800842c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008428:	2309      	movs	r3, #9
 800842a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	029b      	lsls	r3, r3, #10
 8008440:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008444:	431a      	orrs	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	00d8acbf 	.word	0x00d8acbf
 800845c:	00e4e1c0 	.word	0x00e4e1c0
 8008460:	00f42400 	.word	0x00f42400
 8008464:	01067380 	.word	0x01067380
 8008468:	011a499f 	.word	0x011a499f
 800846c:	01312cff 	.word	0x01312cff
 8008470:	014ca43f 	.word	0x014ca43f
 8008474:	016e3600 	.word	0x016e3600
 8008478:	01a6ab1f 	.word	0x01a6ab1f
 800847c:	01e84800 	.word	0x01e84800

08008480 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f043 0201 	orr.w	r2, r3, #1
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f023 0201 	bic.w	r2, r3, #1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d115      	bne.n	8008512 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80084f2:	2001      	movs	r0, #1
 80084f4:	f7f9 fc04 	bl	8001d00 <HAL_Delay>
      ms++;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3301      	adds	r3, #1
 80084fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f001 f863 	bl	80095ca <USB_GetMode>
 8008504:	4603      	mov	r3, r0
 8008506:	2b01      	cmp	r3, #1
 8008508:	d01e      	beq.n	8008548 <USB_SetCurrentMode+0x84>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b31      	cmp	r3, #49	; 0x31
 800850e:	d9f0      	bls.n	80084f2 <USB_SetCurrentMode+0x2e>
 8008510:	e01a      	b.n	8008548 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008512:	78fb      	ldrb	r3, [r7, #3]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d115      	bne.n	8008544 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008524:	2001      	movs	r0, #1
 8008526:	f7f9 fbeb 	bl	8001d00 <HAL_Delay>
      ms++;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3301      	adds	r3, #1
 800852e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 f84a 	bl	80095ca <USB_GetMode>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d005      	beq.n	8008548 <USB_SetCurrentMode+0x84>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b31      	cmp	r3, #49	; 0x31
 8008540:	d9f0      	bls.n	8008524 <USB_SetCurrentMode+0x60>
 8008542:	e001      	b.n	8008548 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e005      	b.n	8008554 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b32      	cmp	r3, #50	; 0x32
 800854c:	d101      	bne.n	8008552 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800855c:	b084      	sub	sp, #16
 800855e:	b580      	push	{r7, lr}
 8008560:	b086      	sub	sp, #24
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800856a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008576:	2300      	movs	r3, #0
 8008578:	613b      	str	r3, [r7, #16]
 800857a:	e009      	b.n	8008590 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	3340      	adds	r3, #64	; 0x40
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	2200      	movs	r2, #0
 8008588:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	3301      	adds	r3, #1
 800858e:	613b      	str	r3, [r7, #16]
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	2b0e      	cmp	r3, #14
 8008594:	d9f2      	bls.n	800857c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008598:	2b00      	cmp	r3, #0
 800859a:	d11c      	bne.n	80085d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085aa:	f043 0302 	orr.w	r3, r3, #2
 80085ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	e005      	b.n	80085e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085e8:	461a      	mov	r2, r3
 80085ea:	2300      	movs	r3, #0
 80085ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f4:	4619      	mov	r1, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fc:	461a      	mov	r2, r3
 80085fe:	680b      	ldr	r3, [r1, #0]
 8008600:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	2b01      	cmp	r3, #1
 8008606:	d10c      	bne.n	8008622 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	2b00      	cmp	r3, #0
 800860c:	d104      	bne.n	8008618 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800860e:	2100      	movs	r1, #0
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f965 	bl	80088e0 <USB_SetDevSpeed>
 8008616:	e008      	b.n	800862a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008618:	2101      	movs	r1, #1
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f960 	bl	80088e0 <USB_SetDevSpeed>
 8008620:	e003      	b.n	800862a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008622:	2103      	movs	r1, #3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f95b 	bl	80088e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800862a:	2110      	movs	r1, #16
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f8f3 	bl	8008818 <USB_FlushTxFifo>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f91f 	bl	8008880 <USB_FlushRxFifo>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008652:	461a      	mov	r2, r3
 8008654:	2300      	movs	r3, #0
 8008656:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800865e:	461a      	mov	r2, r3
 8008660:	2300      	movs	r3, #0
 8008662:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866a:	461a      	mov	r2, r3
 800866c:	2300      	movs	r3, #0
 800866e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008670:	2300      	movs	r3, #0
 8008672:	613b      	str	r3, [r7, #16]
 8008674:	e043      	b.n	80086fe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800868c:	d118      	bne.n	80086c0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10a      	bne.n	80086aa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a0:	461a      	mov	r2, r3
 80086a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	e013      	b.n	80086d2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b6:	461a      	mov	r2, r3
 80086b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	e008      	b.n	80086d2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086cc:	461a      	mov	r2, r3
 80086ce:	2300      	movs	r3, #0
 80086d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086de:	461a      	mov	r2, r3
 80086e0:	2300      	movs	r3, #0
 80086e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f0:	461a      	mov	r2, r3
 80086f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	3301      	adds	r3, #1
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	429a      	cmp	r2, r3
 8008704:	d3b7      	bcc.n	8008676 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008706:	2300      	movs	r3, #0
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	e043      	b.n	8008794 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800871e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008722:	d118      	bne.n	8008756 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10a      	bne.n	8008740 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008736:	461a      	mov	r2, r3
 8008738:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	e013      	b.n	8008768 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874c:	461a      	mov	r2, r3
 800874e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	e008      	b.n	8008768 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4413      	add	r3, r2
 800875e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008762:	461a      	mov	r2, r3
 8008764:	2300      	movs	r3, #0
 8008766:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008774:	461a      	mov	r2, r3
 8008776:	2300      	movs	r3, #0
 8008778:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008786:	461a      	mov	r2, r3
 8008788:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800878c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	3301      	adds	r3, #1
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	429a      	cmp	r2, r3
 800879a:	d3b7      	bcc.n	800870c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80087bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80087be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d105      	bne.n	80087d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	f043 0210 	orr.w	r2, r3, #16
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699a      	ldr	r2, [r3, #24]
 80087d4:	4b0e      	ldr	r3, [pc, #56]	; (8008810 <USB_DevInit+0x2b4>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	f043 0208 	orr.w	r2, r3, #8
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80087ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d105      	bne.n	8008800 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	699a      	ldr	r2, [r3, #24]
 80087f8:	4b06      	ldr	r3, [pc, #24]	; (8008814 <USB_DevInit+0x2b8>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008800:	7dfb      	ldrb	r3, [r7, #23]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800880c:	b004      	add	sp, #16
 800880e:	4770      	bx	lr
 8008810:	803c3800 	.word	0x803c3800
 8008814:	40000004 	.word	0x40000004

08008818 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3301      	adds	r3, #1
 800882a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4a13      	ldr	r2, [pc, #76]	; (800887c <USB_FlushTxFifo+0x64>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d901      	bls.n	8008838 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e01b      	b.n	8008870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	daf2      	bge.n	8008826 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	019b      	lsls	r3, r3, #6
 8008848:	f043 0220 	orr.w	r2, r3, #32
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3301      	adds	r3, #1
 8008854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4a08      	ldr	r2, [pc, #32]	; (800887c <USB_FlushTxFifo+0x64>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d901      	bls.n	8008862 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e006      	b.n	8008870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b20      	cmp	r3, #32
 800886c:	d0f0      	beq.n	8008850 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	00030d40 	.word	0x00030d40

08008880 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3301      	adds	r3, #1
 8008890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4a11      	ldr	r2, [pc, #68]	; (80088dc <USB_FlushRxFifo+0x5c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d901      	bls.n	800889e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e018      	b.n	80088d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	daf2      	bge.n	800888c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2210      	movs	r2, #16
 80088ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3301      	adds	r3, #1
 80088b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4a08      	ldr	r2, [pc, #32]	; (80088dc <USB_FlushRxFifo+0x5c>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d901      	bls.n	80088c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e006      	b.n	80088d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	f003 0310 	and.w	r3, r3, #16
 80088ca:	2b10      	cmp	r3, #16
 80088cc:	d0f0      	beq.n	80088b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	00030d40 	.word	0x00030d40

080088e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	68f9      	ldr	r1, [r7, #12]
 80088fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008900:	4313      	orrs	r3, r2
 8008902:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008912:	b480      	push	{r7}
 8008914:	b087      	sub	sp, #28
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f003 0306 	and.w	r3, r3, #6
 800892a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d102      	bne.n	8008938 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008932:	2300      	movs	r3, #0
 8008934:	75fb      	strb	r3, [r7, #23]
 8008936:	e00a      	b.n	800894e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d002      	beq.n	8008944 <USB_GetDevSpeed+0x32>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b06      	cmp	r3, #6
 8008942:	d102      	bne.n	800894a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008944:	2302      	movs	r3, #2
 8008946:	75fb      	strb	r3, [r7, #23]
 8008948:	e001      	b.n	800894e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800894a:	230f      	movs	r3, #15
 800894c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800894e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008950:	4618      	mov	r0, r3
 8008952:	371c      	adds	r7, #28
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	785b      	ldrb	r3, [r3, #1]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d139      	bne.n	80089ec <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897e:	69da      	ldr	r2, [r3, #28]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	f003 030f 	and.w	r3, r3, #15
 8008988:	2101      	movs	r1, #1
 800898a:	fa01 f303 	lsl.w	r3, r1, r3
 800898e:	b29b      	uxth	r3, r3
 8008990:	68f9      	ldr	r1, [r7, #12]
 8008992:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008996:	4313      	orrs	r3, r2
 8008998:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d153      	bne.n	8008a58 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	791b      	ldrb	r3, [r3, #4]
 80089ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	059b      	lsls	r3, r3, #22
 80089d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089d4:	431a      	orrs	r2, r3
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	0159      	lsls	r1, r3, #5
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	440b      	add	r3, r1
 80089de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e2:	4619      	mov	r1, r3
 80089e4:	4b20      	ldr	r3, [pc, #128]	; (8008a68 <USB_ActivateEndpoint+0x10c>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	600b      	str	r3, [r1, #0]
 80089ea:	e035      	b.n	8008a58 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f2:	69da      	ldr	r2, [r3, #28]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	f003 030f 	and.w	r3, r3, #15
 80089fc:	2101      	movs	r1, #1
 80089fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008a02:	041b      	lsls	r3, r3, #16
 8008a04:	68f9      	ldr	r1, [r7, #12]
 8008a06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d119      	bne.n	8008a58 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	791b      	ldrb	r3, [r3, #4]
 8008a3e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a40:	430b      	orrs	r3, r1
 8008a42:	431a      	orrs	r2, r3
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	0159      	lsls	r1, r3, #5
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	440b      	add	r3, r1
 8008a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a50:	4619      	mov	r1, r3
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <USB_ActivateEndpoint+0x10c>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	10008000 	.word	0x10008000

08008a6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08a      	sub	sp, #40	; 0x28
 8008a70:	af02      	add	r7, sp, #8
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4613      	mov	r3, r2
 8008a78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	785b      	ldrb	r3, [r3, #1]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	f040 8181 	bne.w	8008d90 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d132      	bne.n	8008afc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa2:	691a      	ldr	r2, [r3, #16]
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	0159      	lsls	r1, r3, #5
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	440b      	add	r3, r1
 8008aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4ba5      	ldr	r3, [pc, #660]	; (8008d48 <USB_EPStartXfer+0x2dc>)
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	0151      	lsls	r1, r2, #5
 8008aca:	69fa      	ldr	r2, [r7, #28]
 8008acc:	440a      	add	r2, r1
 8008ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ad6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae4:	691a      	ldr	r2, [r3, #16]
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	0159      	lsls	r1, r3, #5
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	440b      	add	r3, r1
 8008aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af2:	4619      	mov	r1, r3
 8008af4:	4b95      	ldr	r3, [pc, #596]	; (8008d4c <USB_EPStartXfer+0x2e0>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	610b      	str	r3, [r1, #16]
 8008afa:	e092      	b.n	8008c22 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b08:	691a      	ldr	r2, [r3, #16]
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	0159      	lsls	r1, r3, #5
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	440b      	add	r3, r1
 8008b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b16:	4619      	mov	r1, r3
 8008b18:	4b8c      	ldr	r3, [pc, #560]	; (8008d4c <USB_EPStartXfer+0x2e0>)
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2a:	691a      	ldr	r2, [r3, #16]
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	0159      	lsls	r1, r3, #5
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	440b      	add	r3, r1
 8008b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4b83      	ldr	r3, [pc, #524]	; (8008d48 <USB_EPStartXfer+0x2dc>)
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d11a      	bne.n	8008b7c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	691a      	ldr	r2, [r3, #16]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d903      	bls.n	8008b5a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	689a      	ldr	r2, [r3, #8]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b78:	6113      	str	r3, [r2, #16]
 8008b7a:	e01b      	b.n	8008bb4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b88:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6919      	ldr	r1, [r3, #16]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	440b      	add	r3, r1
 8008b94:	1e59      	subs	r1, r3, #1
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b9e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008ba0:	4b6b      	ldr	r3, [pc, #428]	; (8008d50 <USB_EPStartXfer+0x2e4>)
 8008ba2:	400b      	ands	r3, r1
 8008ba4:	69b9      	ldr	r1, [r7, #24]
 8008ba6:	0148      	lsls	r0, r1, #5
 8008ba8:	69f9      	ldr	r1, [r7, #28]
 8008baa:	4401      	add	r1, r0
 8008bac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc0:	691a      	ldr	r2, [r3, #16]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bca:	69b9      	ldr	r1, [r7, #24]
 8008bcc:	0148      	lsls	r0, r1, #5
 8008bce:	69f9      	ldr	r1, [r7, #28]
 8008bd0:	4401      	add	r1, r0
 8008bd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	791b      	ldrb	r3, [r3, #4]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d11f      	bne.n	8008c22 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	0151      	lsls	r1, r2, #5
 8008bf4:	69fa      	ldr	r2, [r7, #28]
 8008bf6:	440a      	add	r2, r1
 8008bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008c00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	0151      	lsls	r1, r2, #5
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	440a      	add	r2, r1
 8008c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008c22:	79fb      	ldrb	r3, [r7, #7]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d14b      	bne.n	8008cc0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d009      	beq.n	8008c44 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	791b      	ldrb	r3, [r3, #4]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d128      	bne.n	8008c9e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d110      	bne.n	8008c7e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69ba      	ldr	r2, [r7, #24]
 8008c6c:	0151      	lsls	r1, r2, #5
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	440a      	add	r2, r1
 8008c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	e00f      	b.n	8008c9e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	0151      	lsls	r1, r2, #5
 8008cb0:	69fa      	ldr	r2, [r7, #28]
 8008cb2:	440a      	add	r2, r1
 8008cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	e16a      	b.n	8008f96 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	0151      	lsls	r1, r2, #5
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	440a      	add	r2, r1
 8008cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008cde:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	791b      	ldrb	r3, [r3, #4]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d015      	beq.n	8008d14 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 8152 	beq.w	8008f96 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	f003 030f 	and.w	r3, r3, #15
 8008d02:	2101      	movs	r1, #1
 8008d04:	fa01 f303 	lsl.w	r3, r1, r3
 8008d08:	69f9      	ldr	r1, [r7, #28]
 8008d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	634b      	str	r3, [r1, #52]	; 0x34
 8008d12:	e140      	b.n	8008f96 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d117      	bne.n	8008d54 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	0151      	lsls	r1, r2, #5
 8008d36:	69fa      	ldr	r2, [r7, #28]
 8008d38:	440a      	add	r2, r1
 8008d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	e016      	b.n	8008d74 <USB_EPStartXfer+0x308>
 8008d46:	bf00      	nop
 8008d48:	e007ffff 	.word	0xe007ffff
 8008d4c:	fff80000 	.word	0xfff80000
 8008d50:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	0151      	lsls	r1, r2, #5
 8008d66:	69fa      	ldr	r2, [r7, #28]
 8008d68:	440a      	add	r2, r1
 8008d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d72:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	68d9      	ldr	r1, [r3, #12]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	781a      	ldrb	r2, [r3, #0]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	b298      	uxth	r0, r3
 8008d82:	79fb      	ldrb	r3, [r7, #7]
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	4603      	mov	r3, r0
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 f9b9 	bl	8009100 <USB_WritePacket>
 8008d8e:	e102      	b.n	8008f96 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9c:	691a      	ldr	r2, [r3, #16]
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	0159      	lsls	r1, r3, #5
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	440b      	add	r3, r1
 8008da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008daa:	4619      	mov	r1, r3
 8008dac:	4b7c      	ldr	r3, [pc, #496]	; (8008fa0 <USB_EPStartXfer+0x534>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dbe:	691a      	ldr	r2, [r3, #16]
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	0159      	lsls	r1, r3, #5
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	440b      	add	r3, r1
 8008dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4b75      	ldr	r3, [pc, #468]	; (8008fa4 <USB_EPStartXfer+0x538>)
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d12f      	bne.n	8008e3a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	689a      	ldr	r2, [r3, #8]
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	689a      	ldr	r2, [r3, #8]
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	015a      	lsls	r2, r3, #5
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfe:	691a      	ldr	r2, [r3, #16]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e08:	69b9      	ldr	r1, [r7, #24]
 8008e0a:	0148      	lsls	r0, r1, #5
 8008e0c:	69f9      	ldr	r1, [r7, #28]
 8008e0e:	4401      	add	r1, r0
 8008e10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e14:	4313      	orrs	r3, r2
 8008e16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	0151      	lsls	r1, r2, #5
 8008e2a:	69fa      	ldr	r2, [r7, #28]
 8008e2c:	440a      	add	r2, r1
 8008e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e36:	6113      	str	r3, [r2, #16]
 8008e38:	e05f      	b.n	8008efa <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d123      	bne.n	8008e8a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e58:	69b9      	ldr	r1, [r7, #24]
 8008e5a:	0148      	lsls	r0, r1, #5
 8008e5c:	69f9      	ldr	r1, [r7, #28]
 8008e5e:	4401      	add	r1, r0
 8008e60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e64:	4313      	orrs	r3, r2
 8008e66:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	0151      	lsls	r1, r2, #5
 8008e7a:	69fa      	ldr	r2, [r7, #28]
 8008e7c:	440a      	add	r2, r1
 8008e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e86:	6113      	str	r3, [r2, #16]
 8008e88:	e037      	b.n	8008efa <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	691a      	ldr	r2, [r3, #16]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	4413      	add	r3, r2
 8008e94:	1e5a      	subs	r2, r3, #1
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e9e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	8afa      	ldrh	r2, [r7, #22]
 8008ea6:	fb03 f202 	mul.w	r2, r3, r2
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eba:	691a      	ldr	r2, [r3, #16]
 8008ebc:	8afb      	ldrh	r3, [r7, #22]
 8008ebe:	04d9      	lsls	r1, r3, #19
 8008ec0:	4b39      	ldr	r3, [pc, #228]	; (8008fa8 <USB_EPStartXfer+0x53c>)
 8008ec2:	400b      	ands	r3, r1
 8008ec4:	69b9      	ldr	r1, [r7, #24]
 8008ec6:	0148      	lsls	r0, r1, #5
 8008ec8:	69f9      	ldr	r1, [r7, #28]
 8008eca:	4401      	add	r1, r0
 8008ecc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee0:	691a      	ldr	r2, [r3, #16]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eea:	69b9      	ldr	r1, [r7, #24]
 8008eec:	0148      	lsls	r0, r1, #5
 8008eee:	69f9      	ldr	r1, [r7, #28]
 8008ef0:	4401      	add	r1, r0
 8008ef2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008efa:	79fb      	ldrb	r3, [r7, #7]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d10d      	bne.n	8008f1c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d009      	beq.n	8008f1c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	68d9      	ldr	r1, [r3, #12]
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f18:	460a      	mov	r2, r1
 8008f1a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	791b      	ldrb	r3, [r3, #4]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d128      	bne.n	8008f76 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d110      	bne.n	8008f56 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69ba      	ldr	r2, [r7, #24]
 8008f44:	0151      	lsls	r1, r2, #5
 8008f46:	69fa      	ldr	r2, [r7, #28]
 8008f48:	440a      	add	r2, r1
 8008f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	e00f      	b.n	8008f76 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	0151      	lsls	r1, r2, #5
 8008f68:	69fa      	ldr	r2, [r7, #28]
 8008f6a:	440a      	add	r2, r1
 8008f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f74:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	69fa      	ldr	r2, [r7, #28]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3720      	adds	r7, #32
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	fff80000 	.word	0xfff80000
 8008fa4:	e007ffff 	.word	0xe007ffff
 8008fa8:	1ff80000 	.word	0x1ff80000

08008fac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	785b      	ldrb	r3, [r3, #1]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d14a      	bne.n	8009060 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fe2:	f040 8086 	bne.w	80090f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	7812      	ldrb	r2, [r2, #0]
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009004:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009008:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	7812      	ldrb	r2, [r2, #0]
 800901e:	0151      	lsls	r1, r2, #5
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	440a      	add	r2, r1
 8009024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800902c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	3301      	adds	r3, #1
 8009032:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f242 7210 	movw	r2, #10000	; 0x2710
 800903a:	4293      	cmp	r3, r2
 800903c:	d902      	bls.n	8009044 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	75fb      	strb	r3, [r7, #23]
          break;
 8009042:	e056      	b.n	80090f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	4413      	add	r3, r2
 800904e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800905c:	d0e7      	beq.n	800902e <USB_EPStopXfer+0x82>
 800905e:	e048      	b.n	80090f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	4413      	add	r3, r2
 800906a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009078:	d13b      	bne.n	80090f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	7812      	ldrb	r2, [r2, #0]
 800908e:	0151      	lsls	r1, r2, #5
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	440a      	add	r2, r1
 8009094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009098:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800909c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	7812      	ldrb	r2, [r2, #0]
 80090b2:	0151      	lsls	r1, r2, #5
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	440a      	add	r2, r1
 80090b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3301      	adds	r3, #1
 80090c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d902      	bls.n	80090d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	75fb      	strb	r3, [r7, #23]
          break;
 80090d6:	e00c      	b.n	80090f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090f0:	d0e7      	beq.n	80090c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	371c      	adds	r7, #28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009100:	b480      	push	{r7}
 8009102:	b089      	sub	sp, #36	; 0x24
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	4611      	mov	r1, r2
 800910c:	461a      	mov	r2, r3
 800910e:	460b      	mov	r3, r1
 8009110:	71fb      	strb	r3, [r7, #7]
 8009112:	4613      	mov	r3, r2
 8009114:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800911e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009122:	2b00      	cmp	r3, #0
 8009124:	d123      	bne.n	800916e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009126:	88bb      	ldrh	r3, [r7, #4]
 8009128:	3303      	adds	r3, #3
 800912a:	089b      	lsrs	r3, r3, #2
 800912c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800912e:	2300      	movs	r3, #0
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	e018      	b.n	8009166 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	031a      	lsls	r2, r3, #12
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	4413      	add	r3, r2
 800913c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009140:	461a      	mov	r2, r3
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	3301      	adds	r3, #1
 800914c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	3301      	adds	r3, #1
 8009152:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	3301      	adds	r3, #1
 8009158:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	3301      	adds	r3, #1
 800915e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	3301      	adds	r3, #1
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	429a      	cmp	r2, r3
 800916c:	d3e2      	bcc.n	8009134 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3724      	adds	r7, #36	; 0x24
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800917c:	b480      	push	{r7}
 800917e:	b08b      	sub	sp, #44	; 0x2c
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	4613      	mov	r3, r2
 8009188:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009192:	88fb      	ldrh	r3, [r7, #6]
 8009194:	089b      	lsrs	r3, r3, #2
 8009196:	b29b      	uxth	r3, r3
 8009198:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800919a:	88fb      	ldrh	r3, [r7, #6]
 800919c:	f003 0303 	and.w	r3, r3, #3
 80091a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80091a2:	2300      	movs	r3, #0
 80091a4:	623b      	str	r3, [r7, #32]
 80091a6:	e014      	b.n	80091d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	3301      	adds	r3, #1
 80091b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	3301      	adds	r3, #1
 80091be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	3301      	adds	r3, #1
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	3301      	adds	r3, #1
 80091ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	3301      	adds	r3, #1
 80091d0:	623b      	str	r3, [r7, #32]
 80091d2:	6a3a      	ldr	r2, [r7, #32]
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d3e6      	bcc.n	80091a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80091da:	8bfb      	ldrh	r3, [r7, #30]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d01e      	beq.n	800921e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80091e0:	2300      	movs	r3, #0
 80091e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ea:	461a      	mov	r2, r3
 80091ec:	f107 0310 	add.w	r3, r7, #16
 80091f0:	6812      	ldr	r2, [r2, #0]
 80091f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009200:	b2da      	uxtb	r2, r3
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	701a      	strb	r2, [r3, #0]
      i++;
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	3301      	adds	r3, #1
 800920a:	623b      	str	r3, [r7, #32]
      pDest++;
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	3301      	adds	r3, #1
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009212:	8bfb      	ldrh	r3, [r7, #30]
 8009214:	3b01      	subs	r3, #1
 8009216:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009218:	8bfb      	ldrh	r3, [r7, #30]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1ea      	bne.n	80091f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009220:	4618      	mov	r0, r3
 8009222:	372c      	adds	r7, #44	; 0x2c
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d12c      	bne.n	80092a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4413      	add	r3, r2
 8009250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	db12      	blt.n	8009280 <USB_EPSetStall+0x54>
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00f      	beq.n	8009280 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800927a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800927e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	0151      	lsls	r1, r2, #5
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	440a      	add	r2, r1
 8009296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800929a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	e02b      	b.n	80092fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	db12      	blt.n	80092da <USB_EPSetStall+0xae>
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00f      	beq.n	80092da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	0151      	lsls	r1, r2, #5
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	440a      	add	r2, r1
 80092d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	0151      	lsls	r1, r2, #5
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	440a      	add	r2, r1
 80092f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	785b      	ldrb	r3, [r3, #1]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d128      	bne.n	8009376 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009342:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	791b      	ldrb	r3, [r3, #4]
 8009348:	2b03      	cmp	r3, #3
 800934a:	d003      	beq.n	8009354 <USB_EPClearStall+0x4c>
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	791b      	ldrb	r3, [r3, #4]
 8009350:	2b02      	cmp	r3, #2
 8009352:	d138      	bne.n	80093c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	0151      	lsls	r1, r2, #5
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	440a      	add	r2, r1
 800936a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800936e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009372:	6013      	str	r3, [r2, #0]
 8009374:	e027      	b.n	80093c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	0151      	lsls	r1, r2, #5
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	440a      	add	r2, r1
 800938c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009390:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009394:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	791b      	ldrb	r3, [r3, #4]
 800939a:	2b03      	cmp	r3, #3
 800939c:	d003      	beq.n	80093a6 <USB_EPClearStall+0x9e>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	791b      	ldrb	r3, [r3, #4]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d10f      	bne.n	80093c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	015a      	lsls	r2, r3, #5
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	0151      	lsls	r1, r2, #5
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	440a      	add	r2, r1
 80093bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	460b      	mov	r3, r1
 80093de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80093f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	011b      	lsls	r3, r3, #4
 8009404:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009408:	68f9      	ldr	r1, [r7, #12]
 800940a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800940e:	4313      	orrs	r3, r2
 8009410:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800943a:	f023 0303 	bic.w	r3, r3, #3
 800943e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800944e:	f023 0302 	bic.w	r3, r3, #2
 8009452:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009462:	b480      	push	{r7}
 8009464:	b085      	sub	sp, #20
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800947c:	f023 0303 	bic.w	r3, r3, #3
 8009480:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009490:	f043 0302 	orr.w	r3, r3, #2
 8009494:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4013      	ands	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80094bc:	68fb      	ldr	r3, [r7, #12]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b085      	sub	sp, #20
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e6:	69db      	ldr	r3, [r3, #28]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	4013      	ands	r3, r2
 80094ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	0c1b      	lsrs	r3, r3, #16
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3714      	adds	r7, #20
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094fe:	b480      	push	{r7}
 8009500:	b085      	sub	sp, #20
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	4013      	ands	r3, r2
 8009520:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	b29b      	uxth	r3, r3
}
 8009526:	4618      	mov	r0, r3
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009532:	b480      	push	{r7}
 8009534:	b085      	sub	sp, #20
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	460b      	mov	r3, r1
 800953c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009542:	78fb      	ldrb	r3, [r7, #3]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4413      	add	r3, r2
 800954a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	4013      	ands	r3, r2
 800955e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009560:	68bb      	ldr	r3, [r7, #8]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800956e:	b480      	push	{r7}
 8009570:	b087      	sub	sp, #28
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	460b      	mov	r3, r1
 8009578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800958e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009590:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009592:	78fb      	ldrb	r3, [r7, #3]
 8009594:	f003 030f 	and.w	r3, r3, #15
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	fa22 f303 	lsr.w	r3, r2, r3
 800959e:	01db      	lsls	r3, r3, #7
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	4013      	ands	r3, r2
 80095ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095bc:	68bb      	ldr	r3, [r7, #8]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	371c      	adds	r7, #28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b083      	sub	sp, #12
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	f003 0301 	and.w	r3, r3, #1
}
 80095da:	4618      	mov	r0, r3
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
	...

080095e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009602:	4619      	mov	r1, r3
 8009604:	4b09      	ldr	r3, [pc, #36]	; (800962c <USB_ActivateSetup+0x44>)
 8009606:	4013      	ands	r3, r2
 8009608:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800961c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	fffff800 	.word	0xfffff800

08009630 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	460b      	mov	r3, r1
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	333c      	adds	r3, #60	; 0x3c
 8009646:	3304      	adds	r3, #4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	4a26      	ldr	r2, [pc, #152]	; (80096e8 <USB_EP0_OutStart+0xb8>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d90a      	bls.n	800966a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009664:	d101      	bne.n	800966a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	e037      	b.n	80096da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009670:	461a      	mov	r2, r3
 8009672:	2300      	movs	r3, #0
 8009674:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009688:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009698:	f043 0318 	orr.w	r3, r3, #24
 800969c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80096b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80096b2:	7afb      	ldrb	r3, [r7, #11]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d10f      	bne.n	80096d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096be:	461a      	mov	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80096d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	4f54300a 	.word	0x4f54300a

080096ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096f4:	2300      	movs	r3, #0
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3301      	adds	r3, #1
 80096fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4a13      	ldr	r2, [pc, #76]	; (8009750 <USB_CoreReset+0x64>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d901      	bls.n	800970a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e01b      	b.n	8009742 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	daf2      	bge.n	80096f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009712:	2300      	movs	r3, #0
 8009714:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	f043 0201 	orr.w	r2, r3, #1
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3301      	adds	r3, #1
 8009726:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4a09      	ldr	r2, [pc, #36]	; (8009750 <USB_CoreReset+0x64>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d901      	bls.n	8009734 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009730:	2303      	movs	r3, #3
 8009732:	e006      	b.n	8009742 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	2b01      	cmp	r3, #1
 800973e:	d0f0      	beq.n	8009722 <USB_CoreReset+0x36>

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	00030d40 	.word	0x00030d40

08009754 <__NVIC_SystemReset>:
{
 8009754:	b480      	push	{r7}
 8009756:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009758:	f3bf 8f4f 	dsb	sy
}
 800975c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <__NVIC_SystemReset+0x24>)
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009766:	4904      	ldr	r1, [pc, #16]	; (8009778 <__NVIC_SystemReset+0x24>)
 8009768:	4b04      	ldr	r3, [pc, #16]	; (800977c <__NVIC_SystemReset+0x28>)
 800976a:	4313      	orrs	r3, r2
 800976c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800976e:	f3bf 8f4f 	dsb	sy
}
 8009772:	bf00      	nop
    __NOP();
 8009774:	bf00      	nop
 8009776:	e7fd      	b.n	8009774 <__NVIC_SystemReset+0x20>
 8009778:	e000ed00 	.word	0xe000ed00
 800977c:	05fa0004 	.word	0x05fa0004

08009780 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800978c:	f240 401c 	movw	r0, #1052	; 0x41c
 8009790:	f002 fe2c 	bl	800c3ec <USBD_static_malloc>
 8009794:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d109      	bne.n	80097b0 <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	32b0      	adds	r2, #176	; 0xb0
 80097a6:	2100      	movs	r1, #0
 80097a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80097ac:	2302      	movs	r3, #2
 80097ae:	e052      	b.n	8009856 <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	32b0      	adds	r2, #176	; 0xb0
 80097ba:	68f9      	ldr	r1, [r7, #12]
 80097bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	32b0      	adds	r2, #176	; 0xb0
 80097ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80097e2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2202      	movs	r2, #2
 8009802:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2202      	movs	r2, #2
 800982a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	33b0      	adds	r3, #176	; 0xb0
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	4798      	blx	r3
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 8009850:	2303      	movs	r3, #3
 8009852:	e000      	b.n	8009856 <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	460b      	mov	r3, r1
 8009868:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	32b0      	adds	r2, #176	; 0xb0
 8009874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d101      	bne.n	8009880 <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 800987c:	2302      	movs	r3, #2
 800987e:	e03c      	b.n	80098fa <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	32b0      	adds	r2, #176	; 0xb0
 800988a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988e:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2202      	movs	r2, #2
 80098a4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	33b0      	adds	r3, #176	; 0xb0
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	32b0      	adds	r2, #176	; 0xb0
 80098d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098da:	4618      	mov	r0, r3
 80098dc:	f002 fd94 	bl	800c408 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	32b0      	adds	r2, #176	; 0xb0
 80098ea:	2100      	movs	r1, #0
 80098ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
	...

08009904 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	32b0      	adds	r2, #176	; 0xb0
 8009918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 8009922:	2300      	movs	r3, #0
 8009924:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800992c:	2303      	movs	r3, #3
 800992e:	e0e8      	b.n	8009b02 <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009938:	2b00      	cmp	r3, #0
 800993a:	d03e      	beq.n	80099ba <USBD_DFU_Setup+0xb6>
 800993c:	2b20      	cmp	r3, #32
 800993e:	f040 80d8 	bne.w	8009af2 <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	785b      	ldrb	r3, [r3, #1]
 8009946:	2b06      	cmp	r3, #6
 8009948:	d82f      	bhi.n	80099aa <USBD_DFU_Setup+0xa6>
 800994a:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <USBD_DFU_Setup+0x4c>)
 800994c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009950:	080099a1 	.word	0x080099a1
 8009954:	0800996d 	.word	0x0800996d
 8009958:	08009977 	.word	0x08009977
 800995c:	08009981 	.word	0x08009981
 8009960:	08009989 	.word	0x08009989
 8009964:	08009991 	.word	0x08009991
 8009968:	08009999 	.word	0x08009999
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 faa0 	bl	8009eb4 <DFU_Download>
          break;
 8009974:	e020      	b.n	80099b8 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fb11 	bl	8009fa0 <DFU_Upload>
          break;
 800997e:	e01b      	b.n	80099b8 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fbf5 	bl	800a170 <DFU_GetStatus>
          break;
 8009986:	e017      	b.n	80099b8 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fcbd 	bl	800a308 <DFU_ClearStatus>
          break;
 800998e:	e013      	b.n	80099b8 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fd11 	bl	800a3b8 <DFU_GetState>
          break;
 8009996:	e00f      	b.n	80099b8 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fd29 	bl	800a3f0 <DFU_Abort>
          break;
 800999e:	e00b      	b.n	80099b8 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fa16 	bl	8009dd4 <DFU_Detach>
          break;
 80099a8:	e006      	b.n	80099b8 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f002 f80c 	bl	800b9ca <USBD_CtlError>
          ret = USBD_FAIL;
 80099b2:	2303      	movs	r3, #3
 80099b4:	75fb      	strb	r3, [r7, #23]
          break;
 80099b6:	bf00      	nop
      }
      break;
 80099b8:	e0a2      	b.n	8009b00 <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	785b      	ldrb	r3, [r3, #1]
 80099be:	2b0b      	cmp	r3, #11
 80099c0:	f200 808c 	bhi.w	8009adc <USBD_DFU_Setup+0x1d8>
 80099c4:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <USBD_DFU_Setup+0xc8>)
 80099c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ca:	bf00      	nop
 80099cc:	080099fd 	.word	0x080099fd
 80099d0:	08009aeb 	.word	0x08009aeb
 80099d4:	08009add 	.word	0x08009add
 80099d8:	08009add 	.word	0x08009add
 80099dc:	08009add 	.word	0x08009add
 80099e0:	08009add 	.word	0x08009add
 80099e4:	08009a27 	.word	0x08009a27
 80099e8:	08009add 	.word	0x08009add
 80099ec:	08009add 	.word	0x08009add
 80099f0:	08009add 	.word	0x08009add
 80099f4:	08009a6f 	.word	0x08009a6f
 80099f8:	08009a9b 	.word	0x08009a9b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	d107      	bne.n	8009a18 <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a08:	f107 0308 	add.w	r3, r7, #8
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f002 f84b 	bl	800baac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a16:	e06b      	b.n	8009af0 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f001 ffd5 	bl	800b9ca <USBD_CtlError>
            ret = USBD_FAIL;
 8009a20:	2303      	movs	r3, #3
 8009a22:	75fb      	strb	r3, [r7, #23]
          break;
 8009a24:	e064      	b.n	8009af0 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	885b      	ldrh	r3, [r3, #2]
 8009a2a:	0a1b      	lsrs	r3, r3, #8
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	2b21      	cmp	r3, #33	; 0x21
 8009a30:	d15d      	bne.n	8009aee <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 fd87 	bl	800a54c <USBD_DFU_GetDfuFuncDesc>
 8009a3e:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00c      	beq.n	8009a60 <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	88db      	ldrh	r3, [r3, #6]
 8009a4a:	2b09      	cmp	r3, #9
 8009a4c:	bf28      	it	cs
 8009a4e:	2309      	movcs	r3, #9
 8009a50:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a52:	897b      	ldrh	r3, [r7, #10]
 8009a54:	461a      	mov	r2, r3
 8009a56:	68f9      	ldr	r1, [r7, #12]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f002 f827 	bl	800baac <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8009a5e:	e046      	b.n	8009aee <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f001 ffb1 	bl	800b9ca <USBD_CtlError>
              ret = USBD_FAIL;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	75fb      	strb	r3, [r7, #23]
          break;
 8009a6c:	e03f      	b.n	8009aee <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d108      	bne.n	8009a8c <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a80:	2201      	movs	r2, #1
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f002 f811 	bl	800baac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a8a:	e031      	b.n	8009af0 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 ff9b 	bl	800b9ca <USBD_CtlError>
            ret = USBD_FAIL;
 8009a94:	2303      	movs	r3, #3
 8009a96:	75fb      	strb	r3, [r7, #23]
          break;
 8009a98:	e02a      	b.n	8009af0 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	885b      	ldrh	r3, [r3, #2]
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d114      	bne.n	8009ace <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d107      	bne.n	8009ac0 <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	885b      	ldrh	r3, [r3, #2]
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009abe:	e017      	b.n	8009af0 <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f001 ff81 	bl	800b9ca <USBD_CtlError>
              ret = USBD_FAIL;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	75fb      	strb	r3, [r7, #23]
          break;
 8009acc:	e010      	b.n	8009af0 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f001 ff7a 	bl	800b9ca <USBD_CtlError>
            ret = USBD_FAIL;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8009ada:	e009      	b.n	8009af0 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 ff73 	bl	800b9ca <USBD_CtlError>
          ret = USBD_FAIL;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	75fb      	strb	r3, [r7, #23]
          break;
 8009ae8:	e002      	b.n	8009af0 <USBD_DFU_Setup+0x1ec>
          break;
 8009aea:	bf00      	nop
 8009aec:	e008      	b.n	8009b00 <USBD_DFU_Setup+0x1fc>
          break;
 8009aee:	bf00      	nop
      }
      break;
 8009af0:	e006      	b.n	8009b00 <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f001 ff68 	bl	800b9ca <USBD_CtlError>
      ret = USBD_FAIL;
 8009afa:	2303      	movs	r3, #3
 8009afc:	75fb      	strb	r3, [r7, #23]
      break;
 8009afe:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop

08009b0c <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	221b      	movs	r2, #27
 8009b18:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8009b1a:	4b03      	ldr	r3, [pc, #12]	; (8009b28 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	24000068 	.word	0x24000068

08009b2c <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b088      	sub	sp, #32
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	32b0      	adds	r2, #176	; 0xb0
 8009b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b58:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	33b0      	adds	r3, #176	; 0xb0
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e0ce      	b.n	8009d14 <USBD_DFU_EP0_TxReady+0x1d2>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	f040 80bd 	bne.w	8009cfc <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d17c      	bne.n	8009c86 <USBD_DFU_EP0_TxReady+0x144>
    {
      if (hdfu->wlength == 1U)
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	f000 8093 	beq.w	8009cbe <USBD_DFU_EP0_TxReady+0x17c>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b9e:	2b05      	cmp	r3, #5
 8009ba0:	d15e      	bne.n	8009c60 <USBD_DFU_EP0_TxReady+0x11e>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	2b21      	cmp	r3, #33	; 0x21
 8009ba8:	d124      	bne.n	8009bf4 <USBD_DFU_EP0_TxReady+0xb2>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	785b      	ldrb	r3, [r3, #1]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	789b      	ldrb	r3, [r3, #2]
 8009bc0:	021b      	lsls	r3, r3, #8
 8009bc2:	441a      	add	r2, r3
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	78db      	ldrb	r3, [r3, #3]
 8009bd4:	041b      	lsls	r3, r3, #16
 8009bd6:	441a      	add	r2, r3
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	791b      	ldrb	r3, [r3, #4]
 8009be8:	061b      	lsls	r3, r3, #24
 8009bea:	441a      	add	r2, r3
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8009bf2:	e064      	b.n	8009cbe <USBD_DFU_EP0_TxReady+0x17c>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b41      	cmp	r3, #65	; 0x41
 8009bfa:	d12f      	bne.n	8009c5c <USBD_DFU_EP0_TxReady+0x11a>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	461a      	mov	r2, r3
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	789b      	ldrb	r3, [r3, #2]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	441a      	add	r2, r3
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	78db      	ldrb	r3, [r3, #3]
 8009c26:	041b      	lsls	r3, r3, #16
 8009c28:	441a      	add	r2, r3
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	791b      	ldrb	r3, [r3, #4]
 8009c3a:	061b      	lsls	r3, r3, #24
 8009c3c:	441a      	add	r2, r3
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	69fa      	ldr	r2, [r7, #28]
 8009c4a:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8009c4e:	4610      	mov	r0, r2
 8009c50:	4798      	blx	r3
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d032      	beq.n	8009cbe <USBD_DFU_EP0_TxReady+0x17c>
          {
            return (uint8_t)USBD_FAIL;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e05b      	b.n	8009d14 <USBD_DFU_EP0_TxReady+0x1d2>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e059      	b.n	8009d14 <USBD_DFU_EP0_TxReady+0x1d2>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8009c74:	2301      	movs	r3, #1
 8009c76:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8009c78:	f107 030c 	add.w	r3, r7, #12
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f001 fea3 	bl	800b9ca <USBD_CtlError>
 8009c84:	e01b      	b.n	8009cbe <USBD_DFU_EP0_TxReady+0x17c>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d916      	bls.n	8009cbe <USBD_DFU_EP0_TxReady+0x17c>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009c96:	3b02      	subs	r3, #2
 8009c98:	029a      	lsls	r2, r3, #10
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009ca0:	4413      	add	r3, r2
 8009ca2:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	69f8      	ldr	r0, [r7, #28]
 8009caa:	6979      	ldr	r1, [r7, #20]
 8009cac:	69fa      	ldr	r2, [r7, #28]
 8009cae:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8009cb2:	4798      	blx	r3
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <USBD_DFU_EP0_TxReady+0x17c>
        {
          return (uint8_t)USBD_FAIL;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e02a      	b.n	8009d14 <USBD_DFU_EP0_TxReady+0x1d2>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	2203      	movs	r2, #3
 8009cd2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8009cfa:	e00a      	b.n	8009d12 <USBD_DFU_EP0_TxReady+0x1d0>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009d02:	2b07      	cmp	r3, #7
 8009d04:	d103      	bne.n	8009d0e <USBD_DFU_EP0_TxReady+0x1cc>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fbc7 	bl	800a49a <DFU_Leave>
 8009d0c:	e001      	b.n	8009d12 <USBD_DFU_EP0_TxReady+0x1d0>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e000      	b.n	8009d14 <USBD_DFU_EP0_TxReady+0x1d2>
  }

  return (uint8_t)USBD_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3720      	adds	r7, #32
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
	...

08009d34 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	220a      	movs	r2, #10
 8009d40:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8009d42:	4b03      	ldr	r3, [pc, #12]	; (8009d50 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	24000084 	.word	0x24000084

08009d54 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	607a      	str	r2, [r7, #4]
 8009d60:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	33b0      	adds	r3, #176	; 0xb0
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8009d74:	7afb      	ldrb	r3, [r7, #11]
 8009d76:	2b06      	cmp	r3, #6
 8009d78:	d808      	bhi.n	8009d8c <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	4906      	ldr	r1, [pc, #24]	; (8009d9c <USBD_DFU_GetUsrStringDesc+0x48>)
 8009d82:	4618      	mov	r0, r3
 8009d84:	f001 fe32 	bl	800b9ec <USBD_GetString>
    return USBD_StrDesc;
 8009d88:	4b04      	ldr	r3, [pc, #16]	; (8009d9c <USBD_DFU_GetUsrStringDesc+0x48>)
 8009d8a:	e002      	b.n	8009d92 <USBD_DFU_GetUsrStringDesc+0x3e>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    length = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	607b      	str	r3, [r7, #4]
    return NULL;
 8009d90:	2300      	movs	r3, #0
  }
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	24000254 	.word	0x24000254

08009da0 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e009      	b.n	8009dc8 <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	33b0      	adds	r3, #176	; 0xb0
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	32b0      	adds	r2, #176	; 0xb0
 8009de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dec:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 fba9 	bl	800a54c <USBD_DFU_GetDfuFuncDesc>
 8009dfa:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d054      	beq.n	8009eac <DFU_Detach+0xd8>
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d051      	beq.n	8009eac <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d013      	beq.n	8009e3a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d00e      	beq.n	8009e3a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8009e22:	2b05      	cmp	r3, #5
 8009e24:	d009      	beq.n	8009e3a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8009e2c:	2b06      	cmp	r3, #6
 8009e2e:	d004      	beq.n	8009e3a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8009e36:	2b09      	cmp	r3, #9
 8009e38:	d125      	bne.n	8009e86 <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2202      	movs	r2, #2
 8009e3e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	789b      	ldrb	r3, [r3, #2]
 8009e8a:	f003 0308 	and.w	r3, r3, #8
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d006      	beq.n	8009ea0 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fbfc 	bl	800a690 <USBD_Stop>
    (void)USBD_Start(pdev);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fbed 	bl	800a678 <USBD_Start>
 8009e9e:	e006      	b.n	8009eae <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	885b      	ldrh	r3, [r3, #2]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7f7 ff2b 	bl	8001d00 <HAL_Delay>
 8009eaa:	e000      	b.n	8009eae <DFU_Detach+0xda>
    return;
 8009eac:	bf00      	nop
  }
}
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	32b0      	adds	r2, #176	; 0xb0
 8009ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ecc:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d061      	beq.n	8009f98 <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	88db      	ldrh	r3, [r3, #6]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d033      	beq.n	8009f44 <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d004      	beq.n	8009ef0 <DFU_Download+0x3c>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009eec:	2b05      	cmp	r3, #5
 8009eee:	d124      	bne.n	8009f3a <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	885b      	ldrh	r3, [r3, #2]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	88db      	ldrh	r3, [r3, #6]
 8009f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f04:	bf28      	it	cs
 8009f06:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2203      	movs	r2, #3
 8009f18:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8009f28:	68f9      	ldr	r1, [r7, #12]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f30:	461a      	mov	r2, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f001 fde6 	bl	800bb04 <USBD_CtlPrepareRx>
 8009f38:	e02f      	b.n	8009f9a <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8009f3a:	6839      	ldr	r1, [r7, #0]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 fd44 	bl	800b9ca <USBD_CtlError>
 8009f42:	e02a      	b.n	8009f9a <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009f4a:	2b05      	cmp	r3, #5
 8009f4c:	d004      	beq.n	8009f58 <DFU_Download+0xa4>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d11a      	bne.n	8009f8e <DFU_Download+0xda>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2206      	movs	r2, #6
 8009f64:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8009f8c:	e005      	b.n	8009f9a <DFU_Download+0xe6>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 fd1a 	bl	800b9ca <USBD_CtlError>
 8009f96:	e000      	b.n	8009f9a <DFU_Download+0xe6>
    return;
 8009f98:	bf00      	nop
    }
  }
}
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	32b0      	adds	r2, #176	; 0xb0
 8009fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb8:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	33b0      	adds	r3, #176	; 0xb0
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 80ca 	beq.w	800a168 <DFU_Upload+0x1c8>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	88db      	ldrh	r3, [r3, #6]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 80ae 	beq.w	800a13a <DFU_Upload+0x19a>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d005      	beq.n	8009ff4 <DFU_Upload+0x54>
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009fee:	2b09      	cmp	r3, #9
 8009ff0:	f040 8096 	bne.w	800a120 <DFU_Upload+0x180>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	885b      	ldrh	r3, [r3, #2]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	88db      	ldrh	r3, [r3, #6]
 800a004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a008:	bf28      	it	cs
 800a00a:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800a00e:	b29b      	uxth	r3, r3
 800a010:	461a      	mov	r2, r3
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d12c      	bne.n	800a07c <DFU_Upload+0xdc>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d901      	bls.n	800a030 <DFU_Upload+0x90>
 800a02c:	2202      	movs	r2, #2
 800a02e:	e000      	b.n	800a032 <DFU_Upload+0x92>
 800a030:	2209      	movs	r2, #9
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	2200      	movs	r2, #0
 800a060:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2221      	movs	r2, #33	; 0x21
 800a066:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	2241      	movs	r2, #65	; 0x41
 800a06c:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2203      	movs	r2, #3
 800a072:	4619      	mov	r1, r3
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f001 fd19 	bl	800baac <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800a07a:	e076      	b.n	800a16a <DFU_Upload+0x1ca>
      }
      else if (hdfu->wblock_num > 1U)
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a082:	2b01      	cmp	r3, #1
 800a084:	d931      	bls.n	800a0ea <DFU_Upload+0x14a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2209      	movs	r2, #9
 800a08a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a0b8:	3b02      	subs	r3, #2
 800a0ba:	029a      	lsls	r2, r3, #10
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a0c2:	4413      	add	r3, r2
 800a0c4:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	6979      	ldr	r1, [r7, #20]
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800a0d4:	4798      	blx	r3
 800a0d6:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0de:	461a      	mov	r2, r3
 800a0e0:	68b9      	ldr	r1, [r7, #8]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f001 fce2 	bl	800baac <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800a0e8:	e03f      	b.n	800a16a <DFU_Upload+0x1ca>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	220f      	movs	r2, #15
 800a0ee:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 fc56 	bl	800b9ca <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800a11e:	e024      	b.n	800a16a <DFU_Upload+0x1ca>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	2200      	movs	r2, #0
 800a124:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 fc49 	bl	800b9ca <USBD_CtlError>
 800a138:	e017      	b.n	800a16a <DFU_Upload+0x1ca>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	2202      	movs	r2, #2
 800a13e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800a166:	e000      	b.n	800a16a <DFU_Upload+0x1ca>
    return;
 800a168:	bf00      	nop
  }
}
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	32b0      	adds	r2, #176	; 0xb0
 800a182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a186:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	33b0      	adds	r3, #176	; 0xb0
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 f9d3 	bl	800a54c <USBD_DFU_GetDfuFuncDesc>
 800a1a6:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 80a8 	beq.w	800a300 <DFU_GetStatus+0x190>
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f000 80a4 	beq.w	800a300 <DFU_GetStatus+0x190>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 80a0 	beq.w	800a300 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d002      	beq.n	800a1d0 <DFU_GetStatus+0x60>
 800a1ca:	2b06      	cmp	r3, #6
 800a1cc:	d051      	beq.n	800a272 <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 800a1ce:	e08e      	b.n	800a2ee <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d034      	beq.n	800a244 <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2204      	movs	r2, #4
 800a1de:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10e      	bne.n	800a22e <DFU_GetStatus+0xbe>
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	2b41      	cmp	r3, #65	; 0x41
 800a216:	d10a      	bne.n	800a22e <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	697a      	ldr	r2, [r7, #20]
 800a21e:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800a228:	2100      	movs	r1, #0
 800a22a:	4798      	blx	r3
      break;
 800a22c:	e05f      	b.n	800a2ee <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800a23e:	2101      	movs	r1, #1
 800a240:	4798      	blx	r3
      break;
 800a242:	e054      	b.n	800a2ee <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2205      	movs	r2, #5
 800a248:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	2200      	movs	r2, #0
 800a258:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800a270:	e03d      	b.n	800a2ee <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d116      	bne.n	800a2aa <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2207      	movs	r2, #7
 800a280:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	2200      	movs	r2, #0
 800a298:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800a2a8:	e020      	b.n	800a2ec <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d11b      	bne.n	800a2ec <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	789b      	ldrb	r3, [r3, #2]
 800a2b8:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d015      	beq.n	800a2ec <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800a2ec:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800a2f4:	2206      	movs	r2, #6
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f001 fbd7 	bl	800baac <USBD_CtlSendData>
 800a2fe:	e000      	b.n	800a302 <DFU_GetStatus+0x192>
    return;
 800a300:	bf00      	nop
}
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	32b0      	adds	r2, #176	; 0xb0
 800a31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d042      	beq.n	800a3ac <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a32c:	2b0a      	cmp	r3, #10
 800a32e:	d11e      	bne.n	800a36e <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2202      	movs	r2, #2
 800a334:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 800a36c:	e01f      	b.n	800a3ae <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	220a      	movs	r2, #10
 800a372:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	220e      	movs	r2, #14
 800a37a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 800a3aa:	e000      	b.n	800a3ae <DFU_ClearStatus+0xa6>
    return;
 800a3ac:	bf00      	nop
  }
}
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	32b0      	adds	r2, #176	; 0xb0
 800a3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ce:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d008      	beq.n	800a3e8 <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800a3dc:	2201      	movs	r2, #1
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f001 fb63 	bl	800baac <USBD_CtlSendData>
 800a3e6:	e000      	b.n	800a3ea <DFU_GetState+0x32>
    return;
 800a3e8:	bf00      	nop
}
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	32b0      	adds	r2, #176	; 0xb0
 800a402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a406:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d03f      	beq.n	800a48e <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a414:	2b02      	cmp	r3, #2
 800a416:	d013      	beq.n	800a440 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d00e      	beq.n	800a440 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800a428:	2b05      	cmp	r3, #5
 800a42a:	d009      	beq.n	800a440 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800a432:	2b06      	cmp	r3, #6
 800a434:	d004      	beq.n	800a440 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800a43c:	2b09      	cmp	r3, #9
 800a43e:	d127      	bne.n	800a490 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2202      	movs	r2, #2
 800a444:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800a48c:	e000      	b.n	800a490 <DFU_Abort+0xa0>
    return;
 800a48e:	bf00      	nop
  }
}
 800a490:	3714      	adds	r7, #20
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	32b0      	adds	r2, #176	; 0xb0
 800a4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b0:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 f847 	bl	800a54c <USBD_DFU_GetDfuFuncDesc>
 800a4be:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d03e      	beq.n	800a544 <DFU_Leave+0xaa>
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d03b      	beq.n	800a544 <DFU_Leave+0xaa>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	789b      	ldrb	r3, [r3, #2]
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d016      	beq.n	800a50e <DFU_Leave+0x74>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2206      	movs	r2, #6
 800a4e4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 800a50c:	e01b      	b.n	800a546 <DFU_Leave+0xac>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2208      	movs	r2, #8
 800a512:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f8a8 	bl	800a690 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800a540:	f7ff f908 	bl	8009754 <__NVIC_SystemReset>
    return;
 800a544:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 800a55c:	2300      	movs	r3, #0
 800a55e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	885b      	ldrh	r3, [r3, #2]
 800a564:	b29a      	uxth	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d918      	bls.n	800a5a2 <USBD_DFU_GetDfuFuncDesc+0x56>
  {
    ptr = desc->bLength;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	b29b      	uxth	r3, r3
 800a576:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a578:	e00d      	b.n	800a596 <USBD_DFU_GetDfuFuncDesc+0x4a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a57a:	f107 030a 	add.w	r3, r7, #10
 800a57e:	4619      	mov	r1, r3
 800a580:	6978      	ldr	r0, [r7, #20]
 800a582:	f000 fbfd 	bl	800ad80 <USBD_GetNextDesc>
 800a586:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	785b      	ldrb	r3, [r3, #1]
 800a58c:	2b21      	cmp	r3, #33	; 0x21
 800a58e:	d102      	bne.n	800a596 <USBD_DFU_GetDfuFuncDesc+0x4a>
      {
        pDfuDesc = (uint8_t *)pdesc;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	613b      	str	r3, [r7, #16]
        break;
 800a594:	e005      	b.n	800a5a2 <USBD_DFU_GetDfuFuncDesc+0x56>
    while (ptr < desc->wTotalLength)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	885b      	ldrh	r3, [r3, #2]
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	897b      	ldrh	r3, [r7, #10]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d8eb      	bhi.n	800a57a <USBD_DFU_GetDfuFuncDesc+0x2e>
      }
    }
  }
  return pDfuDesc;
 800a5a2:	693b      	ldr	r3, [r7, #16]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d101      	bne.n	800a5c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e01f      	b.n	800a604 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d003      	beq.n	800a5ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	79fa      	ldrb	r2, [r7, #7]
 800a5f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f001 fd7f 	bl	800c0fc <USBD_LL_Init>
 800a5fe:	4603      	mov	r3, r0
 800a600:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a602:	7dfb      	ldrb	r3, [r7, #23]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a616:	2300      	movs	r3, #0
 800a618:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a620:	2303      	movs	r3, #3
 800a622:	e025      	b.n	800a670 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	32ae      	adds	r2, #174	; 0xae
 800a636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00f      	beq.n	800a660 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	32ae      	adds	r2, #174	; 0xae
 800a64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a650:	f107 020e 	add.w	r2, r7, #14
 800a654:	4610      	mov	r0, r2
 800a656:	4798      	blx	r3
 800a658:	4602      	mov	r2, r0
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 fd8b 	bl	800c19c <USBD_LL_Start>
 800a686:	4603      	mov	r3, r0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f001 fd9a 	bl	800c1d2 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d009      	beq.n	800a6bc <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	6852      	ldr	r2, [r2, #4]
 800a6b4:	b2d2      	uxtb	r2, r2
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b083      	sub	sp, #12
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a6ce:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d009      	beq.n	800a70a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	78fa      	ldrb	r2, [r7, #3]
 800a700:	4611      	mov	r1, r2
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	4798      	blx	r3
 800a706:	4603      	mov	r3, r0
 800a708:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	78fa      	ldrb	r2, [r7, #3]
 800a72e:	4611      	mov	r1, r2
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	4798      	blx	r3
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a73a:	2303      	movs	r3, #3
 800a73c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f001 f8fb 	bl	800b956 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a76e:	461a      	mov	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a77c:	f003 031f 	and.w	r3, r3, #31
 800a780:	2b02      	cmp	r3, #2
 800a782:	d01a      	beq.n	800a7ba <USBD_LL_SetupStage+0x72>
 800a784:	2b02      	cmp	r3, #2
 800a786:	d822      	bhi.n	800a7ce <USBD_LL_SetupStage+0x86>
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <USBD_LL_SetupStage+0x4a>
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d00a      	beq.n	800a7a6 <USBD_LL_SetupStage+0x5e>
 800a790:	e01d      	b.n	800a7ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a798:	4619      	mov	r1, r3
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fb2c 	bl	800adf8 <USBD_StdDevReq>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7a4:	e020      	b.n	800a7e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fb94 	bl	800aedc <USBD_StdItfReq>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a7b8:	e016      	b.n	800a7e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fbf6 	bl	800afb4 <USBD_StdEPReq>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a7cc:	e00c      	b.n	800a7e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a7d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f001 fd39 	bl	800c254 <USBD_LL_StallEP>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a7e6:	bf00      	nop
  }

  return ret;
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b086      	sub	sp, #24
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	607a      	str	r2, [r7, #4]
 800a7fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a800:	2300      	movs	r3, #0
 800a802:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a804:	7afb      	ldrb	r3, [r7, #11]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d16e      	bne.n	800a8e8 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a810:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a818:	2b03      	cmp	r3, #3
 800a81a:	f040 8098 	bne.w	800a94e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	689a      	ldr	r2, [r3, #8]
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	429a      	cmp	r2, r3
 800a828:	d913      	bls.n	800a852 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	689a      	ldr	r2, [r3, #8]
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	1ad2      	subs	r2, r2, r3
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	68da      	ldr	r2, [r3, #12]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	4293      	cmp	r3, r2
 800a842:	bf28      	it	cs
 800a844:	4613      	movcs	r3, r2
 800a846:	461a      	mov	r2, r3
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f001 f977 	bl	800bb3e <USBD_CtlContinueRx>
 800a850:	e07d      	b.n	800a94e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a858:	f003 031f 	and.w	r3, r3, #31
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d014      	beq.n	800a88a <USBD_LL_DataOutStage+0x98>
 800a860:	2b02      	cmp	r3, #2
 800a862:	d81d      	bhi.n	800a8a0 <USBD_LL_DataOutStage+0xae>
 800a864:	2b00      	cmp	r3, #0
 800a866:	d002      	beq.n	800a86e <USBD_LL_DataOutStage+0x7c>
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d003      	beq.n	800a874 <USBD_LL_DataOutStage+0x82>
 800a86c:	e018      	b.n	800a8a0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	75bb      	strb	r3, [r7, #22]
            break;
 800a872:	e018      	b.n	800a8a6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	4619      	mov	r1, r3
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 fa64 	bl	800ad4c <USBD_CoreFindIF>
 800a884:	4603      	mov	r3, r0
 800a886:	75bb      	strb	r3, [r7, #22]
            break;
 800a888:	e00d      	b.n	800a8a6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a890:	b2db      	uxtb	r3, r3
 800a892:	4619      	mov	r1, r3
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f000 fa66 	bl	800ad66 <USBD_CoreFindEP>
 800a89a:	4603      	mov	r3, r0
 800a89c:	75bb      	strb	r3, [r7, #22]
            break;
 800a89e:	e002      	b.n	800a8a6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	75bb      	strb	r3, [r7, #22]
            break;
 800a8a4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a8a6:	7dbb      	ldrb	r3, [r7, #22]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d119      	bne.n	800a8e0 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b03      	cmp	r3, #3
 800a8b6:	d113      	bne.n	800a8e0 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a8b8:	7dba      	ldrb	r2, [r7, #22]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	32ae      	adds	r2, #174	; 0xae
 800a8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00b      	beq.n	800a8e0 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a8c8:	7dba      	ldrb	r2, [r7, #22]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a8d0:	7dba      	ldrb	r2, [r7, #22]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	32ae      	adds	r2, #174	; 0xae
 800a8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f001 f93d 	bl	800bb60 <USBD_CtlSendStatus>
 800a8e6:	e032      	b.n	800a94e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a8e8:	7afb      	ldrb	r3, [r7, #11]
 800a8ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 fa37 	bl	800ad66 <USBD_CoreFindEP>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8fc:	7dbb      	ldrb	r3, [r7, #22]
 800a8fe:	2bff      	cmp	r3, #255	; 0xff
 800a900:	d025      	beq.n	800a94e <USBD_LL_DataOutStage+0x15c>
 800a902:	7dbb      	ldrb	r3, [r7, #22]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d122      	bne.n	800a94e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b03      	cmp	r3, #3
 800a912:	d117      	bne.n	800a944 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a914:	7dba      	ldrb	r2, [r7, #22]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	32ae      	adds	r2, #174	; 0xae
 800a91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00f      	beq.n	800a944 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a924:	7dba      	ldrb	r2, [r7, #22]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a92c:	7dba      	ldrb	r2, [r7, #22]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	32ae      	adds	r2, #174	; 0xae
 800a932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	7afa      	ldrb	r2, [r7, #11]
 800a93a:	4611      	mov	r1, r2
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	4798      	blx	r3
 800a940:	4603      	mov	r3, r0
 800a942:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a944:	7dfb      	ldrb	r3, [r7, #23]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a94a:	7dfb      	ldrb	r3, [r7, #23]
 800a94c:	e000      	b.n	800a950 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3718      	adds	r7, #24
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	460b      	mov	r3, r1
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a966:	7afb      	ldrb	r3, [r7, #11]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d16f      	bne.n	800aa4c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3314      	adds	r3, #20
 800a970:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a978:	2b02      	cmp	r3, #2
 800a97a:	d15a      	bne.n	800aa32 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	689a      	ldr	r2, [r3, #8]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	429a      	cmp	r2, r3
 800a986:	d914      	bls.n	800a9b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	689a      	ldr	r2, [r3, #8]
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	1ad2      	subs	r2, r2, r3
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	461a      	mov	r2, r3
 800a99c:	6879      	ldr	r1, [r7, #4]
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f001 f89f 	bl	800bae2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f001 fcfc 	bl	800c3a8 <USBD_LL_PrepareReceive>
 800a9b0:	e03f      	b.n	800aa32 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	68da      	ldr	r2, [r3, #12]
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d11c      	bne.n	800a9f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d316      	bcc.n	800a9f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d20f      	bcs.n	800a9f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9d8:	2200      	movs	r2, #0
 800a9da:	2100      	movs	r1, #0
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f001 f880 	bl	800bae2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f001 fcd9 	bl	800c3a8 <USBD_LL_PrepareReceive>
 800a9f6:	e01c      	b.n	800aa32 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d10f      	bne.n	800aa24 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d009      	beq.n	800aa24 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa24:	2180      	movs	r1, #128	; 0x80
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f001 fc14 	bl	800c254 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f001 f8aa 	bl	800bb86 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d03a      	beq.n	800aab2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f7ff fe42 	bl	800a6c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aa4a:	e032      	b.n	800aab2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aa4c:	7afb      	ldrb	r3, [r7, #11]
 800aa4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	4619      	mov	r1, r3
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f000 f985 	bl	800ad66 <USBD_CoreFindEP>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa60:	7dfb      	ldrb	r3, [r7, #23]
 800aa62:	2bff      	cmp	r3, #255	; 0xff
 800aa64:	d025      	beq.n	800aab2 <USBD_LL_DataInStage+0x15a>
 800aa66:	7dfb      	ldrb	r3, [r7, #23]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d122      	bne.n	800aab2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b03      	cmp	r3, #3
 800aa76:	d11c      	bne.n	800aab2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aa78:	7dfa      	ldrb	r2, [r7, #23]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	32ae      	adds	r2, #174	; 0xae
 800aa7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d014      	beq.n	800aab2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aa88:	7dfa      	ldrb	r2, [r7, #23]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aa90:	7dfa      	ldrb	r2, [r7, #23]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	32ae      	adds	r2, #174	; 0xae
 800aa96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9a:	695b      	ldr	r3, [r3, #20]
 800aa9c:	7afa      	ldrb	r2, [r7, #11]
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	4798      	blx	r3
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aaa8:	7dbb      	ldrb	r3, [r7, #22]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aaae:	7dbb      	ldrb	r3, [r7, #22]
 800aab0:	e000      	b.n	800aab4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d014      	beq.n	800ab22 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00e      	beq.n	800ab22 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	6852      	ldr	r2, [r2, #4]
 800ab10:	b2d2      	uxtb	r2, r2
 800ab12:	4611      	mov	r1, r2
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	4798      	blx	r3
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab22:	2340      	movs	r3, #64	; 0x40
 800ab24:	2200      	movs	r2, #0
 800ab26:	2100      	movs	r1, #0
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f001 fb6d 	bl	800c208 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2240      	movs	r2, #64	; 0x40
 800ab3a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab3e:	2340      	movs	r3, #64	; 0x40
 800ab40:	2200      	movs	r2, #0
 800ab42:	2180      	movs	r1, #128	; 0x80
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f001 fb5f 	bl	800c208 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2240      	movs	r2, #64	; 0x40
 800ab54:	621a      	str	r2, [r3, #32]

  return ret;
 800ab56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	78fa      	ldrb	r2, [r7, #3]
 800ab70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b04      	cmp	r3, #4
 800ab92:	d006      	beq.n	800aba2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab9a:	b2da      	uxtb	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2204      	movs	r2, #4
 800aba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b04      	cmp	r3, #4
 800abca:	d106      	bne.n	800abda <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800abd2:	b2da      	uxtb	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d110      	bne.n	800ac1e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00b      	beq.n	800ac1e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d005      	beq.n	800ac1e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	32ae      	adds	r2, #174	; 0xae
 800ac3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d101      	bne.n	800ac4a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac46:	2303      	movs	r3, #3
 800ac48:	e01c      	b.n	800ac84 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d115      	bne.n	800ac82 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	32ae      	adds	r2, #174	; 0xae
 800ac60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00b      	beq.n	800ac82 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	32ae      	adds	r2, #174	; 0xae
 800ac74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	78fa      	ldrb	r2, [r7, #3]
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	460b      	mov	r3, r1
 800ac96:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	32ae      	adds	r2, #174	; 0xae
 800aca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800acaa:	2303      	movs	r3, #3
 800acac:	e01c      	b.n	800ace8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b03      	cmp	r3, #3
 800acb8:	d115      	bne.n	800ace6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	32ae      	adds	r2, #174	; 0xae
 800acc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00b      	beq.n	800ace6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	32ae      	adds	r2, #174	; 0xae
 800acd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acde:	78fa      	ldrb	r2, [r7, #3]
 800ace0:	4611      	mov	r1, r2
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b084      	sub	sp, #16
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00e      	beq.n	800ad42 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	6852      	ldr	r2, [r2, #4]
 800ad30:	b2d2      	uxtb	r2, r2
 800ad32:	4611      	mov	r1, r2
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	4798      	blx	r3
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	460b      	mov	r3, r1
 800ad56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	460b      	mov	r3, r1
 800ad70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	881a      	ldrh	r2, [r3, #0]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	4413      	add	r3, r2
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	461a      	mov	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4413      	add	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800adac:	68fb      	ldr	r3, [r7, #12]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3714      	adds	r7, #20
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800adba:	b480      	push	{r7}
 800adbc:	b087      	sub	sp, #28
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	3301      	adds	r3, #1
 800add0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800add8:	8a3b      	ldrh	r3, [r7, #16]
 800adda:	021b      	lsls	r3, r3, #8
 800addc:	b21a      	sxth	r2, r3
 800adde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	b21b      	sxth	r3, r3
 800ade6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ade8:	89fb      	ldrh	r3, [r7, #14]
}
 800adea:	4618      	mov	r0, r3
 800adec:	371c      	adds	r7, #28
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
	...

0800adf8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae0e:	2b40      	cmp	r3, #64	; 0x40
 800ae10:	d005      	beq.n	800ae1e <USBD_StdDevReq+0x26>
 800ae12:	2b40      	cmp	r3, #64	; 0x40
 800ae14:	d857      	bhi.n	800aec6 <USBD_StdDevReq+0xce>
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00f      	beq.n	800ae3a <USBD_StdDevReq+0x42>
 800ae1a:	2b20      	cmp	r3, #32
 800ae1c:	d153      	bne.n	800aec6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	32ae      	adds	r2, #174	; 0xae
 800ae28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	4798      	blx	r3
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]
      break;
 800ae38:	e04a      	b.n	800aed0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	785b      	ldrb	r3, [r3, #1]
 800ae3e:	2b09      	cmp	r3, #9
 800ae40:	d83b      	bhi.n	800aeba <USBD_StdDevReq+0xc2>
 800ae42:	a201      	add	r2, pc, #4	; (adr r2, 800ae48 <USBD_StdDevReq+0x50>)
 800ae44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae48:	0800ae9d 	.word	0x0800ae9d
 800ae4c:	0800aeb1 	.word	0x0800aeb1
 800ae50:	0800aebb 	.word	0x0800aebb
 800ae54:	0800aea7 	.word	0x0800aea7
 800ae58:	0800aebb 	.word	0x0800aebb
 800ae5c:	0800ae7b 	.word	0x0800ae7b
 800ae60:	0800ae71 	.word	0x0800ae71
 800ae64:	0800aebb 	.word	0x0800aebb
 800ae68:	0800ae93 	.word	0x0800ae93
 800ae6c:	0800ae85 	.word	0x0800ae85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae70:	6839      	ldr	r1, [r7, #0]
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fa3c 	bl	800b2f0 <USBD_GetDescriptor>
          break;
 800ae78:	e024      	b.n	800aec4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fbc7 	bl	800b610 <USBD_SetAddress>
          break;
 800ae82:	e01f      	b.n	800aec4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fc06 	bl	800b698 <USBD_SetConfig>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73fb      	strb	r3, [r7, #15]
          break;
 800ae90:	e018      	b.n	800aec4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fca9 	bl	800b7ec <USBD_GetConfig>
          break;
 800ae9a:	e013      	b.n	800aec4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fcda 	bl	800b858 <USBD_GetStatus>
          break;
 800aea4:	e00e      	b.n	800aec4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fd09 	bl	800b8c0 <USBD_SetFeature>
          break;
 800aeae:	e009      	b.n	800aec4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fd2d 	bl	800b912 <USBD_ClrFeature>
          break;
 800aeb8:	e004      	b.n	800aec4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fd84 	bl	800b9ca <USBD_CtlError>
          break;
 800aec2:	bf00      	nop
      }
      break;
 800aec4:	e004      	b.n	800aed0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fd7e 	bl	800b9ca <USBD_CtlError>
      break;
 800aece:	bf00      	nop
  }

  return ret;
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop

0800aedc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aef2:	2b40      	cmp	r3, #64	; 0x40
 800aef4:	d005      	beq.n	800af02 <USBD_StdItfReq+0x26>
 800aef6:	2b40      	cmp	r3, #64	; 0x40
 800aef8:	d852      	bhi.n	800afa0 <USBD_StdItfReq+0xc4>
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <USBD_StdItfReq+0x26>
 800aefe:	2b20      	cmp	r3, #32
 800af00:	d14e      	bne.n	800afa0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	3b01      	subs	r3, #1
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d840      	bhi.n	800af92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	889b      	ldrh	r3, [r3, #4]
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b01      	cmp	r3, #1
 800af18:	d836      	bhi.n	800af88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	889b      	ldrh	r3, [r3, #4]
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	4619      	mov	r1, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f7ff ff12 	bl	800ad4c <USBD_CoreFindIF>
 800af28:	4603      	mov	r3, r0
 800af2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af2c:	7bbb      	ldrb	r3, [r7, #14]
 800af2e:	2bff      	cmp	r3, #255	; 0xff
 800af30:	d01d      	beq.n	800af6e <USBD_StdItfReq+0x92>
 800af32:	7bbb      	ldrb	r3, [r7, #14]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d11a      	bne.n	800af6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800af38:	7bba      	ldrb	r2, [r7, #14]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	32ae      	adds	r2, #174	; 0xae
 800af3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00f      	beq.n	800af68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af48:	7bba      	ldrb	r2, [r7, #14]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af50:	7bba      	ldrb	r2, [r7, #14]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	32ae      	adds	r2, #174	; 0xae
 800af56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	4798      	blx	r3
 800af62:	4603      	mov	r3, r0
 800af64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af66:	e004      	b.n	800af72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800af68:	2303      	movs	r3, #3
 800af6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af6c:	e001      	b.n	800af72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800af6e:	2303      	movs	r3, #3
 800af70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	88db      	ldrh	r3, [r3, #6]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d110      	bne.n	800af9c <USBD_StdItfReq+0xc0>
 800af7a:	7bfb      	ldrb	r3, [r7, #15]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10d      	bne.n	800af9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fded 	bl	800bb60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af86:	e009      	b.n	800af9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fd1d 	bl	800b9ca <USBD_CtlError>
          break;
 800af90:	e004      	b.n	800af9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fd18 	bl	800b9ca <USBD_CtlError>
          break;
 800af9a:	e000      	b.n	800af9e <USBD_StdItfReq+0xc2>
          break;
 800af9c:	bf00      	nop
      }
      break;
 800af9e:	e004      	b.n	800afaa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fd11 	bl	800b9ca <USBD_CtlError>
      break;
 800afa8:	bf00      	nop
  }

  return ret;
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	889b      	ldrh	r3, [r3, #4]
 800afc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afd0:	2b40      	cmp	r3, #64	; 0x40
 800afd2:	d007      	beq.n	800afe4 <USBD_StdEPReq+0x30>
 800afd4:	2b40      	cmp	r3, #64	; 0x40
 800afd6:	f200 817f 	bhi.w	800b2d8 <USBD_StdEPReq+0x324>
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d02a      	beq.n	800b034 <USBD_StdEPReq+0x80>
 800afde:	2b20      	cmp	r3, #32
 800afe0:	f040 817a 	bne.w	800b2d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7ff febc 	bl	800ad66 <USBD_CoreFindEP>
 800afee:	4603      	mov	r3, r0
 800aff0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aff2:	7b7b      	ldrb	r3, [r7, #13]
 800aff4:	2bff      	cmp	r3, #255	; 0xff
 800aff6:	f000 8174 	beq.w	800b2e2 <USBD_StdEPReq+0x32e>
 800affa:	7b7b      	ldrb	r3, [r7, #13]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f040 8170 	bne.w	800b2e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b002:	7b7a      	ldrb	r2, [r7, #13]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b00a:	7b7a      	ldrb	r2, [r7, #13]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	32ae      	adds	r2, #174	; 0xae
 800b010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f000 8163 	beq.w	800b2e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b01c:	7b7a      	ldrb	r2, [r7, #13]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	32ae      	adds	r2, #174	; 0xae
 800b022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
 800b02e:	4603      	mov	r3, r0
 800b030:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b032:	e156      	b.n	800b2e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	785b      	ldrb	r3, [r3, #1]
 800b038:	2b03      	cmp	r3, #3
 800b03a:	d008      	beq.n	800b04e <USBD_StdEPReq+0x9a>
 800b03c:	2b03      	cmp	r3, #3
 800b03e:	f300 8145 	bgt.w	800b2cc <USBD_StdEPReq+0x318>
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 809b 	beq.w	800b17e <USBD_StdEPReq+0x1ca>
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d03c      	beq.n	800b0c6 <USBD_StdEPReq+0x112>
 800b04c:	e13e      	b.n	800b2cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b054:	b2db      	uxtb	r3, r3
 800b056:	2b02      	cmp	r3, #2
 800b058:	d002      	beq.n	800b060 <USBD_StdEPReq+0xac>
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	d016      	beq.n	800b08c <USBD_StdEPReq+0xd8>
 800b05e:	e02c      	b.n	800b0ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b060:	7bbb      	ldrb	r3, [r7, #14]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00d      	beq.n	800b082 <USBD_StdEPReq+0xce>
 800b066:	7bbb      	ldrb	r3, [r7, #14]
 800b068:	2b80      	cmp	r3, #128	; 0x80
 800b06a:	d00a      	beq.n	800b082 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f001 f8ef 	bl	800c254 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b076:	2180      	movs	r1, #128	; 0x80
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f001 f8eb 	bl	800c254 <USBD_LL_StallEP>
 800b07e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b080:	e020      	b.n	800b0c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fca0 	bl	800b9ca <USBD_CtlError>
              break;
 800b08a:	e01b      	b.n	800b0c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	885b      	ldrh	r3, [r3, #2]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10e      	bne.n	800b0b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b094:	7bbb      	ldrb	r3, [r7, #14]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00b      	beq.n	800b0b2 <USBD_StdEPReq+0xfe>
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	2b80      	cmp	r3, #128	; 0x80
 800b09e:	d008      	beq.n	800b0b2 <USBD_StdEPReq+0xfe>
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	88db      	ldrh	r3, [r3, #6]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d104      	bne.n	800b0b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 f8d1 	bl	800c254 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fd54 	bl	800bb60 <USBD_CtlSendStatus>

              break;
 800b0b8:	e004      	b.n	800b0c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fc84 	bl	800b9ca <USBD_CtlError>
              break;
 800b0c2:	bf00      	nop
          }
          break;
 800b0c4:	e107      	b.n	800b2d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d002      	beq.n	800b0d8 <USBD_StdEPReq+0x124>
 800b0d2:	2b03      	cmp	r3, #3
 800b0d4:	d016      	beq.n	800b104 <USBD_StdEPReq+0x150>
 800b0d6:	e04b      	b.n	800b170 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0d8:	7bbb      	ldrb	r3, [r7, #14]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00d      	beq.n	800b0fa <USBD_StdEPReq+0x146>
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
 800b0e0:	2b80      	cmp	r3, #128	; 0x80
 800b0e2:	d00a      	beq.n	800b0fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f001 f8b3 	bl	800c254 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0ee:	2180      	movs	r1, #128	; 0x80
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f001 f8af 	bl	800c254 <USBD_LL_StallEP>
 800b0f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0f8:	e040      	b.n	800b17c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fc64 	bl	800b9ca <USBD_CtlError>
              break;
 800b102:	e03b      	b.n	800b17c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	885b      	ldrh	r3, [r3, #2]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d136      	bne.n	800b17a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b10c:	7bbb      	ldrb	r3, [r7, #14]
 800b10e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b112:	2b00      	cmp	r3, #0
 800b114:	d004      	beq.n	800b120 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b116:	7bbb      	ldrb	r3, [r7, #14]
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f001 f8b9 	bl	800c292 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fd1d 	bl	800bb60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	4619      	mov	r1, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7ff fe1b 	bl	800ad66 <USBD_CoreFindEP>
 800b130:	4603      	mov	r3, r0
 800b132:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b134:	7b7b      	ldrb	r3, [r7, #13]
 800b136:	2bff      	cmp	r3, #255	; 0xff
 800b138:	d01f      	beq.n	800b17a <USBD_StdEPReq+0x1c6>
 800b13a:	7b7b      	ldrb	r3, [r7, #13]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d11c      	bne.n	800b17a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b140:	7b7a      	ldrb	r2, [r7, #13]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b148:	7b7a      	ldrb	r2, [r7, #13]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	32ae      	adds	r2, #174	; 0xae
 800b14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d010      	beq.n	800b17a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b158:	7b7a      	ldrb	r2, [r7, #13]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	32ae      	adds	r2, #174	; 0xae
 800b15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	4798      	blx	r3
 800b16a:	4603      	mov	r3, r0
 800b16c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b16e:	e004      	b.n	800b17a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b170:	6839      	ldr	r1, [r7, #0]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fc29 	bl	800b9ca <USBD_CtlError>
              break;
 800b178:	e000      	b.n	800b17c <USBD_StdEPReq+0x1c8>
              break;
 800b17a:	bf00      	nop
          }
          break;
 800b17c:	e0ab      	b.n	800b2d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b02      	cmp	r3, #2
 800b188:	d002      	beq.n	800b190 <USBD_StdEPReq+0x1dc>
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d032      	beq.n	800b1f4 <USBD_StdEPReq+0x240>
 800b18e:	e097      	b.n	800b2c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b190:	7bbb      	ldrb	r3, [r7, #14]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d007      	beq.n	800b1a6 <USBD_StdEPReq+0x1f2>
 800b196:	7bbb      	ldrb	r3, [r7, #14]
 800b198:	2b80      	cmp	r3, #128	; 0x80
 800b19a:	d004      	beq.n	800b1a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fc13 	bl	800b9ca <USBD_CtlError>
                break;
 800b1a4:	e091      	b.n	800b2ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	da0b      	bge.n	800b1c6 <USBD_StdEPReq+0x212>
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	3310      	adds	r3, #16
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	e00b      	b.n	800b1de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1c6:	7bbb      	ldrb	r3, [r7, #14]
 800b1c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	4413      	add	r3, r2
 800b1dc:	3304      	adds	r3, #4
 800b1de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	2202      	movs	r2, #2
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fc5d 	bl	800baac <USBD_CtlSendData>
              break;
 800b1f2:	e06a      	b.n	800b2ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b1f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	da11      	bge.n	800b220 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1fc:	7bbb      	ldrb	r3, [r7, #14]
 800b1fe:	f003 020f 	and.w	r2, r3, #15
 800b202:	6879      	ldr	r1, [r7, #4]
 800b204:	4613      	mov	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	440b      	add	r3, r1
 800b20e:	3324      	adds	r3, #36	; 0x24
 800b210:	881b      	ldrh	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d117      	bne.n	800b246 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fbd6 	bl	800b9ca <USBD_CtlError>
                  break;
 800b21e:	e054      	b.n	800b2ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	f003 020f 	and.w	r2, r3, #15
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	4613      	mov	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	440b      	add	r3, r1
 800b232:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b236:	881b      	ldrh	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d104      	bne.n	800b246 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fbc3 	bl	800b9ca <USBD_CtlError>
                  break;
 800b244:	e041      	b.n	800b2ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b246:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	da0b      	bge.n	800b266 <USBD_StdEPReq+0x2b2>
 800b24e:	7bbb      	ldrb	r3, [r7, #14]
 800b250:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	3310      	adds	r3, #16
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	4413      	add	r3, r2
 800b262:	3304      	adds	r3, #4
 800b264:	e00b      	b.n	800b27e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b266:	7bbb      	ldrb	r3, [r7, #14]
 800b268:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b26c:	4613      	mov	r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4413      	add	r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	4413      	add	r3, r2
 800b27c:	3304      	adds	r3, #4
 800b27e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b280:	7bbb      	ldrb	r3, [r7, #14]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d002      	beq.n	800b28c <USBD_StdEPReq+0x2d8>
 800b286:	7bbb      	ldrb	r3, [r7, #14]
 800b288:	2b80      	cmp	r3, #128	; 0x80
 800b28a:	d103      	bne.n	800b294 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	2200      	movs	r2, #0
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	e00e      	b.n	800b2b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f001 f819 	bl	800c2d0 <USBD_LL_IsStallEP>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d003      	beq.n	800b2ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	e002      	b.n	800b2b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2202      	movs	r2, #2
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fbf7 	bl	800baac <USBD_CtlSendData>
              break;
 800b2be:	e004      	b.n	800b2ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 fb81 	bl	800b9ca <USBD_CtlError>
              break;
 800b2c8:	bf00      	nop
          }
          break;
 800b2ca:	e004      	b.n	800b2d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fb7b 	bl	800b9ca <USBD_CtlError>
          break;
 800b2d4:	bf00      	nop
      }
      break;
 800b2d6:	e005      	b.n	800b2e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fb75 	bl	800b9ca <USBD_CtlError>
      break;
 800b2e0:	e000      	b.n	800b2e4 <USBD_StdEPReq+0x330>
      break;
 800b2e2:	bf00      	nop
  }

  return ret;
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 800b302:	2300      	movs	r3, #0
 800b304:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	885b      	ldrh	r3, [r3, #2]
 800b30a:	0a1b      	lsrs	r3, r3, #8
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	3b01      	subs	r3, #1
 800b310:	2b06      	cmp	r3, #6
 800b312:	f200 814f 	bhi.w	800b5b4 <USBD_GetDescriptor+0x2c4>
 800b316:	a201      	add	r2, pc, #4	; (adr r2, 800b31c <USBD_GetDescriptor+0x2c>)
 800b318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31c:	0800b339 	.word	0x0800b339
 800b320:	0800b351 	.word	0x0800b351
 800b324:	0800b391 	.word	0x0800b391
 800b328:	0800b5b5 	.word	0x0800b5b5
 800b32c:	0800b5b5 	.word	0x0800b5b5
 800b330:	0800b555 	.word	0x0800b555
 800b334:	0800b581 	.word	0x0800b581
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	7c12      	ldrb	r2, [r2, #16]
 800b344:	f107 010a 	add.w	r1, r7, #10
 800b348:	4610      	mov	r0, r2
 800b34a:	4798      	blx	r3
 800b34c:	6178      	str	r0, [r7, #20]
      break;
 800b34e:	e139      	b.n	800b5c4 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	7c1b      	ldrb	r3, [r3, #16]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10d      	bne.n	800b374 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b360:	f107 020a 	add.w	r2, r7, #10
 800b364:	4610      	mov	r0, r2
 800b366:	4798      	blx	r3
 800b368:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	3301      	adds	r3, #1
 800b36e:	2202      	movs	r2, #2
 800b370:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b372:	e127      	b.n	800b5c4 <USBD_GetDescriptor+0x2d4>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	f107 020a 	add.w	r2, r7, #10
 800b380:	4610      	mov	r0, r2
 800b382:	4798      	blx	r3
 800b384:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	3301      	adds	r3, #1
 800b38a:	2202      	movs	r2, #2
 800b38c:	701a      	strb	r2, [r3, #0]
      break;
 800b38e:	e119      	b.n	800b5c4 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	885b      	ldrh	r3, [r3, #2]
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b05      	cmp	r3, #5
 800b398:	f200 80ac 	bhi.w	800b4f4 <USBD_GetDescriptor+0x204>
 800b39c:	a201      	add	r2, pc, #4	; (adr r2, 800b3a4 <USBD_GetDescriptor+0xb4>)
 800b39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a2:	bf00      	nop
 800b3a4:	0800b3bd 	.word	0x0800b3bd
 800b3a8:	0800b3f1 	.word	0x0800b3f1
 800b3ac:	0800b425 	.word	0x0800b425
 800b3b0:	0800b459 	.word	0x0800b459
 800b3b4:	0800b48d 	.word	0x0800b48d
 800b3b8:	0800b4c1 	.word	0x0800b4c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00b      	beq.n	800b3e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	7c12      	ldrb	r2, [r2, #16]
 800b3d4:	f107 010a 	add.w	r1, r7, #10
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4798      	blx	r3
 800b3dc:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3de:	e0b8      	b.n	800b552 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 faf1 	bl	800b9ca <USBD_CtlError>
            err++;
 800b3e8:	7cfb      	ldrb	r3, [r7, #19]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	74fb      	strb	r3, [r7, #19]
          break;
 800b3ee:	e0b0      	b.n	800b552 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00b      	beq.n	800b414 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	7c12      	ldrb	r2, [r2, #16]
 800b408:	f107 010a 	add.w	r1, r7, #10
 800b40c:	4610      	mov	r0, r2
 800b40e:	4798      	blx	r3
 800b410:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b412:	e09e      	b.n	800b552 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fad7 	bl	800b9ca <USBD_CtlError>
            err++;
 800b41c:	7cfb      	ldrb	r3, [r7, #19]
 800b41e:	3301      	adds	r3, #1
 800b420:	74fb      	strb	r3, [r7, #19]
          break;
 800b422:	e096      	b.n	800b552 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00b      	beq.n	800b448 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	7c12      	ldrb	r2, [r2, #16]
 800b43c:	f107 010a 	add.w	r1, r7, #10
 800b440:	4610      	mov	r0, r2
 800b442:	4798      	blx	r3
 800b444:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b446:	e084      	b.n	800b552 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fabd 	bl	800b9ca <USBD_CtlError>
            err++;
 800b450:	7cfb      	ldrb	r3, [r7, #19]
 800b452:	3301      	adds	r3, #1
 800b454:	74fb      	strb	r3, [r7, #19]
          break;
 800b456:	e07c      	b.n	800b552 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00b      	beq.n	800b47c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	7c12      	ldrb	r2, [r2, #16]
 800b470:	f107 010a 	add.w	r1, r7, #10
 800b474:	4610      	mov	r0, r2
 800b476:	4798      	blx	r3
 800b478:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b47a:	e06a      	b.n	800b552 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b47c:	6839      	ldr	r1, [r7, #0]
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 faa3 	bl	800b9ca <USBD_CtlError>
            err++;
 800b484:	7cfb      	ldrb	r3, [r7, #19]
 800b486:	3301      	adds	r3, #1
 800b488:	74fb      	strb	r3, [r7, #19]
          break;
 800b48a:	e062      	b.n	800b552 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00b      	beq.n	800b4b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	7c12      	ldrb	r2, [r2, #16]
 800b4a4:	f107 010a 	add.w	r1, r7, #10
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	4798      	blx	r3
 800b4ac:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ae:	e050      	b.n	800b552 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fa89 	bl	800b9ca <USBD_CtlError>
            err++;
 800b4b8:	7cfb      	ldrb	r3, [r7, #19]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	74fb      	strb	r3, [r7, #19]
          break;
 800b4be:	e048      	b.n	800b552 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00b      	beq.n	800b4e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	7c12      	ldrb	r2, [r2, #16]
 800b4d8:	f107 010a 	add.w	r1, r7, #10
 800b4dc:	4610      	mov	r0, r2
 800b4de:	4798      	blx	r3
 800b4e0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4e2:	e036      	b.n	800b552 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fa6f 	bl	800b9ca <USBD_CtlError>
            err++;
 800b4ec:	7cfb      	ldrb	r3, [r7, #19]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	74fb      	strb	r3, [r7, #19]
          break;
 800b4f2:	e02e      	b.n	800b552 <USBD_GetDescriptor+0x262>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	617b      	str	r3, [r7, #20]


          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	e020      	b.n	800b540 <USBD_GetDescriptor+0x250>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	32ae      	adds	r2, #174	; 0xae
 800b504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d015      	beq.n	800b53a <USBD_GetDescriptor+0x24a>
            {
              pdev->classId = idx;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	32ae      	adds	r2, #174	; 0xae
 800b51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	8852      	ldrh	r2, [r2, #2]
 800b526:	b2d1      	uxtb	r1, r2
 800b528:	f107 020a 	add.w	r2, r7, #10
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	4798      	blx	r3
 800b530:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10a      	bne.n	800b54e <USBD_GetDescriptor+0x25e>
              {
                continue;
 800b538:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	3301      	adds	r3, #1
 800b53e:	60fb      	str	r3, [r7, #12]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d3d8      	bcc.n	800b4fe <USBD_GetDescriptor+0x20e>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b54c:	e000      	b.n	800b550 <USBD_GetDescriptor+0x260>
                break;
 800b54e:	bf00      	nop
          break;
 800b550:	bf00      	nop
      }
      break;
 800b552:	e037      	b.n	800b5c4 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	7c1b      	ldrb	r3, [r3, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d109      	bne.n	800b570 <USBD_GetDescriptor+0x280>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b564:	f107 020a 	add.w	r2, r7, #10
 800b568:	4610      	mov	r0, r2
 800b56a:	4798      	blx	r3
 800b56c:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b56e:	e029      	b.n	800b5c4 <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fa29 	bl	800b9ca <USBD_CtlError>
        err++;
 800b578:	7cfb      	ldrb	r3, [r7, #19]
 800b57a:	3301      	adds	r3, #1
 800b57c:	74fb      	strb	r3, [r7, #19]
      break;
 800b57e:	e021      	b.n	800b5c4 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	7c1b      	ldrb	r3, [r3, #16]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d10d      	bne.n	800b5a4 <USBD_GetDescriptor+0x2b4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b590:	f107 020a 	add.w	r2, r7, #10
 800b594:	4610      	mov	r0, r2
 800b596:	4798      	blx	r3
 800b598:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	3301      	adds	r3, #1
 800b59e:	2207      	movs	r2, #7
 800b5a0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5a2:	e00f      	b.n	800b5c4 <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fa0f 	bl	800b9ca <USBD_CtlError>
        err++;
 800b5ac:	7cfb      	ldrb	r3, [r7, #19]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	74fb      	strb	r3, [r7, #19]
      break;
 800b5b2:	e007      	b.n	800b5c4 <USBD_GetDescriptor+0x2d4>

    default:
      USBD_CtlError(pdev, req);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fa07 	bl	800b9ca <USBD_CtlError>
      err++;
 800b5bc:	7cfb      	ldrb	r3, [r7, #19]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	74fb      	strb	r3, [r7, #19]
      break;
 800b5c2:	bf00      	nop
  }

  if (err != 0U)
 800b5c4:	7cfb      	ldrb	r3, [r7, #19]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d11e      	bne.n	800b608 <USBD_GetDescriptor+0x318>
  {
    return;
  }

  if (req->wLength != 0U)
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	88db      	ldrh	r3, [r3, #6]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d016      	beq.n	800b600 <USBD_GetDescriptor+0x310>
  {
    if (len != 0U)
 800b5d2:	897b      	ldrh	r3, [r7, #10]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00e      	beq.n	800b5f6 <USBD_GetDescriptor+0x306>
    {
      len = MIN(len, req->wLength);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	88da      	ldrh	r2, [r3, #6]
 800b5dc:	897b      	ldrh	r3, [r7, #10]
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	bf28      	it	cs
 800b5e2:	4613      	movcs	r3, r2
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b5e8:	897b      	ldrh	r3, [r7, #10]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	6979      	ldr	r1, [r7, #20]
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 fa5c 	bl	800baac <USBD_CtlSendData>
 800b5f4:	e009      	b.n	800b60a <USBD_GetDescriptor+0x31a>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f9e6 	bl	800b9ca <USBD_CtlError>
 800b5fe:	e004      	b.n	800b60a <USBD_GetDescriptor+0x31a>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 faad 	bl	800bb60 <USBD_CtlSendStatus>
 800b606:	e000      	b.n	800b60a <USBD_GetDescriptor+0x31a>
    return;
 800b608:	bf00      	nop
  }
}
 800b60a:	3718      	adds	r7, #24
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	889b      	ldrh	r3, [r3, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d131      	bne.n	800b686 <USBD_SetAddress+0x76>
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	88db      	ldrh	r3, [r3, #6]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d12d      	bne.n	800b686 <USBD_SetAddress+0x76>
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	885b      	ldrh	r3, [r3, #2]
 800b62e:	2b7f      	cmp	r3, #127	; 0x7f
 800b630:	d829      	bhi.n	800b686 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	885b      	ldrh	r3, [r3, #2]
 800b636:	b2db      	uxtb	r3, r3
 800b638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b63c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b03      	cmp	r3, #3
 800b648:	d104      	bne.n	800b654 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f9bc 	bl	800b9ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b652:	e01d      	b.n	800b690 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	7bfa      	ldrb	r2, [r7, #15]
 800b658:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
 800b65e:	4619      	mov	r1, r3
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 fe61 	bl	800c328 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 fa7a 	bl	800bb60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d004      	beq.n	800b67c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2202      	movs	r2, #2
 800b676:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b67a:	e009      	b.n	800b690 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b684:	e004      	b.n	800b690 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f99e 	bl	800b9ca <USBD_CtlError>
  }
}
 800b68e:	bf00      	nop
 800b690:	bf00      	nop
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	885b      	ldrh	r3, [r3, #2]
 800b6aa:	b2da      	uxtb	r2, r3
 800b6ac:	4b4e      	ldr	r3, [pc, #312]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b6ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6b0:	4b4d      	ldr	r3, [pc, #308]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d905      	bls.n	800b6c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f985 	bl	800b9ca <USBD_CtlError>
    return USBD_FAIL;
 800b6c0:	2303      	movs	r3, #3
 800b6c2:	e08c      	b.n	800b7de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	d002      	beq.n	800b6d6 <USBD_SetConfig+0x3e>
 800b6d0:	2b03      	cmp	r3, #3
 800b6d2:	d029      	beq.n	800b728 <USBD_SetConfig+0x90>
 800b6d4:	e075      	b.n	800b7c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b6d6:	4b44      	ldr	r3, [pc, #272]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d020      	beq.n	800b720 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b6de:	4b42      	ldr	r3, [pc, #264]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6e8:	4b3f      	ldr	r3, [pc, #252]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7fe fff4 	bl	800a6dc <USBD_SetClassConfig>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d008      	beq.n	800b710 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f962 	bl	800b9ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2202      	movs	r2, #2
 800b70a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b70e:	e065      	b.n	800b7dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fa25 	bl	800bb60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2203      	movs	r2, #3
 800b71a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b71e:	e05d      	b.n	800b7dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 fa1d 	bl	800bb60 <USBD_CtlSendStatus>
      break;
 800b726:	e059      	b.n	800b7dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b728:	4b2f      	ldr	r3, [pc, #188]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d112      	bne.n	800b756 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2202      	movs	r2, #2
 800b734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b738:	4b2b      	ldr	r3, [pc, #172]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	461a      	mov	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b742:	4b29      	ldr	r3, [pc, #164]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7fe ffe3 	bl	800a714 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fa06 	bl	800bb60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b754:	e042      	b.n	800b7dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b756:	4b24      	ldr	r3, [pc, #144]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	461a      	mov	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	429a      	cmp	r2, r3
 800b762:	d02a      	beq.n	800b7ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7fe ffd1 	bl	800a714 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b772:	4b1d      	ldr	r3, [pc, #116]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b77c:	4b1a      	ldr	r3, [pc, #104]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7fe ffaa 	bl	800a6dc <USBD_SetClassConfig>
 800b788:	4603      	mov	r3, r0
 800b78a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b78c:	7bfb      	ldrb	r3, [r7, #15]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00f      	beq.n	800b7b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f918 	bl	800b9ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7fe ffb6 	bl	800a714 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b7b0:	e014      	b.n	800b7dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f9d4 	bl	800bb60 <USBD_CtlSendStatus>
      break;
 800b7b8:	e010      	b.n	800b7dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f9d0 	bl	800bb60 <USBD_CtlSendStatus>
      break;
 800b7c0:	e00c      	b.n	800b7dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f900 	bl	800b9ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7ca:	4b07      	ldr	r3, [pc, #28]	; (800b7e8 <USBD_SetConfig+0x150>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7fe ff9f 	bl	800a714 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b7da:	bf00      	nop
  }

  return ret;
 800b7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	24000353 	.word	0x24000353

0800b7ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	88db      	ldrh	r3, [r3, #6]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d004      	beq.n	800b808 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f8e2 	bl	800b9ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b806:	e023      	b.n	800b850 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	2b02      	cmp	r3, #2
 800b812:	dc02      	bgt.n	800b81a <USBD_GetConfig+0x2e>
 800b814:	2b00      	cmp	r3, #0
 800b816:	dc03      	bgt.n	800b820 <USBD_GetConfig+0x34>
 800b818:	e015      	b.n	800b846 <USBD_GetConfig+0x5a>
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d00b      	beq.n	800b836 <USBD_GetConfig+0x4a>
 800b81e:	e012      	b.n	800b846 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	3308      	adds	r3, #8
 800b82a:	2201      	movs	r2, #1
 800b82c:	4619      	mov	r1, r3
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f93c 	bl	800baac <USBD_CtlSendData>
        break;
 800b834:	e00c      	b.n	800b850 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	3304      	adds	r3, #4
 800b83a:	2201      	movs	r2, #1
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f934 	bl	800baac <USBD_CtlSendData>
        break;
 800b844:	e004      	b.n	800b850 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 f8be 	bl	800b9ca <USBD_CtlError>
        break;
 800b84e:	bf00      	nop
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	3b01      	subs	r3, #1
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d81e      	bhi.n	800b8ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	88db      	ldrh	r3, [r3, #6]
 800b874:	2b02      	cmp	r3, #2
 800b876:	d004      	beq.n	800b882 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f8a5 	bl	800b9ca <USBD_CtlError>
        break;
 800b880:	e01a      	b.n	800b8b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d005      	beq.n	800b89e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	f043 0202 	orr.w	r2, r3, #2
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	330c      	adds	r3, #12
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f900 	bl	800baac <USBD_CtlSendData>
      break;
 800b8ac:	e004      	b.n	800b8b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f88a 	bl	800b9ca <USBD_CtlError>
      break;
 800b8b6:	bf00      	nop
  }
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	885b      	ldrh	r3, [r3, #2]
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d107      	bne.n	800b8e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f940 	bl	800bb60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b8e0:	e013      	b.n	800b90a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	885b      	ldrh	r3, [r3, #2]
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d10b      	bne.n	800b902 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	889b      	ldrh	r3, [r3, #4]
 800b8ee:	0a1b      	lsrs	r3, r3, #8
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	b2da      	uxtb	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f930 	bl	800bb60 <USBD_CtlSendStatus>
}
 800b900:	e003      	b.n	800b90a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 f860 	bl	800b9ca <USBD_CtlError>
}
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b082      	sub	sp, #8
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b922:	b2db      	uxtb	r3, r3
 800b924:	3b01      	subs	r3, #1
 800b926:	2b02      	cmp	r3, #2
 800b928:	d80b      	bhi.n	800b942 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	885b      	ldrh	r3, [r3, #2]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d10c      	bne.n	800b94c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f910 	bl	800bb60 <USBD_CtlSendStatus>
      }
      break;
 800b940:	e004      	b.n	800b94c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b942:	6839      	ldr	r1, [r7, #0]
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f840 	bl	800b9ca <USBD_CtlError>
      break;
 800b94a:	e000      	b.n	800b94e <USBD_ClrFeature+0x3c>
      break;
 800b94c:	bf00      	nop
  }
}
 800b94e:	bf00      	nop
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b084      	sub	sp, #16
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	781a      	ldrb	r2, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	3301      	adds	r3, #1
 800b970:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	781a      	ldrb	r2, [r3, #0]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	3301      	adds	r3, #1
 800b97e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f7ff fa1a 	bl	800adba <SWAPBYTE>
 800b986:	4603      	mov	r3, r0
 800b988:	461a      	mov	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3301      	adds	r3, #1
 800b992:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	3301      	adds	r3, #1
 800b998:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f7ff fa0d 	bl	800adba <SWAPBYTE>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f7ff fa00 	bl	800adba <SWAPBYTE>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	461a      	mov	r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	80da      	strh	r2, [r3, #6]
}
 800b9c2:	bf00      	nop
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b082      	sub	sp, #8
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9d4:	2180      	movs	r1, #128	; 0x80
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fc3c 	bl	800c254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9dc:	2100      	movs	r1, #0
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fc38 	bl	800c254 <USBD_LL_StallEP>
}
 800b9e4:	bf00      	nop
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d036      	beq.n	800ba70 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba06:	6938      	ldr	r0, [r7, #16]
 800ba08:	f000 f836 	bl	800ba78 <USBD_GetLen>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	3301      	adds	r3, #1
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba1a:	7dfb      	ldrb	r3, [r7, #23]
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	4413      	add	r3, r2
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	7812      	ldrb	r2, [r2, #0]
 800ba24:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	4413      	add	r3, r2
 800ba32:	2203      	movs	r2, #3
 800ba34:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba3c:	e013      	b.n	800ba66 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	4413      	add	r3, r2
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	7812      	ldrb	r2, [r2, #0]
 800ba48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	613b      	str	r3, [r7, #16]
    idx++;
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
 800ba52:	3301      	adds	r3, #1
 800ba54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ba56:	7dfb      	ldrb	r3, [r7, #23]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba60:	7dfb      	ldrb	r3, [r7, #23]
 800ba62:	3301      	adds	r3, #1
 800ba64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1e7      	bne.n	800ba3e <USBD_GetString+0x52>
 800ba6e:	e000      	b.n	800ba72 <USBD_GetString+0x86>
    return;
 800ba70:	bf00      	nop
  }
}
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba88:	e005      	b.n	800ba96 <USBD_GetLen+0x1e>
  {
    len++;
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	3301      	adds	r3, #1
 800ba94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1f5      	bne.n	800ba8a <USBD_GetLen+0x12>
  }

  return len;
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2202      	movs	r2, #2
 800babc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	2100      	movs	r1, #0
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f000 fc47 	bl	800c366 <USBD_LL_Transmit>

  return USBD_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	60f8      	str	r0, [r7, #12]
 800baea:	60b9      	str	r1, [r7, #8]
 800baec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	2100      	movs	r1, #0
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f000 fc36 	bl	800c366 <USBD_LL_Transmit>

  return USBD_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2203      	movs	r2, #3
 800bb14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f000 fc3a 	bl	800c3a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	60f8      	str	r0, [r7, #12]
 800bb46:	60b9      	str	r1, [r7, #8]
 800bb48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	2100      	movs	r1, #0
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 fc29 	bl	800c3a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2204      	movs	r2, #4
 800bb6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb70:	2300      	movs	r3, #0
 800bb72:	2200      	movs	r2, #0
 800bb74:	2100      	movs	r1, #0
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 fbf5 	bl	800c366 <USBD_LL_Transmit>

  return USBD_OK;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b082      	sub	sp, #8
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2205      	movs	r2, #5
 800bb92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb96:	2300      	movs	r3, #0
 800bb98:	2200      	movs	r2, #0
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fc03 	bl	800c3a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	4913      	ldr	r1, [pc, #76]	; (800bc00 <MX_USB_DEVICE_Init+0x54>)
 800bbb4:	4813      	ldr	r0, [pc, #76]	; (800bc04 <MX_USB_DEVICE_Init+0x58>)
 800bbb6:	f7fe fcf9 	bl	800a5ac <USBD_Init>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d001      	beq.n	800bbc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bbc0:	f7f4 ffda 	bl	8000b78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800bbc4:	4910      	ldr	r1, [pc, #64]	; (800bc08 <MX_USB_DEVICE_Init+0x5c>)
 800bbc6:	480f      	ldr	r0, [pc, #60]	; (800bc04 <MX_USB_DEVICE_Init+0x58>)
 800bbc8:	f7fe fd20 	bl	800a60c <USBD_RegisterClass>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d001      	beq.n	800bbd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bbd2:	f7f4 ffd1 	bl	8000b78 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_QSPI_FLASH_fops_FS) != USBD_OK)
 800bbd6:	490d      	ldr	r1, [pc, #52]	; (800bc0c <MX_USB_DEVICE_Init+0x60>)
 800bbd8:	480a      	ldr	r0, [pc, #40]	; (800bc04 <MX_USB_DEVICE_Init+0x58>)
 800bbda:	f7fe f8e1 	bl	8009da0 <USBD_DFU_RegisterMedia>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bbe4:	f7f4 ffc8 	bl	8000b78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bbe8:	4806      	ldr	r0, [pc, #24]	; (800bc04 <MX_USB_DEVICE_Init+0x58>)
 800bbea:	f7fe fd45 	bl	800a678 <USBD_Start>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d001      	beq.n	800bbf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bbf4:	f7f4 ffc0 	bl	8000b78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800bbf8:	f7f7 ff06 	bl	8003a08 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bbfc:	bf00      	nop
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	24000090 	.word	0x24000090
 800bc04:	24000354 	.word	0x24000354
 800bc08:	2400002c 	.word	0x2400002c
 800bc0c:	24000008 	.word	0x24000008

0800bc10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	4603      	mov	r3, r0
 800bc18:	6039      	str	r1, [r7, #0]
 800bc1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2212      	movs	r2, #18
 800bc20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc22:	4b03      	ldr	r3, [pc, #12]	; (800bc30 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	240000ac 	.word	0x240000ac

0800bc34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	6039      	str	r1, [r7, #0]
 800bc3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	2204      	movs	r2, #4
 800bc44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc46:	4b03      	ldr	r3, [pc, #12]	; (800bc54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr
 800bc54:	240000c0 	.word	0x240000c0

0800bc58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	6039      	str	r1, [r7, #0]
 800bc62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc64:	79fb      	ldrb	r3, [r7, #7]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d105      	bne.n	800bc76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc6a:	683a      	ldr	r2, [r7, #0]
 800bc6c:	4907      	ldr	r1, [pc, #28]	; (800bc8c <USBD_FS_ProductStrDescriptor+0x34>)
 800bc6e:	4808      	ldr	r0, [pc, #32]	; (800bc90 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc70:	f7ff febc 	bl	800b9ec <USBD_GetString>
 800bc74:	e004      	b.n	800bc80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	4904      	ldr	r1, [pc, #16]	; (800bc8c <USBD_FS_ProductStrDescriptor+0x34>)
 800bc7a:	4805      	ldr	r0, [pc, #20]	; (800bc90 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc7c:	f7ff feb6 	bl	800b9ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc80:	4b02      	ldr	r3, [pc, #8]	; (800bc8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	24000630 	.word	0x24000630
 800bc90:	0800d634 	.word	0x0800d634

0800bc94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	6039      	str	r1, [r7, #0]
 800bc9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	4904      	ldr	r1, [pc, #16]	; (800bcb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bca4:	4804      	ldr	r0, [pc, #16]	; (800bcb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bca6:	f7ff fea1 	bl	800b9ec <USBD_GetString>
  return USBD_StrDesc;
 800bcaa:	4b02      	ldr	r3, [pc, #8]	; (800bcb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	24000630 	.word	0x24000630
 800bcb8:	0800d654 	.word	0x0800d654

0800bcbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	6039      	str	r1, [r7, #0]
 800bcc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	221a      	movs	r2, #26
 800bccc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bcce:	f000 f843 	bl	800bd58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bcd2:	4b02      	ldr	r3, [pc, #8]	; (800bcdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	240000c4 	.word	0x240000c4

0800bce0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	4603      	mov	r3, r0
 800bce8:	6039      	str	r1, [r7, #0]
 800bcea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bcec:	79fb      	ldrb	r3, [r7, #7]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d105      	bne.n	800bcfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcf2:	683a      	ldr	r2, [r7, #0]
 800bcf4:	4907      	ldr	r1, [pc, #28]	; (800bd14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcf6:	4808      	ldr	r0, [pc, #32]	; (800bd18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcf8:	f7ff fe78 	bl	800b9ec <USBD_GetString>
 800bcfc:	e004      	b.n	800bd08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	4904      	ldr	r1, [pc, #16]	; (800bd14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd02:	4805      	ldr	r0, [pc, #20]	; (800bd18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd04:	f7ff fe72 	bl	800b9ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd08:	4b02      	ldr	r3, [pc, #8]	; (800bd14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	24000630 	.word	0x24000630
 800bd18:	0800d668 	.word	0x0800d668

0800bd1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	6039      	str	r1, [r7, #0]
 800bd26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd28:	79fb      	ldrb	r3, [r7, #7]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d105      	bne.n	800bd3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	4907      	ldr	r1, [pc, #28]	; (800bd50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd32:	4808      	ldr	r0, [pc, #32]	; (800bd54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd34:	f7ff fe5a 	bl	800b9ec <USBD_GetString>
 800bd38:	e004      	b.n	800bd44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	4904      	ldr	r1, [pc, #16]	; (800bd50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd3e:	4805      	ldr	r0, [pc, #20]	; (800bd54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd40:	f7ff fe54 	bl	800b9ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd44:	4b02      	ldr	r3, [pc, #8]	; (800bd50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	24000630 	.word	0x24000630
 800bd54:	0800d674 	.word	0x0800d674

0800bd58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd5e:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <Get_SerialNum+0x44>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd64:	4b0e      	ldr	r3, [pc, #56]	; (800bda0 <Get_SerialNum+0x48>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd6a:	4b0e      	ldr	r3, [pc, #56]	; (800bda4 <Get_SerialNum+0x4c>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4413      	add	r3, r2
 800bd76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d009      	beq.n	800bd92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd7e:	2208      	movs	r2, #8
 800bd80:	4909      	ldr	r1, [pc, #36]	; (800bda8 <Get_SerialNum+0x50>)
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f000 f814 	bl	800bdb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd88:	2204      	movs	r2, #4
 800bd8a:	4908      	ldr	r1, [pc, #32]	; (800bdac <Get_SerialNum+0x54>)
 800bd8c:	68b8      	ldr	r0, [r7, #8]
 800bd8e:	f000 f80f 	bl	800bdb0 <IntToUnicode>
  }
}
 800bd92:	bf00      	nop
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	1ff1e800 	.word	0x1ff1e800
 800bda0:	1ff1e804 	.word	0x1ff1e804
 800bda4:	1ff1e808 	.word	0x1ff1e808
 800bda8:	240000c6 	.word	0x240000c6
 800bdac:	240000d6 	.word	0x240000d6

0800bdb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b087      	sub	sp, #28
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	75fb      	strb	r3, [r7, #23]
 800bdc6:	e027      	b.n	800be18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	0f1b      	lsrs	r3, r3, #28
 800bdcc:	2b09      	cmp	r3, #9
 800bdce:	d80b      	bhi.n	800bde8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	0f1b      	lsrs	r3, r3, #28
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	7dfb      	ldrb	r3, [r7, #23]
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	4619      	mov	r1, r3
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	440b      	add	r3, r1
 800bde0:	3230      	adds	r2, #48	; 0x30
 800bde2:	b2d2      	uxtb	r2, r2
 800bde4:	701a      	strb	r2, [r3, #0]
 800bde6:	e00a      	b.n	800bdfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	0f1b      	lsrs	r3, r3, #28
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	7dfb      	ldrb	r3, [r7, #23]
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	440b      	add	r3, r1
 800bdf8:	3237      	adds	r2, #55	; 0x37
 800bdfa:	b2d2      	uxtb	r2, r2
 800bdfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	011b      	lsls	r3, r3, #4
 800be02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be04:	7dfb      	ldrb	r3, [r7, #23]
 800be06:	005b      	lsls	r3, r3, #1
 800be08:	3301      	adds	r3, #1
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	4413      	add	r3, r2
 800be0e:	2200      	movs	r2, #0
 800be10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be12:	7dfb      	ldrb	r3, [r7, #23]
 800be14:	3301      	adds	r3, #1
 800be16:	75fb      	strb	r3, [r7, #23]
 800be18:	7dfa      	ldrb	r2, [r7, #23]
 800be1a:	79fb      	ldrb	r3, [r7, #7]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d3d3      	bcc.n	800bdc8 <IntToUnicode+0x18>
  }
}
 800be20:	bf00      	nop
 800be22:	bf00      	nop
 800be24:	371c      	adds	r7, #28
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
	...

0800be30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b0ba      	sub	sp, #232	; 0xe8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800be3c:	2200      	movs	r2, #0
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	605a      	str	r2, [r3, #4]
 800be42:	609a      	str	r2, [r3, #8]
 800be44:	60da      	str	r2, [r3, #12]
 800be46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800be48:	f107 0310 	add.w	r3, r7, #16
 800be4c:	22c0      	movs	r2, #192	; 0xc0
 800be4e:	2100      	movs	r1, #0
 800be50:	4618      	mov	r0, r3
 800be52:	f000 fb39 	bl	800c4c8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a2c      	ldr	r2, [pc, #176]	; (800bf0c <HAL_PCD_MspInit+0xdc>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d151      	bne.n	800bf04 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800be60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800be64:	f04f 0300 	mov.w	r3, #0
 800be68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800be6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800be70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800be74:	f107 0310 	add.w	r3, r7, #16
 800be78:	4618      	mov	r0, r3
 800be7a:	f7f9 fa61 	bl	8005340 <HAL_RCCEx_PeriphCLKConfig>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d001      	beq.n	800be88 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800be84:	f7f4 fe78 	bl	8000b78 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800be88:	f7f7 fdbe 	bl	8003a08 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be8c:	4b20      	ldr	r3, [pc, #128]	; (800bf10 <HAL_PCD_MspInit+0xe0>)
 800be8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be92:	4a1f      	ldr	r2, [pc, #124]	; (800bf10 <HAL_PCD_MspInit+0xe0>)
 800be94:	f043 0301 	orr.w	r3, r3, #1
 800be98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be9c:	4b1c      	ldr	r3, [pc, #112]	; (800bf10 <HAL_PCD_MspInit+0xe0>)
 800be9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bea2:	f003 0301 	and.w	r3, r3, #1
 800bea6:	60fb      	str	r3, [r7, #12]
 800bea8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800beaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800beae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beb2:	2302      	movs	r3, #2
 800beb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beb8:	2300      	movs	r3, #0
 800beba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bebe:	2300      	movs	r3, #0
 800bec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800bec4:	230a      	movs	r3, #10
 800bec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800beca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bece:	4619      	mov	r1, r3
 800bed0:	4810      	ldr	r0, [pc, #64]	; (800bf14 <HAL_PCD_MspInit+0xe4>)
 800bed2:	f7f6 f8d1 	bl	8002078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bed6:	4b0e      	ldr	r3, [pc, #56]	; (800bf10 <HAL_PCD_MspInit+0xe0>)
 800bed8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bedc:	4a0c      	ldr	r2, [pc, #48]	; (800bf10 <HAL_PCD_MspInit+0xe0>)
 800bede:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bee2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800bee6:	4b0a      	ldr	r3, [pc, #40]	; (800bf10 <HAL_PCD_MspInit+0xe0>)
 800bee8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800beec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bef0:	60bb      	str	r3, [r7, #8]
 800bef2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bef4:	2200      	movs	r2, #0
 800bef6:	2100      	movs	r1, #0
 800bef8:	2065      	movs	r0, #101	; 0x65
 800befa:	f7f6 f80c 	bl	8001f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800befe:	2065      	movs	r0, #101	; 0x65
 800bf00:	f7f6 f823 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf04:	bf00      	nop
 800bf06:	37e8      	adds	r7, #232	; 0xe8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	40080000 	.word	0x40080000
 800bf10:	58024400 	.word	0x58024400
 800bf14:	58020000 	.word	0x58020000

0800bf18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	4610      	mov	r0, r2
 800bf30:	f7fe fc0a 	bl	800a748 <USBD_LL_SetupStage>
}
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf4e:	78fa      	ldrb	r2, [r7, #3]
 800bf50:	6879      	ldr	r1, [r7, #4]
 800bf52:	4613      	mov	r3, r2
 800bf54:	00db      	lsls	r3, r3, #3
 800bf56:	4413      	add	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	440b      	add	r3, r1
 800bf5c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	78fb      	ldrb	r3, [r7, #3]
 800bf64:	4619      	mov	r1, r3
 800bf66:	f7fe fc44 	bl	800a7f2 <USBD_LL_DataOutStage>
}
 800bf6a:	bf00      	nop
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b082      	sub	sp, #8
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf84:	78fa      	ldrb	r2, [r7, #3]
 800bf86:	6879      	ldr	r1, [r7, #4]
 800bf88:	4613      	mov	r3, r2
 800bf8a:	00db      	lsls	r3, r3, #3
 800bf8c:	4413      	add	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	440b      	add	r3, r1
 800bf92:	3348      	adds	r3, #72	; 0x48
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	78fb      	ldrb	r3, [r7, #3]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	f7fe fcdd 	bl	800a958 <USBD_LL_DataInStage>
}
 800bf9e:	bf00      	nop
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b082      	sub	sp, #8
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fe fe17 	bl	800abe8 <USBD_LL_SOF>
}
 800bfba:	bf00      	nop
 800bfbc:	3708      	adds	r7, #8
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b084      	sub	sp, #16
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d102      	bne.n	800bfdc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	73fb      	strb	r3, [r7, #15]
 800bfda:	e008      	b.n	800bfee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	2b02      	cmp	r3, #2
 800bfe2:	d102      	bne.n	800bfea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	73fb      	strb	r3, [r7, #15]
 800bfe8:	e001      	b.n	800bfee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bfea:	f7f4 fdc5 	bl	8000b78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bff4:	7bfa      	ldrb	r2, [r7, #15]
 800bff6:	4611      	mov	r1, r2
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fe fdb1 	bl	800ab60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c004:	4618      	mov	r0, r3
 800c006:	f7fe fd59 	bl	800aabc <USBD_LL_Reset>
}
 800c00a:	bf00      	nop
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
	...

0800c014 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe fdac 	bl	800ab80 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	6812      	ldr	r2, [r2, #0]
 800c036:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c03a:	f043 0301 	orr.w	r3, r3, #1
 800c03e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a1b      	ldr	r3, [r3, #32]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d005      	beq.n	800c054 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c048:	4b04      	ldr	r3, [pc, #16]	; (800c05c <HAL_PCD_SuspendCallback+0x48>)
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	4a03      	ldr	r2, [pc, #12]	; (800c05c <HAL_PCD_SuspendCallback+0x48>)
 800c04e:	f043 0306 	orr.w	r3, r3, #6
 800c052:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c054:	bf00      	nop
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	e000ed00 	.word	0xe000ed00

0800c060 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fe fda2 	bl	800abb8 <USBD_LL_Resume>
}
 800c074:	bf00      	nop
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c08e:	78fa      	ldrb	r2, [r7, #3]
 800c090:	4611      	mov	r1, r2
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fdfa 	bl	800ac8c <USBD_LL_IsoOUTIncomplete>
}
 800c098:	bf00      	nop
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0b2:	78fa      	ldrb	r2, [r7, #3]
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe fdb6 	bl	800ac28 <USBD_LL_IsoINIncomplete>
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fe fe0c 	bl	800acf0 <USBD_LL_DevConnected>
}
 800c0d8:	bf00      	nop
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fe fe09 	bl	800ad06 <USBD_LL_DevDisconnected>
}
 800c0f4:	bf00      	nop
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d13e      	bne.n	800c18a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c10c:	4a21      	ldr	r2, [pc, #132]	; (800c194 <USBD_LL_Init+0x98>)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a1f      	ldr	r2, [pc, #124]	; (800c194 <USBD_LL_Init+0x98>)
 800c118:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c11c:	4b1d      	ldr	r3, [pc, #116]	; (800c194 <USBD_LL_Init+0x98>)
 800c11e:	4a1e      	ldr	r2, [pc, #120]	; (800c198 <USBD_LL_Init+0x9c>)
 800c120:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800c122:	4b1c      	ldr	r3, [pc, #112]	; (800c194 <USBD_LL_Init+0x98>)
 800c124:	2209      	movs	r2, #9
 800c126:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c128:	4b1a      	ldr	r3, [pc, #104]	; (800c194 <USBD_LL_Init+0x98>)
 800c12a:	2202      	movs	r2, #2
 800c12c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c12e:	4b19      	ldr	r3, [pc, #100]	; (800c194 <USBD_LL_Init+0x98>)
 800c130:	2200      	movs	r2, #0
 800c132:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c134:	4b17      	ldr	r3, [pc, #92]	; (800c194 <USBD_LL_Init+0x98>)
 800c136:	2202      	movs	r2, #2
 800c138:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c13a:	4b16      	ldr	r3, [pc, #88]	; (800c194 <USBD_LL_Init+0x98>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c140:	4b14      	ldr	r3, [pc, #80]	; (800c194 <USBD_LL_Init+0x98>)
 800c142:	2200      	movs	r2, #0
 800c144:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c146:	4b13      	ldr	r3, [pc, #76]	; (800c194 <USBD_LL_Init+0x98>)
 800c148:	2200      	movs	r2, #0
 800c14a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c14c:	4b11      	ldr	r3, [pc, #68]	; (800c194 <USBD_LL_Init+0x98>)
 800c14e:	2200      	movs	r2, #0
 800c150:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c152:	4b10      	ldr	r3, [pc, #64]	; (800c194 <USBD_LL_Init+0x98>)
 800c154:	2200      	movs	r2, #0
 800c156:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c158:	4b0e      	ldr	r3, [pc, #56]	; (800c194 <USBD_LL_Init+0x98>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c15e:	480d      	ldr	r0, [pc, #52]	; (800c194 <USBD_LL_Init+0x98>)
 800c160:	f7f6 f985 	bl	800246e <HAL_PCD_Init>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d001      	beq.n	800c16e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c16a:	f7f4 fd05 	bl	8000b78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c16e:	2180      	movs	r1, #128	; 0x80
 800c170:	4808      	ldr	r0, [pc, #32]	; (800c194 <USBD_LL_Init+0x98>)
 800c172:	f7f7 fbce 	bl	8003912 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c176:	2240      	movs	r2, #64	; 0x40
 800c178:	2100      	movs	r1, #0
 800c17a:	4806      	ldr	r0, [pc, #24]	; (800c194 <USBD_LL_Init+0x98>)
 800c17c:	f7f7 fb82 	bl	8003884 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c180:	2280      	movs	r2, #128	; 0x80
 800c182:	2101      	movs	r1, #1
 800c184:	4803      	ldr	r0, [pc, #12]	; (800c194 <USBD_LL_Init+0x98>)
 800c186:	f7f7 fb7d 	bl	8003884 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	24000830 	.word	0x24000830
 800c198:	40080000 	.word	0x40080000

0800c19c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7f6 fa7f 	bl	80026b6 <HAL_PCD_Start>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1bc:	7bfb      	ldrb	r3, [r7, #15]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 f92c 	bl	800c41c <USBD_Get_USB_Status>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7f6 fa99 	bl	8002720 <HAL_PCD_Stop>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 f911 	bl	800c41c <USBD_Get_USB_Status>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	4608      	mov	r0, r1
 800c212:	4611      	mov	r1, r2
 800c214:	461a      	mov	r2, r3
 800c216:	4603      	mov	r3, r0
 800c218:	70fb      	strb	r3, [r7, #3]
 800c21a:	460b      	mov	r3, r1
 800c21c:	70bb      	strb	r3, [r7, #2]
 800c21e:	4613      	mov	r3, r2
 800c220:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c222:	2300      	movs	r3, #0
 800c224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c226:	2300      	movs	r3, #0
 800c228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c230:	78bb      	ldrb	r3, [r7, #2]
 800c232:	883a      	ldrh	r2, [r7, #0]
 800c234:	78f9      	ldrb	r1, [r7, #3]
 800c236:	f7f6 ff9f 	bl	8003178 <HAL_PCD_EP_Open>
 800c23a:	4603      	mov	r3, r0
 800c23c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
 800c240:	4618      	mov	r0, r3
 800c242:	f000 f8eb 	bl	800c41c <USBD_Get_USB_Status>
 800c246:	4603      	mov	r3, r0
 800c248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c26e:	78fa      	ldrb	r2, [r7, #3]
 800c270:	4611      	mov	r1, r2
 800c272:	4618      	mov	r0, r3
 800c274:	f7f7 f85f 	bl	8003336 <HAL_PCD_EP_SetStall>
 800c278:	4603      	mov	r3, r0
 800c27a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 f8cc 	bl	800c41c <USBD_Get_USB_Status>
 800c284:	4603      	mov	r3, r0
 800c286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c288:	7bbb      	ldrb	r3, [r7, #14]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b084      	sub	sp, #16
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
 800c29a:	460b      	mov	r3, r1
 800c29c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2ac:	78fa      	ldrb	r2, [r7, #3]
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7f7 f8a4 	bl	80033fe <HAL_PCD_EP_ClrStall>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ba:	7bfb      	ldrb	r3, [r7, #15]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f000 f8ad 	bl	800c41c <USBD_Get_USB_Status>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	460b      	mov	r3, r1
 800c2da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	da0b      	bge.n	800c304 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2ec:	78fb      	ldrb	r3, [r7, #3]
 800c2ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2f2:	68f9      	ldr	r1, [r7, #12]
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	4413      	add	r3, r2
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	440b      	add	r3, r1
 800c2fe:	333e      	adds	r3, #62	; 0x3e
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	e00b      	b.n	800c31c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c304:	78fb      	ldrb	r3, [r7, #3]
 800c306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c30a:	68f9      	ldr	r1, [r7, #12]
 800c30c:	4613      	mov	r3, r2
 800c30e:	00db      	lsls	r3, r3, #3
 800c310:	4413      	add	r3, r2
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	440b      	add	r3, r1
 800c316:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c31a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3714      	adds	r7, #20
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	460b      	mov	r3, r1
 800c332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c342:	78fa      	ldrb	r2, [r7, #3]
 800c344:	4611      	mov	r1, r2
 800c346:	4618      	mov	r0, r3
 800c348:	f7f6 fef1 	bl	800312e <HAL_PCD_SetAddress>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c350:	7bfb      	ldrb	r3, [r7, #15]
 800c352:	4618      	mov	r0, r3
 800c354:	f000 f862 	bl	800c41c <USBD_Get_USB_Status>
 800c358:	4603      	mov	r3, r0
 800c35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b086      	sub	sp, #24
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	603b      	str	r3, [r7, #0]
 800c372:	460b      	mov	r3, r1
 800c374:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c37a:	2300      	movs	r3, #0
 800c37c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c384:	7af9      	ldrb	r1, [r7, #11]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	f7f6 ff99 	bl	80032c0 <HAL_PCD_EP_Transmit>
 800c38e:	4603      	mov	r3, r0
 800c390:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c392:	7dfb      	ldrb	r3, [r7, #23]
 800c394:	4618      	mov	r0, r3
 800c396:	f000 f841 	bl	800c41c <USBD_Get_USB_Status>
 800c39a:	4603      	mov	r3, r0
 800c39c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c39e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3718      	adds	r7, #24
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	607a      	str	r2, [r7, #4]
 800c3b2:	603b      	str	r3, [r7, #0]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3c6:	7af9      	ldrb	r1, [r7, #11]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	f7f6 ff3c 	bl	8003248 <HAL_PCD_EP_Receive>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 f820 	bl	800c41c <USBD_Get_USB_Status>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3718      	adds	r7, #24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c3f4:	4b03      	ldr	r3, [pc, #12]	; (800c404 <USBD_static_malloc+0x18>)
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	370c      	adds	r7, #12
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	24000d3c 	.word	0x24000d3c

0800c408 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c410:	bf00      	nop
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
 800c422:	4603      	mov	r3, r0
 800c424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c42a:	79fb      	ldrb	r3, [r7, #7]
 800c42c:	2b03      	cmp	r3, #3
 800c42e:	d817      	bhi.n	800c460 <USBD_Get_USB_Status+0x44>
 800c430:	a201      	add	r2, pc, #4	; (adr r2, 800c438 <USBD_Get_USB_Status+0x1c>)
 800c432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c436:	bf00      	nop
 800c438:	0800c449 	.word	0x0800c449
 800c43c:	0800c44f 	.word	0x0800c44f
 800c440:	0800c455 	.word	0x0800c455
 800c444:	0800c45b 	.word	0x0800c45b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c448:	2300      	movs	r3, #0
 800c44a:	73fb      	strb	r3, [r7, #15]
    break;
 800c44c:	e00b      	b.n	800c466 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c44e:	2303      	movs	r3, #3
 800c450:	73fb      	strb	r3, [r7, #15]
    break;
 800c452:	e008      	b.n	800c466 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c454:	2301      	movs	r3, #1
 800c456:	73fb      	strb	r3, [r7, #15]
    break;
 800c458:	e005      	b.n	800c466 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c45a:	2303      	movs	r3, #3
 800c45c:	73fb      	strb	r3, [r7, #15]
    break;
 800c45e:	e002      	b.n	800c466 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c460:	2303      	movs	r3, #3
 800c462:	73fb      	strb	r3, [r7, #15]
    break;
 800c464:	bf00      	nop
  }
  return usb_status;
 800c466:	7bfb      	ldrb	r3, [r7, #15]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <__errno>:
 800c474:	4b01      	ldr	r3, [pc, #4]	; (800c47c <__errno+0x8>)
 800c476:	6818      	ldr	r0, [r3, #0]
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	240000e0 	.word	0x240000e0

0800c480 <__libc_init_array>:
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	4d0d      	ldr	r5, [pc, #52]	; (800c4b8 <__libc_init_array+0x38>)
 800c484:	4c0d      	ldr	r4, [pc, #52]	; (800c4bc <__libc_init_array+0x3c>)
 800c486:	1b64      	subs	r4, r4, r5
 800c488:	10a4      	asrs	r4, r4, #2
 800c48a:	2600      	movs	r6, #0
 800c48c:	42a6      	cmp	r6, r4
 800c48e:	d109      	bne.n	800c4a4 <__libc_init_array+0x24>
 800c490:	4d0b      	ldr	r5, [pc, #44]	; (800c4c0 <__libc_init_array+0x40>)
 800c492:	4c0c      	ldr	r4, [pc, #48]	; (800c4c4 <__libc_init_array+0x44>)
 800c494:	f001 f824 	bl	800d4e0 <_init>
 800c498:	1b64      	subs	r4, r4, r5
 800c49a:	10a4      	asrs	r4, r4, #2
 800c49c:	2600      	movs	r6, #0
 800c49e:	42a6      	cmp	r6, r4
 800c4a0:	d105      	bne.n	800c4ae <__libc_init_array+0x2e>
 800c4a2:	bd70      	pop	{r4, r5, r6, pc}
 800c4a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4a8:	4798      	blx	r3
 800c4aa:	3601      	adds	r6, #1
 800c4ac:	e7ee      	b.n	800c48c <__libc_init_array+0xc>
 800c4ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4b2:	4798      	blx	r3
 800c4b4:	3601      	adds	r6, #1
 800c4b6:	e7f2      	b.n	800c49e <__libc_init_array+0x1e>
 800c4b8:	0800d75c 	.word	0x0800d75c
 800c4bc:	0800d75c 	.word	0x0800d75c
 800c4c0:	0800d75c 	.word	0x0800d75c
 800c4c4:	0800d760 	.word	0x0800d760

0800c4c8 <memset>:
 800c4c8:	4402      	add	r2, r0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d100      	bne.n	800c4d2 <memset+0xa>
 800c4d0:	4770      	bx	lr
 800c4d2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4d6:	e7f9      	b.n	800c4cc <memset+0x4>

0800c4d8 <iprintf>:
 800c4d8:	b40f      	push	{r0, r1, r2, r3}
 800c4da:	4b0a      	ldr	r3, [pc, #40]	; (800c504 <iprintf+0x2c>)
 800c4dc:	b513      	push	{r0, r1, r4, lr}
 800c4de:	681c      	ldr	r4, [r3, #0]
 800c4e0:	b124      	cbz	r4, 800c4ec <iprintf+0x14>
 800c4e2:	69a3      	ldr	r3, [r4, #24]
 800c4e4:	b913      	cbnz	r3, 800c4ec <iprintf+0x14>
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f000 fa5e 	bl	800c9a8 <__sinit>
 800c4ec:	ab05      	add	r3, sp, #20
 800c4ee:	9a04      	ldr	r2, [sp, #16]
 800c4f0:	68a1      	ldr	r1, [r4, #8]
 800c4f2:	9301      	str	r3, [sp, #4]
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f000 fc67 	bl	800cdc8 <_vfiprintf_r>
 800c4fa:	b002      	add	sp, #8
 800c4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c500:	b004      	add	sp, #16
 800c502:	4770      	bx	lr
 800c504:	240000e0 	.word	0x240000e0

0800c508 <_puts_r>:
 800c508:	b570      	push	{r4, r5, r6, lr}
 800c50a:	460e      	mov	r6, r1
 800c50c:	4605      	mov	r5, r0
 800c50e:	b118      	cbz	r0, 800c518 <_puts_r+0x10>
 800c510:	6983      	ldr	r3, [r0, #24]
 800c512:	b90b      	cbnz	r3, 800c518 <_puts_r+0x10>
 800c514:	f000 fa48 	bl	800c9a8 <__sinit>
 800c518:	69ab      	ldr	r3, [r5, #24]
 800c51a:	68ac      	ldr	r4, [r5, #8]
 800c51c:	b913      	cbnz	r3, 800c524 <_puts_r+0x1c>
 800c51e:	4628      	mov	r0, r5
 800c520:	f000 fa42 	bl	800c9a8 <__sinit>
 800c524:	4b2c      	ldr	r3, [pc, #176]	; (800c5d8 <_puts_r+0xd0>)
 800c526:	429c      	cmp	r4, r3
 800c528:	d120      	bne.n	800c56c <_puts_r+0x64>
 800c52a:	686c      	ldr	r4, [r5, #4]
 800c52c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c52e:	07db      	lsls	r3, r3, #31
 800c530:	d405      	bmi.n	800c53e <_puts_r+0x36>
 800c532:	89a3      	ldrh	r3, [r4, #12]
 800c534:	0598      	lsls	r0, r3, #22
 800c536:	d402      	bmi.n	800c53e <_puts_r+0x36>
 800c538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c53a:	f000 fad3 	bl	800cae4 <__retarget_lock_acquire_recursive>
 800c53e:	89a3      	ldrh	r3, [r4, #12]
 800c540:	0719      	lsls	r1, r3, #28
 800c542:	d51d      	bpl.n	800c580 <_puts_r+0x78>
 800c544:	6923      	ldr	r3, [r4, #16]
 800c546:	b1db      	cbz	r3, 800c580 <_puts_r+0x78>
 800c548:	3e01      	subs	r6, #1
 800c54a:	68a3      	ldr	r3, [r4, #8]
 800c54c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c550:	3b01      	subs	r3, #1
 800c552:	60a3      	str	r3, [r4, #8]
 800c554:	bb39      	cbnz	r1, 800c5a6 <_puts_r+0x9e>
 800c556:	2b00      	cmp	r3, #0
 800c558:	da38      	bge.n	800c5cc <_puts_r+0xc4>
 800c55a:	4622      	mov	r2, r4
 800c55c:	210a      	movs	r1, #10
 800c55e:	4628      	mov	r0, r5
 800c560:	f000 f848 	bl	800c5f4 <__swbuf_r>
 800c564:	3001      	adds	r0, #1
 800c566:	d011      	beq.n	800c58c <_puts_r+0x84>
 800c568:	250a      	movs	r5, #10
 800c56a:	e011      	b.n	800c590 <_puts_r+0x88>
 800c56c:	4b1b      	ldr	r3, [pc, #108]	; (800c5dc <_puts_r+0xd4>)
 800c56e:	429c      	cmp	r4, r3
 800c570:	d101      	bne.n	800c576 <_puts_r+0x6e>
 800c572:	68ac      	ldr	r4, [r5, #8]
 800c574:	e7da      	b.n	800c52c <_puts_r+0x24>
 800c576:	4b1a      	ldr	r3, [pc, #104]	; (800c5e0 <_puts_r+0xd8>)
 800c578:	429c      	cmp	r4, r3
 800c57a:	bf08      	it	eq
 800c57c:	68ec      	ldreq	r4, [r5, #12]
 800c57e:	e7d5      	b.n	800c52c <_puts_r+0x24>
 800c580:	4621      	mov	r1, r4
 800c582:	4628      	mov	r0, r5
 800c584:	f000 f888 	bl	800c698 <__swsetup_r>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d0dd      	beq.n	800c548 <_puts_r+0x40>
 800c58c:	f04f 35ff 	mov.w	r5, #4294967295
 800c590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c592:	07da      	lsls	r2, r3, #31
 800c594:	d405      	bmi.n	800c5a2 <_puts_r+0x9a>
 800c596:	89a3      	ldrh	r3, [r4, #12]
 800c598:	059b      	lsls	r3, r3, #22
 800c59a:	d402      	bmi.n	800c5a2 <_puts_r+0x9a>
 800c59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c59e:	f000 faa2 	bl	800cae6 <__retarget_lock_release_recursive>
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	bd70      	pop	{r4, r5, r6, pc}
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	da04      	bge.n	800c5b4 <_puts_r+0xac>
 800c5aa:	69a2      	ldr	r2, [r4, #24]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	dc06      	bgt.n	800c5be <_puts_r+0xb6>
 800c5b0:	290a      	cmp	r1, #10
 800c5b2:	d004      	beq.n	800c5be <_puts_r+0xb6>
 800c5b4:	6823      	ldr	r3, [r4, #0]
 800c5b6:	1c5a      	adds	r2, r3, #1
 800c5b8:	6022      	str	r2, [r4, #0]
 800c5ba:	7019      	strb	r1, [r3, #0]
 800c5bc:	e7c5      	b.n	800c54a <_puts_r+0x42>
 800c5be:	4622      	mov	r2, r4
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f000 f817 	bl	800c5f4 <__swbuf_r>
 800c5c6:	3001      	adds	r0, #1
 800c5c8:	d1bf      	bne.n	800c54a <_puts_r+0x42>
 800c5ca:	e7df      	b.n	800c58c <_puts_r+0x84>
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	250a      	movs	r5, #10
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	6022      	str	r2, [r4, #0]
 800c5d4:	701d      	strb	r5, [r3, #0]
 800c5d6:	e7db      	b.n	800c590 <_puts_r+0x88>
 800c5d8:	0800d6e0 	.word	0x0800d6e0
 800c5dc:	0800d700 	.word	0x0800d700
 800c5e0:	0800d6c0 	.word	0x0800d6c0

0800c5e4 <puts>:
 800c5e4:	4b02      	ldr	r3, [pc, #8]	; (800c5f0 <puts+0xc>)
 800c5e6:	4601      	mov	r1, r0
 800c5e8:	6818      	ldr	r0, [r3, #0]
 800c5ea:	f7ff bf8d 	b.w	800c508 <_puts_r>
 800c5ee:	bf00      	nop
 800c5f0:	240000e0 	.word	0x240000e0

0800c5f4 <__swbuf_r>:
 800c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f6:	460e      	mov	r6, r1
 800c5f8:	4614      	mov	r4, r2
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	b118      	cbz	r0, 800c606 <__swbuf_r+0x12>
 800c5fe:	6983      	ldr	r3, [r0, #24]
 800c600:	b90b      	cbnz	r3, 800c606 <__swbuf_r+0x12>
 800c602:	f000 f9d1 	bl	800c9a8 <__sinit>
 800c606:	4b21      	ldr	r3, [pc, #132]	; (800c68c <__swbuf_r+0x98>)
 800c608:	429c      	cmp	r4, r3
 800c60a:	d12b      	bne.n	800c664 <__swbuf_r+0x70>
 800c60c:	686c      	ldr	r4, [r5, #4]
 800c60e:	69a3      	ldr	r3, [r4, #24]
 800c610:	60a3      	str	r3, [r4, #8]
 800c612:	89a3      	ldrh	r3, [r4, #12]
 800c614:	071a      	lsls	r2, r3, #28
 800c616:	d52f      	bpl.n	800c678 <__swbuf_r+0x84>
 800c618:	6923      	ldr	r3, [r4, #16]
 800c61a:	b36b      	cbz	r3, 800c678 <__swbuf_r+0x84>
 800c61c:	6923      	ldr	r3, [r4, #16]
 800c61e:	6820      	ldr	r0, [r4, #0]
 800c620:	1ac0      	subs	r0, r0, r3
 800c622:	6963      	ldr	r3, [r4, #20]
 800c624:	b2f6      	uxtb	r6, r6
 800c626:	4283      	cmp	r3, r0
 800c628:	4637      	mov	r7, r6
 800c62a:	dc04      	bgt.n	800c636 <__swbuf_r+0x42>
 800c62c:	4621      	mov	r1, r4
 800c62e:	4628      	mov	r0, r5
 800c630:	f000 f926 	bl	800c880 <_fflush_r>
 800c634:	bb30      	cbnz	r0, 800c684 <__swbuf_r+0x90>
 800c636:	68a3      	ldr	r3, [r4, #8]
 800c638:	3b01      	subs	r3, #1
 800c63a:	60a3      	str	r3, [r4, #8]
 800c63c:	6823      	ldr	r3, [r4, #0]
 800c63e:	1c5a      	adds	r2, r3, #1
 800c640:	6022      	str	r2, [r4, #0]
 800c642:	701e      	strb	r6, [r3, #0]
 800c644:	6963      	ldr	r3, [r4, #20]
 800c646:	3001      	adds	r0, #1
 800c648:	4283      	cmp	r3, r0
 800c64a:	d004      	beq.n	800c656 <__swbuf_r+0x62>
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	07db      	lsls	r3, r3, #31
 800c650:	d506      	bpl.n	800c660 <__swbuf_r+0x6c>
 800c652:	2e0a      	cmp	r6, #10
 800c654:	d104      	bne.n	800c660 <__swbuf_r+0x6c>
 800c656:	4621      	mov	r1, r4
 800c658:	4628      	mov	r0, r5
 800c65a:	f000 f911 	bl	800c880 <_fflush_r>
 800c65e:	b988      	cbnz	r0, 800c684 <__swbuf_r+0x90>
 800c660:	4638      	mov	r0, r7
 800c662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c664:	4b0a      	ldr	r3, [pc, #40]	; (800c690 <__swbuf_r+0x9c>)
 800c666:	429c      	cmp	r4, r3
 800c668:	d101      	bne.n	800c66e <__swbuf_r+0x7a>
 800c66a:	68ac      	ldr	r4, [r5, #8]
 800c66c:	e7cf      	b.n	800c60e <__swbuf_r+0x1a>
 800c66e:	4b09      	ldr	r3, [pc, #36]	; (800c694 <__swbuf_r+0xa0>)
 800c670:	429c      	cmp	r4, r3
 800c672:	bf08      	it	eq
 800c674:	68ec      	ldreq	r4, [r5, #12]
 800c676:	e7ca      	b.n	800c60e <__swbuf_r+0x1a>
 800c678:	4621      	mov	r1, r4
 800c67a:	4628      	mov	r0, r5
 800c67c:	f000 f80c 	bl	800c698 <__swsetup_r>
 800c680:	2800      	cmp	r0, #0
 800c682:	d0cb      	beq.n	800c61c <__swbuf_r+0x28>
 800c684:	f04f 37ff 	mov.w	r7, #4294967295
 800c688:	e7ea      	b.n	800c660 <__swbuf_r+0x6c>
 800c68a:	bf00      	nop
 800c68c:	0800d6e0 	.word	0x0800d6e0
 800c690:	0800d700 	.word	0x0800d700
 800c694:	0800d6c0 	.word	0x0800d6c0

0800c698 <__swsetup_r>:
 800c698:	4b32      	ldr	r3, [pc, #200]	; (800c764 <__swsetup_r+0xcc>)
 800c69a:	b570      	push	{r4, r5, r6, lr}
 800c69c:	681d      	ldr	r5, [r3, #0]
 800c69e:	4606      	mov	r6, r0
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	b125      	cbz	r5, 800c6ae <__swsetup_r+0x16>
 800c6a4:	69ab      	ldr	r3, [r5, #24]
 800c6a6:	b913      	cbnz	r3, 800c6ae <__swsetup_r+0x16>
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f000 f97d 	bl	800c9a8 <__sinit>
 800c6ae:	4b2e      	ldr	r3, [pc, #184]	; (800c768 <__swsetup_r+0xd0>)
 800c6b0:	429c      	cmp	r4, r3
 800c6b2:	d10f      	bne.n	800c6d4 <__swsetup_r+0x3c>
 800c6b4:	686c      	ldr	r4, [r5, #4]
 800c6b6:	89a3      	ldrh	r3, [r4, #12]
 800c6b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6bc:	0719      	lsls	r1, r3, #28
 800c6be:	d42c      	bmi.n	800c71a <__swsetup_r+0x82>
 800c6c0:	06dd      	lsls	r5, r3, #27
 800c6c2:	d411      	bmi.n	800c6e8 <__swsetup_r+0x50>
 800c6c4:	2309      	movs	r3, #9
 800c6c6:	6033      	str	r3, [r6, #0]
 800c6c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6cc:	81a3      	strh	r3, [r4, #12]
 800c6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d2:	e03e      	b.n	800c752 <__swsetup_r+0xba>
 800c6d4:	4b25      	ldr	r3, [pc, #148]	; (800c76c <__swsetup_r+0xd4>)
 800c6d6:	429c      	cmp	r4, r3
 800c6d8:	d101      	bne.n	800c6de <__swsetup_r+0x46>
 800c6da:	68ac      	ldr	r4, [r5, #8]
 800c6dc:	e7eb      	b.n	800c6b6 <__swsetup_r+0x1e>
 800c6de:	4b24      	ldr	r3, [pc, #144]	; (800c770 <__swsetup_r+0xd8>)
 800c6e0:	429c      	cmp	r4, r3
 800c6e2:	bf08      	it	eq
 800c6e4:	68ec      	ldreq	r4, [r5, #12]
 800c6e6:	e7e6      	b.n	800c6b6 <__swsetup_r+0x1e>
 800c6e8:	0758      	lsls	r0, r3, #29
 800c6ea:	d512      	bpl.n	800c712 <__swsetup_r+0x7a>
 800c6ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ee:	b141      	cbz	r1, 800c702 <__swsetup_r+0x6a>
 800c6f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6f4:	4299      	cmp	r1, r3
 800c6f6:	d002      	beq.n	800c6fe <__swsetup_r+0x66>
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	f000 fa5b 	bl	800cbb4 <_free_r>
 800c6fe:	2300      	movs	r3, #0
 800c700:	6363      	str	r3, [r4, #52]	; 0x34
 800c702:	89a3      	ldrh	r3, [r4, #12]
 800c704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c708:	81a3      	strh	r3, [r4, #12]
 800c70a:	2300      	movs	r3, #0
 800c70c:	6063      	str	r3, [r4, #4]
 800c70e:	6923      	ldr	r3, [r4, #16]
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	f043 0308 	orr.w	r3, r3, #8
 800c718:	81a3      	strh	r3, [r4, #12]
 800c71a:	6923      	ldr	r3, [r4, #16]
 800c71c:	b94b      	cbnz	r3, 800c732 <__swsetup_r+0x9a>
 800c71e:	89a3      	ldrh	r3, [r4, #12]
 800c720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c728:	d003      	beq.n	800c732 <__swsetup_r+0x9a>
 800c72a:	4621      	mov	r1, r4
 800c72c:	4630      	mov	r0, r6
 800c72e:	f000 fa01 	bl	800cb34 <__smakebuf_r>
 800c732:	89a0      	ldrh	r0, [r4, #12]
 800c734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c738:	f010 0301 	ands.w	r3, r0, #1
 800c73c:	d00a      	beq.n	800c754 <__swsetup_r+0xbc>
 800c73e:	2300      	movs	r3, #0
 800c740:	60a3      	str	r3, [r4, #8]
 800c742:	6963      	ldr	r3, [r4, #20]
 800c744:	425b      	negs	r3, r3
 800c746:	61a3      	str	r3, [r4, #24]
 800c748:	6923      	ldr	r3, [r4, #16]
 800c74a:	b943      	cbnz	r3, 800c75e <__swsetup_r+0xc6>
 800c74c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c750:	d1ba      	bne.n	800c6c8 <__swsetup_r+0x30>
 800c752:	bd70      	pop	{r4, r5, r6, pc}
 800c754:	0781      	lsls	r1, r0, #30
 800c756:	bf58      	it	pl
 800c758:	6963      	ldrpl	r3, [r4, #20]
 800c75a:	60a3      	str	r3, [r4, #8]
 800c75c:	e7f4      	b.n	800c748 <__swsetup_r+0xb0>
 800c75e:	2000      	movs	r0, #0
 800c760:	e7f7      	b.n	800c752 <__swsetup_r+0xba>
 800c762:	bf00      	nop
 800c764:	240000e0 	.word	0x240000e0
 800c768:	0800d6e0 	.word	0x0800d6e0
 800c76c:	0800d700 	.word	0x0800d700
 800c770:	0800d6c0 	.word	0x0800d6c0

0800c774 <__sflush_r>:
 800c774:	898a      	ldrh	r2, [r1, #12]
 800c776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c77a:	4605      	mov	r5, r0
 800c77c:	0710      	lsls	r0, r2, #28
 800c77e:	460c      	mov	r4, r1
 800c780:	d458      	bmi.n	800c834 <__sflush_r+0xc0>
 800c782:	684b      	ldr	r3, [r1, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	dc05      	bgt.n	800c794 <__sflush_r+0x20>
 800c788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	dc02      	bgt.n	800c794 <__sflush_r+0x20>
 800c78e:	2000      	movs	r0, #0
 800c790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c796:	2e00      	cmp	r6, #0
 800c798:	d0f9      	beq.n	800c78e <__sflush_r+0x1a>
 800c79a:	2300      	movs	r3, #0
 800c79c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7a0:	682f      	ldr	r7, [r5, #0]
 800c7a2:	602b      	str	r3, [r5, #0]
 800c7a4:	d032      	beq.n	800c80c <__sflush_r+0x98>
 800c7a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7a8:	89a3      	ldrh	r3, [r4, #12]
 800c7aa:	075a      	lsls	r2, r3, #29
 800c7ac:	d505      	bpl.n	800c7ba <__sflush_r+0x46>
 800c7ae:	6863      	ldr	r3, [r4, #4]
 800c7b0:	1ac0      	subs	r0, r0, r3
 800c7b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7b4:	b10b      	cbz	r3, 800c7ba <__sflush_r+0x46>
 800c7b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7b8:	1ac0      	subs	r0, r0, r3
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	4602      	mov	r2, r0
 800c7be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7c0:	6a21      	ldr	r1, [r4, #32]
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	47b0      	blx	r6
 800c7c6:	1c43      	adds	r3, r0, #1
 800c7c8:	89a3      	ldrh	r3, [r4, #12]
 800c7ca:	d106      	bne.n	800c7da <__sflush_r+0x66>
 800c7cc:	6829      	ldr	r1, [r5, #0]
 800c7ce:	291d      	cmp	r1, #29
 800c7d0:	d82c      	bhi.n	800c82c <__sflush_r+0xb8>
 800c7d2:	4a2a      	ldr	r2, [pc, #168]	; (800c87c <__sflush_r+0x108>)
 800c7d4:	40ca      	lsrs	r2, r1
 800c7d6:	07d6      	lsls	r6, r2, #31
 800c7d8:	d528      	bpl.n	800c82c <__sflush_r+0xb8>
 800c7da:	2200      	movs	r2, #0
 800c7dc:	6062      	str	r2, [r4, #4]
 800c7de:	04d9      	lsls	r1, r3, #19
 800c7e0:	6922      	ldr	r2, [r4, #16]
 800c7e2:	6022      	str	r2, [r4, #0]
 800c7e4:	d504      	bpl.n	800c7f0 <__sflush_r+0x7c>
 800c7e6:	1c42      	adds	r2, r0, #1
 800c7e8:	d101      	bne.n	800c7ee <__sflush_r+0x7a>
 800c7ea:	682b      	ldr	r3, [r5, #0]
 800c7ec:	b903      	cbnz	r3, 800c7f0 <__sflush_r+0x7c>
 800c7ee:	6560      	str	r0, [r4, #84]	; 0x54
 800c7f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7f2:	602f      	str	r7, [r5, #0]
 800c7f4:	2900      	cmp	r1, #0
 800c7f6:	d0ca      	beq.n	800c78e <__sflush_r+0x1a>
 800c7f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7fc:	4299      	cmp	r1, r3
 800c7fe:	d002      	beq.n	800c806 <__sflush_r+0x92>
 800c800:	4628      	mov	r0, r5
 800c802:	f000 f9d7 	bl	800cbb4 <_free_r>
 800c806:	2000      	movs	r0, #0
 800c808:	6360      	str	r0, [r4, #52]	; 0x34
 800c80a:	e7c1      	b.n	800c790 <__sflush_r+0x1c>
 800c80c:	6a21      	ldr	r1, [r4, #32]
 800c80e:	2301      	movs	r3, #1
 800c810:	4628      	mov	r0, r5
 800c812:	47b0      	blx	r6
 800c814:	1c41      	adds	r1, r0, #1
 800c816:	d1c7      	bne.n	800c7a8 <__sflush_r+0x34>
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0c4      	beq.n	800c7a8 <__sflush_r+0x34>
 800c81e:	2b1d      	cmp	r3, #29
 800c820:	d001      	beq.n	800c826 <__sflush_r+0xb2>
 800c822:	2b16      	cmp	r3, #22
 800c824:	d101      	bne.n	800c82a <__sflush_r+0xb6>
 800c826:	602f      	str	r7, [r5, #0]
 800c828:	e7b1      	b.n	800c78e <__sflush_r+0x1a>
 800c82a:	89a3      	ldrh	r3, [r4, #12]
 800c82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	e7ad      	b.n	800c790 <__sflush_r+0x1c>
 800c834:	690f      	ldr	r7, [r1, #16]
 800c836:	2f00      	cmp	r7, #0
 800c838:	d0a9      	beq.n	800c78e <__sflush_r+0x1a>
 800c83a:	0793      	lsls	r3, r2, #30
 800c83c:	680e      	ldr	r6, [r1, #0]
 800c83e:	bf08      	it	eq
 800c840:	694b      	ldreq	r3, [r1, #20]
 800c842:	600f      	str	r7, [r1, #0]
 800c844:	bf18      	it	ne
 800c846:	2300      	movne	r3, #0
 800c848:	eba6 0807 	sub.w	r8, r6, r7
 800c84c:	608b      	str	r3, [r1, #8]
 800c84e:	f1b8 0f00 	cmp.w	r8, #0
 800c852:	dd9c      	ble.n	800c78e <__sflush_r+0x1a>
 800c854:	6a21      	ldr	r1, [r4, #32]
 800c856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c858:	4643      	mov	r3, r8
 800c85a:	463a      	mov	r2, r7
 800c85c:	4628      	mov	r0, r5
 800c85e:	47b0      	blx	r6
 800c860:	2800      	cmp	r0, #0
 800c862:	dc06      	bgt.n	800c872 <__sflush_r+0xfe>
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c86a:	81a3      	strh	r3, [r4, #12]
 800c86c:	f04f 30ff 	mov.w	r0, #4294967295
 800c870:	e78e      	b.n	800c790 <__sflush_r+0x1c>
 800c872:	4407      	add	r7, r0
 800c874:	eba8 0800 	sub.w	r8, r8, r0
 800c878:	e7e9      	b.n	800c84e <__sflush_r+0xda>
 800c87a:	bf00      	nop
 800c87c:	20400001 	.word	0x20400001

0800c880 <_fflush_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	690b      	ldr	r3, [r1, #16]
 800c884:	4605      	mov	r5, r0
 800c886:	460c      	mov	r4, r1
 800c888:	b913      	cbnz	r3, 800c890 <_fflush_r+0x10>
 800c88a:	2500      	movs	r5, #0
 800c88c:	4628      	mov	r0, r5
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	b118      	cbz	r0, 800c89a <_fflush_r+0x1a>
 800c892:	6983      	ldr	r3, [r0, #24]
 800c894:	b90b      	cbnz	r3, 800c89a <_fflush_r+0x1a>
 800c896:	f000 f887 	bl	800c9a8 <__sinit>
 800c89a:	4b14      	ldr	r3, [pc, #80]	; (800c8ec <_fflush_r+0x6c>)
 800c89c:	429c      	cmp	r4, r3
 800c89e:	d11b      	bne.n	800c8d8 <_fflush_r+0x58>
 800c8a0:	686c      	ldr	r4, [r5, #4]
 800c8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d0ef      	beq.n	800c88a <_fflush_r+0xa>
 800c8aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8ac:	07d0      	lsls	r0, r2, #31
 800c8ae:	d404      	bmi.n	800c8ba <_fflush_r+0x3a>
 800c8b0:	0599      	lsls	r1, r3, #22
 800c8b2:	d402      	bmi.n	800c8ba <_fflush_r+0x3a>
 800c8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8b6:	f000 f915 	bl	800cae4 <__retarget_lock_acquire_recursive>
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	4621      	mov	r1, r4
 800c8be:	f7ff ff59 	bl	800c774 <__sflush_r>
 800c8c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8c4:	07da      	lsls	r2, r3, #31
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	d4e0      	bmi.n	800c88c <_fflush_r+0xc>
 800c8ca:	89a3      	ldrh	r3, [r4, #12]
 800c8cc:	059b      	lsls	r3, r3, #22
 800c8ce:	d4dd      	bmi.n	800c88c <_fflush_r+0xc>
 800c8d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8d2:	f000 f908 	bl	800cae6 <__retarget_lock_release_recursive>
 800c8d6:	e7d9      	b.n	800c88c <_fflush_r+0xc>
 800c8d8:	4b05      	ldr	r3, [pc, #20]	; (800c8f0 <_fflush_r+0x70>)
 800c8da:	429c      	cmp	r4, r3
 800c8dc:	d101      	bne.n	800c8e2 <_fflush_r+0x62>
 800c8de:	68ac      	ldr	r4, [r5, #8]
 800c8e0:	e7df      	b.n	800c8a2 <_fflush_r+0x22>
 800c8e2:	4b04      	ldr	r3, [pc, #16]	; (800c8f4 <_fflush_r+0x74>)
 800c8e4:	429c      	cmp	r4, r3
 800c8e6:	bf08      	it	eq
 800c8e8:	68ec      	ldreq	r4, [r5, #12]
 800c8ea:	e7da      	b.n	800c8a2 <_fflush_r+0x22>
 800c8ec:	0800d6e0 	.word	0x0800d6e0
 800c8f0:	0800d700 	.word	0x0800d700
 800c8f4:	0800d6c0 	.word	0x0800d6c0

0800c8f8 <std>:
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	b510      	push	{r4, lr}
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	e9c0 3300 	strd	r3, r3, [r0]
 800c902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c906:	6083      	str	r3, [r0, #8]
 800c908:	8181      	strh	r1, [r0, #12]
 800c90a:	6643      	str	r3, [r0, #100]	; 0x64
 800c90c:	81c2      	strh	r2, [r0, #14]
 800c90e:	6183      	str	r3, [r0, #24]
 800c910:	4619      	mov	r1, r3
 800c912:	2208      	movs	r2, #8
 800c914:	305c      	adds	r0, #92	; 0x5c
 800c916:	f7ff fdd7 	bl	800c4c8 <memset>
 800c91a:	4b05      	ldr	r3, [pc, #20]	; (800c930 <std+0x38>)
 800c91c:	6263      	str	r3, [r4, #36]	; 0x24
 800c91e:	4b05      	ldr	r3, [pc, #20]	; (800c934 <std+0x3c>)
 800c920:	62a3      	str	r3, [r4, #40]	; 0x28
 800c922:	4b05      	ldr	r3, [pc, #20]	; (800c938 <std+0x40>)
 800c924:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c926:	4b05      	ldr	r3, [pc, #20]	; (800c93c <std+0x44>)
 800c928:	6224      	str	r4, [r4, #32]
 800c92a:	6323      	str	r3, [r4, #48]	; 0x30
 800c92c:	bd10      	pop	{r4, pc}
 800c92e:	bf00      	nop
 800c930:	0800d371 	.word	0x0800d371
 800c934:	0800d393 	.word	0x0800d393
 800c938:	0800d3cb 	.word	0x0800d3cb
 800c93c:	0800d3ef 	.word	0x0800d3ef

0800c940 <_cleanup_r>:
 800c940:	4901      	ldr	r1, [pc, #4]	; (800c948 <_cleanup_r+0x8>)
 800c942:	f000 b8af 	b.w	800caa4 <_fwalk_reent>
 800c946:	bf00      	nop
 800c948:	0800c881 	.word	0x0800c881

0800c94c <__sfmoreglue>:
 800c94c:	b570      	push	{r4, r5, r6, lr}
 800c94e:	2268      	movs	r2, #104	; 0x68
 800c950:	1e4d      	subs	r5, r1, #1
 800c952:	4355      	muls	r5, r2
 800c954:	460e      	mov	r6, r1
 800c956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c95a:	f000 f997 	bl	800cc8c <_malloc_r>
 800c95e:	4604      	mov	r4, r0
 800c960:	b140      	cbz	r0, 800c974 <__sfmoreglue+0x28>
 800c962:	2100      	movs	r1, #0
 800c964:	e9c0 1600 	strd	r1, r6, [r0]
 800c968:	300c      	adds	r0, #12
 800c96a:	60a0      	str	r0, [r4, #8]
 800c96c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c970:	f7ff fdaa 	bl	800c4c8 <memset>
 800c974:	4620      	mov	r0, r4
 800c976:	bd70      	pop	{r4, r5, r6, pc}

0800c978 <__sfp_lock_acquire>:
 800c978:	4801      	ldr	r0, [pc, #4]	; (800c980 <__sfp_lock_acquire+0x8>)
 800c97a:	f000 b8b3 	b.w	800cae4 <__retarget_lock_acquire_recursive>
 800c97e:	bf00      	nop
 800c980:	2400115d 	.word	0x2400115d

0800c984 <__sfp_lock_release>:
 800c984:	4801      	ldr	r0, [pc, #4]	; (800c98c <__sfp_lock_release+0x8>)
 800c986:	f000 b8ae 	b.w	800cae6 <__retarget_lock_release_recursive>
 800c98a:	bf00      	nop
 800c98c:	2400115d 	.word	0x2400115d

0800c990 <__sinit_lock_acquire>:
 800c990:	4801      	ldr	r0, [pc, #4]	; (800c998 <__sinit_lock_acquire+0x8>)
 800c992:	f000 b8a7 	b.w	800cae4 <__retarget_lock_acquire_recursive>
 800c996:	bf00      	nop
 800c998:	2400115e 	.word	0x2400115e

0800c99c <__sinit_lock_release>:
 800c99c:	4801      	ldr	r0, [pc, #4]	; (800c9a4 <__sinit_lock_release+0x8>)
 800c99e:	f000 b8a2 	b.w	800cae6 <__retarget_lock_release_recursive>
 800c9a2:	bf00      	nop
 800c9a4:	2400115e 	.word	0x2400115e

0800c9a8 <__sinit>:
 800c9a8:	b510      	push	{r4, lr}
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	f7ff fff0 	bl	800c990 <__sinit_lock_acquire>
 800c9b0:	69a3      	ldr	r3, [r4, #24]
 800c9b2:	b11b      	cbz	r3, 800c9bc <__sinit+0x14>
 800c9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9b8:	f7ff bff0 	b.w	800c99c <__sinit_lock_release>
 800c9bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c9c0:	6523      	str	r3, [r4, #80]	; 0x50
 800c9c2:	4b13      	ldr	r3, [pc, #76]	; (800ca10 <__sinit+0x68>)
 800c9c4:	4a13      	ldr	r2, [pc, #76]	; (800ca14 <__sinit+0x6c>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c9ca:	42a3      	cmp	r3, r4
 800c9cc:	bf04      	itt	eq
 800c9ce:	2301      	moveq	r3, #1
 800c9d0:	61a3      	streq	r3, [r4, #24]
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	f000 f820 	bl	800ca18 <__sfp>
 800c9d8:	6060      	str	r0, [r4, #4]
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f000 f81c 	bl	800ca18 <__sfp>
 800c9e0:	60a0      	str	r0, [r4, #8]
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	f000 f818 	bl	800ca18 <__sfp>
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	60e0      	str	r0, [r4, #12]
 800c9ec:	2104      	movs	r1, #4
 800c9ee:	6860      	ldr	r0, [r4, #4]
 800c9f0:	f7ff ff82 	bl	800c8f8 <std>
 800c9f4:	68a0      	ldr	r0, [r4, #8]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	2109      	movs	r1, #9
 800c9fa:	f7ff ff7d 	bl	800c8f8 <std>
 800c9fe:	68e0      	ldr	r0, [r4, #12]
 800ca00:	2202      	movs	r2, #2
 800ca02:	2112      	movs	r1, #18
 800ca04:	f7ff ff78 	bl	800c8f8 <std>
 800ca08:	2301      	movs	r3, #1
 800ca0a:	61a3      	str	r3, [r4, #24]
 800ca0c:	e7d2      	b.n	800c9b4 <__sinit+0xc>
 800ca0e:	bf00      	nop
 800ca10:	0800d6bc 	.word	0x0800d6bc
 800ca14:	0800c941 	.word	0x0800c941

0800ca18 <__sfp>:
 800ca18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca1a:	4607      	mov	r7, r0
 800ca1c:	f7ff ffac 	bl	800c978 <__sfp_lock_acquire>
 800ca20:	4b1e      	ldr	r3, [pc, #120]	; (800ca9c <__sfp+0x84>)
 800ca22:	681e      	ldr	r6, [r3, #0]
 800ca24:	69b3      	ldr	r3, [r6, #24]
 800ca26:	b913      	cbnz	r3, 800ca2e <__sfp+0x16>
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f7ff ffbd 	bl	800c9a8 <__sinit>
 800ca2e:	3648      	adds	r6, #72	; 0x48
 800ca30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	d503      	bpl.n	800ca40 <__sfp+0x28>
 800ca38:	6833      	ldr	r3, [r6, #0]
 800ca3a:	b30b      	cbz	r3, 800ca80 <__sfp+0x68>
 800ca3c:	6836      	ldr	r6, [r6, #0]
 800ca3e:	e7f7      	b.n	800ca30 <__sfp+0x18>
 800ca40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca44:	b9d5      	cbnz	r5, 800ca7c <__sfp+0x64>
 800ca46:	4b16      	ldr	r3, [pc, #88]	; (800caa0 <__sfp+0x88>)
 800ca48:	60e3      	str	r3, [r4, #12]
 800ca4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca4e:	6665      	str	r5, [r4, #100]	; 0x64
 800ca50:	f000 f847 	bl	800cae2 <__retarget_lock_init_recursive>
 800ca54:	f7ff ff96 	bl	800c984 <__sfp_lock_release>
 800ca58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ca5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ca60:	6025      	str	r5, [r4, #0]
 800ca62:	61a5      	str	r5, [r4, #24]
 800ca64:	2208      	movs	r2, #8
 800ca66:	4629      	mov	r1, r5
 800ca68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ca6c:	f7ff fd2c 	bl	800c4c8 <memset>
 800ca70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ca74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ca78:	4620      	mov	r0, r4
 800ca7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca7c:	3468      	adds	r4, #104	; 0x68
 800ca7e:	e7d9      	b.n	800ca34 <__sfp+0x1c>
 800ca80:	2104      	movs	r1, #4
 800ca82:	4638      	mov	r0, r7
 800ca84:	f7ff ff62 	bl	800c94c <__sfmoreglue>
 800ca88:	4604      	mov	r4, r0
 800ca8a:	6030      	str	r0, [r6, #0]
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d1d5      	bne.n	800ca3c <__sfp+0x24>
 800ca90:	f7ff ff78 	bl	800c984 <__sfp_lock_release>
 800ca94:	230c      	movs	r3, #12
 800ca96:	603b      	str	r3, [r7, #0]
 800ca98:	e7ee      	b.n	800ca78 <__sfp+0x60>
 800ca9a:	bf00      	nop
 800ca9c:	0800d6bc 	.word	0x0800d6bc
 800caa0:	ffff0001 	.word	0xffff0001

0800caa4 <_fwalk_reent>:
 800caa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caa8:	4606      	mov	r6, r0
 800caaa:	4688      	mov	r8, r1
 800caac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cab0:	2700      	movs	r7, #0
 800cab2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cab6:	f1b9 0901 	subs.w	r9, r9, #1
 800caba:	d505      	bpl.n	800cac8 <_fwalk_reent+0x24>
 800cabc:	6824      	ldr	r4, [r4, #0]
 800cabe:	2c00      	cmp	r4, #0
 800cac0:	d1f7      	bne.n	800cab2 <_fwalk_reent+0xe>
 800cac2:	4638      	mov	r0, r7
 800cac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cac8:	89ab      	ldrh	r3, [r5, #12]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d907      	bls.n	800cade <_fwalk_reent+0x3a>
 800cace:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cad2:	3301      	adds	r3, #1
 800cad4:	d003      	beq.n	800cade <_fwalk_reent+0x3a>
 800cad6:	4629      	mov	r1, r5
 800cad8:	4630      	mov	r0, r6
 800cada:	47c0      	blx	r8
 800cadc:	4307      	orrs	r7, r0
 800cade:	3568      	adds	r5, #104	; 0x68
 800cae0:	e7e9      	b.n	800cab6 <_fwalk_reent+0x12>

0800cae2 <__retarget_lock_init_recursive>:
 800cae2:	4770      	bx	lr

0800cae4 <__retarget_lock_acquire_recursive>:
 800cae4:	4770      	bx	lr

0800cae6 <__retarget_lock_release_recursive>:
 800cae6:	4770      	bx	lr

0800cae8 <__swhatbuf_r>:
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	460e      	mov	r6, r1
 800caec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf0:	2900      	cmp	r1, #0
 800caf2:	b096      	sub	sp, #88	; 0x58
 800caf4:	4614      	mov	r4, r2
 800caf6:	461d      	mov	r5, r3
 800caf8:	da08      	bge.n	800cb0c <__swhatbuf_r+0x24>
 800cafa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	602a      	str	r2, [r5, #0]
 800cb02:	061a      	lsls	r2, r3, #24
 800cb04:	d410      	bmi.n	800cb28 <__swhatbuf_r+0x40>
 800cb06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb0a:	e00e      	b.n	800cb2a <__swhatbuf_r+0x42>
 800cb0c:	466a      	mov	r2, sp
 800cb0e:	f000 fc95 	bl	800d43c <_fstat_r>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	dbf1      	blt.n	800cafa <__swhatbuf_r+0x12>
 800cb16:	9a01      	ldr	r2, [sp, #4]
 800cb18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb20:	425a      	negs	r2, r3
 800cb22:	415a      	adcs	r2, r3
 800cb24:	602a      	str	r2, [r5, #0]
 800cb26:	e7ee      	b.n	800cb06 <__swhatbuf_r+0x1e>
 800cb28:	2340      	movs	r3, #64	; 0x40
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	b016      	add	sp, #88	; 0x58
 800cb30:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb34 <__smakebuf_r>:
 800cb34:	898b      	ldrh	r3, [r1, #12]
 800cb36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb38:	079d      	lsls	r5, r3, #30
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	d507      	bpl.n	800cb50 <__smakebuf_r+0x1c>
 800cb40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	6123      	str	r3, [r4, #16]
 800cb48:	2301      	movs	r3, #1
 800cb4a:	6163      	str	r3, [r4, #20]
 800cb4c:	b002      	add	sp, #8
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	ab01      	add	r3, sp, #4
 800cb52:	466a      	mov	r2, sp
 800cb54:	f7ff ffc8 	bl	800cae8 <__swhatbuf_r>
 800cb58:	9900      	ldr	r1, [sp, #0]
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f000 f895 	bl	800cc8c <_malloc_r>
 800cb62:	b948      	cbnz	r0, 800cb78 <__smakebuf_r+0x44>
 800cb64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb68:	059a      	lsls	r2, r3, #22
 800cb6a:	d4ef      	bmi.n	800cb4c <__smakebuf_r+0x18>
 800cb6c:	f023 0303 	bic.w	r3, r3, #3
 800cb70:	f043 0302 	orr.w	r3, r3, #2
 800cb74:	81a3      	strh	r3, [r4, #12]
 800cb76:	e7e3      	b.n	800cb40 <__smakebuf_r+0xc>
 800cb78:	4b0d      	ldr	r3, [pc, #52]	; (800cbb0 <__smakebuf_r+0x7c>)
 800cb7a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb7c:	89a3      	ldrh	r3, [r4, #12]
 800cb7e:	6020      	str	r0, [r4, #0]
 800cb80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb84:	81a3      	strh	r3, [r4, #12]
 800cb86:	9b00      	ldr	r3, [sp, #0]
 800cb88:	6163      	str	r3, [r4, #20]
 800cb8a:	9b01      	ldr	r3, [sp, #4]
 800cb8c:	6120      	str	r0, [r4, #16]
 800cb8e:	b15b      	cbz	r3, 800cba8 <__smakebuf_r+0x74>
 800cb90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb94:	4630      	mov	r0, r6
 800cb96:	f000 fc63 	bl	800d460 <_isatty_r>
 800cb9a:	b128      	cbz	r0, 800cba8 <__smakebuf_r+0x74>
 800cb9c:	89a3      	ldrh	r3, [r4, #12]
 800cb9e:	f023 0303 	bic.w	r3, r3, #3
 800cba2:	f043 0301 	orr.w	r3, r3, #1
 800cba6:	81a3      	strh	r3, [r4, #12]
 800cba8:	89a0      	ldrh	r0, [r4, #12]
 800cbaa:	4305      	orrs	r5, r0
 800cbac:	81a5      	strh	r5, [r4, #12]
 800cbae:	e7cd      	b.n	800cb4c <__smakebuf_r+0x18>
 800cbb0:	0800c941 	.word	0x0800c941

0800cbb4 <_free_r>:
 800cbb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbb6:	2900      	cmp	r1, #0
 800cbb8:	d044      	beq.n	800cc44 <_free_r+0x90>
 800cbba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbbe:	9001      	str	r0, [sp, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f1a1 0404 	sub.w	r4, r1, #4
 800cbc6:	bfb8      	it	lt
 800cbc8:	18e4      	addlt	r4, r4, r3
 800cbca:	f000 fc6b 	bl	800d4a4 <__malloc_lock>
 800cbce:	4a1e      	ldr	r2, [pc, #120]	; (800cc48 <_free_r+0x94>)
 800cbd0:	9801      	ldr	r0, [sp, #4]
 800cbd2:	6813      	ldr	r3, [r2, #0]
 800cbd4:	b933      	cbnz	r3, 800cbe4 <_free_r+0x30>
 800cbd6:	6063      	str	r3, [r4, #4]
 800cbd8:	6014      	str	r4, [r2, #0]
 800cbda:	b003      	add	sp, #12
 800cbdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbe0:	f000 bc66 	b.w	800d4b0 <__malloc_unlock>
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	d908      	bls.n	800cbfa <_free_r+0x46>
 800cbe8:	6825      	ldr	r5, [r4, #0]
 800cbea:	1961      	adds	r1, r4, r5
 800cbec:	428b      	cmp	r3, r1
 800cbee:	bf01      	itttt	eq
 800cbf0:	6819      	ldreq	r1, [r3, #0]
 800cbf2:	685b      	ldreq	r3, [r3, #4]
 800cbf4:	1949      	addeq	r1, r1, r5
 800cbf6:	6021      	streq	r1, [r4, #0]
 800cbf8:	e7ed      	b.n	800cbd6 <_free_r+0x22>
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	b10b      	cbz	r3, 800cc04 <_free_r+0x50>
 800cc00:	42a3      	cmp	r3, r4
 800cc02:	d9fa      	bls.n	800cbfa <_free_r+0x46>
 800cc04:	6811      	ldr	r1, [r2, #0]
 800cc06:	1855      	adds	r5, r2, r1
 800cc08:	42a5      	cmp	r5, r4
 800cc0a:	d10b      	bne.n	800cc24 <_free_r+0x70>
 800cc0c:	6824      	ldr	r4, [r4, #0]
 800cc0e:	4421      	add	r1, r4
 800cc10:	1854      	adds	r4, r2, r1
 800cc12:	42a3      	cmp	r3, r4
 800cc14:	6011      	str	r1, [r2, #0]
 800cc16:	d1e0      	bne.n	800cbda <_free_r+0x26>
 800cc18:	681c      	ldr	r4, [r3, #0]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	6053      	str	r3, [r2, #4]
 800cc1e:	4421      	add	r1, r4
 800cc20:	6011      	str	r1, [r2, #0]
 800cc22:	e7da      	b.n	800cbda <_free_r+0x26>
 800cc24:	d902      	bls.n	800cc2c <_free_r+0x78>
 800cc26:	230c      	movs	r3, #12
 800cc28:	6003      	str	r3, [r0, #0]
 800cc2a:	e7d6      	b.n	800cbda <_free_r+0x26>
 800cc2c:	6825      	ldr	r5, [r4, #0]
 800cc2e:	1961      	adds	r1, r4, r5
 800cc30:	428b      	cmp	r3, r1
 800cc32:	bf04      	itt	eq
 800cc34:	6819      	ldreq	r1, [r3, #0]
 800cc36:	685b      	ldreq	r3, [r3, #4]
 800cc38:	6063      	str	r3, [r4, #4]
 800cc3a:	bf04      	itt	eq
 800cc3c:	1949      	addeq	r1, r1, r5
 800cc3e:	6021      	streq	r1, [r4, #0]
 800cc40:	6054      	str	r4, [r2, #4]
 800cc42:	e7ca      	b.n	800cbda <_free_r+0x26>
 800cc44:	b003      	add	sp, #12
 800cc46:	bd30      	pop	{r4, r5, pc}
 800cc48:	24001160 	.word	0x24001160

0800cc4c <sbrk_aligned>:
 800cc4c:	b570      	push	{r4, r5, r6, lr}
 800cc4e:	4e0e      	ldr	r6, [pc, #56]	; (800cc88 <sbrk_aligned+0x3c>)
 800cc50:	460c      	mov	r4, r1
 800cc52:	6831      	ldr	r1, [r6, #0]
 800cc54:	4605      	mov	r5, r0
 800cc56:	b911      	cbnz	r1, 800cc5e <sbrk_aligned+0x12>
 800cc58:	f000 fb7a 	bl	800d350 <_sbrk_r>
 800cc5c:	6030      	str	r0, [r6, #0]
 800cc5e:	4621      	mov	r1, r4
 800cc60:	4628      	mov	r0, r5
 800cc62:	f000 fb75 	bl	800d350 <_sbrk_r>
 800cc66:	1c43      	adds	r3, r0, #1
 800cc68:	d00a      	beq.n	800cc80 <sbrk_aligned+0x34>
 800cc6a:	1cc4      	adds	r4, r0, #3
 800cc6c:	f024 0403 	bic.w	r4, r4, #3
 800cc70:	42a0      	cmp	r0, r4
 800cc72:	d007      	beq.n	800cc84 <sbrk_aligned+0x38>
 800cc74:	1a21      	subs	r1, r4, r0
 800cc76:	4628      	mov	r0, r5
 800cc78:	f000 fb6a 	bl	800d350 <_sbrk_r>
 800cc7c:	3001      	adds	r0, #1
 800cc7e:	d101      	bne.n	800cc84 <sbrk_aligned+0x38>
 800cc80:	f04f 34ff 	mov.w	r4, #4294967295
 800cc84:	4620      	mov	r0, r4
 800cc86:	bd70      	pop	{r4, r5, r6, pc}
 800cc88:	24001164 	.word	0x24001164

0800cc8c <_malloc_r>:
 800cc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc90:	1ccd      	adds	r5, r1, #3
 800cc92:	f025 0503 	bic.w	r5, r5, #3
 800cc96:	3508      	adds	r5, #8
 800cc98:	2d0c      	cmp	r5, #12
 800cc9a:	bf38      	it	cc
 800cc9c:	250c      	movcc	r5, #12
 800cc9e:	2d00      	cmp	r5, #0
 800cca0:	4607      	mov	r7, r0
 800cca2:	db01      	blt.n	800cca8 <_malloc_r+0x1c>
 800cca4:	42a9      	cmp	r1, r5
 800cca6:	d905      	bls.n	800ccb4 <_malloc_r+0x28>
 800cca8:	230c      	movs	r3, #12
 800ccaa:	603b      	str	r3, [r7, #0]
 800ccac:	2600      	movs	r6, #0
 800ccae:	4630      	mov	r0, r6
 800ccb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccb4:	4e2e      	ldr	r6, [pc, #184]	; (800cd70 <_malloc_r+0xe4>)
 800ccb6:	f000 fbf5 	bl	800d4a4 <__malloc_lock>
 800ccba:	6833      	ldr	r3, [r6, #0]
 800ccbc:	461c      	mov	r4, r3
 800ccbe:	bb34      	cbnz	r4, 800cd0e <_malloc_r+0x82>
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	4638      	mov	r0, r7
 800ccc4:	f7ff ffc2 	bl	800cc4c <sbrk_aligned>
 800ccc8:	1c43      	adds	r3, r0, #1
 800ccca:	4604      	mov	r4, r0
 800cccc:	d14d      	bne.n	800cd6a <_malloc_r+0xde>
 800ccce:	6834      	ldr	r4, [r6, #0]
 800ccd0:	4626      	mov	r6, r4
 800ccd2:	2e00      	cmp	r6, #0
 800ccd4:	d140      	bne.n	800cd58 <_malloc_r+0xcc>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	4631      	mov	r1, r6
 800ccda:	4638      	mov	r0, r7
 800ccdc:	eb04 0803 	add.w	r8, r4, r3
 800cce0:	f000 fb36 	bl	800d350 <_sbrk_r>
 800cce4:	4580      	cmp	r8, r0
 800cce6:	d13a      	bne.n	800cd5e <_malloc_r+0xd2>
 800cce8:	6821      	ldr	r1, [r4, #0]
 800ccea:	3503      	adds	r5, #3
 800ccec:	1a6d      	subs	r5, r5, r1
 800ccee:	f025 0503 	bic.w	r5, r5, #3
 800ccf2:	3508      	adds	r5, #8
 800ccf4:	2d0c      	cmp	r5, #12
 800ccf6:	bf38      	it	cc
 800ccf8:	250c      	movcc	r5, #12
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	f7ff ffa5 	bl	800cc4c <sbrk_aligned>
 800cd02:	3001      	adds	r0, #1
 800cd04:	d02b      	beq.n	800cd5e <_malloc_r+0xd2>
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	442b      	add	r3, r5
 800cd0a:	6023      	str	r3, [r4, #0]
 800cd0c:	e00e      	b.n	800cd2c <_malloc_r+0xa0>
 800cd0e:	6822      	ldr	r2, [r4, #0]
 800cd10:	1b52      	subs	r2, r2, r5
 800cd12:	d41e      	bmi.n	800cd52 <_malloc_r+0xc6>
 800cd14:	2a0b      	cmp	r2, #11
 800cd16:	d916      	bls.n	800cd46 <_malloc_r+0xba>
 800cd18:	1961      	adds	r1, r4, r5
 800cd1a:	42a3      	cmp	r3, r4
 800cd1c:	6025      	str	r5, [r4, #0]
 800cd1e:	bf18      	it	ne
 800cd20:	6059      	strne	r1, [r3, #4]
 800cd22:	6863      	ldr	r3, [r4, #4]
 800cd24:	bf08      	it	eq
 800cd26:	6031      	streq	r1, [r6, #0]
 800cd28:	5162      	str	r2, [r4, r5]
 800cd2a:	604b      	str	r3, [r1, #4]
 800cd2c:	4638      	mov	r0, r7
 800cd2e:	f104 060b 	add.w	r6, r4, #11
 800cd32:	f000 fbbd 	bl	800d4b0 <__malloc_unlock>
 800cd36:	f026 0607 	bic.w	r6, r6, #7
 800cd3a:	1d23      	adds	r3, r4, #4
 800cd3c:	1af2      	subs	r2, r6, r3
 800cd3e:	d0b6      	beq.n	800ccae <_malloc_r+0x22>
 800cd40:	1b9b      	subs	r3, r3, r6
 800cd42:	50a3      	str	r3, [r4, r2]
 800cd44:	e7b3      	b.n	800ccae <_malloc_r+0x22>
 800cd46:	6862      	ldr	r2, [r4, #4]
 800cd48:	42a3      	cmp	r3, r4
 800cd4a:	bf0c      	ite	eq
 800cd4c:	6032      	streq	r2, [r6, #0]
 800cd4e:	605a      	strne	r2, [r3, #4]
 800cd50:	e7ec      	b.n	800cd2c <_malloc_r+0xa0>
 800cd52:	4623      	mov	r3, r4
 800cd54:	6864      	ldr	r4, [r4, #4]
 800cd56:	e7b2      	b.n	800ccbe <_malloc_r+0x32>
 800cd58:	4634      	mov	r4, r6
 800cd5a:	6876      	ldr	r6, [r6, #4]
 800cd5c:	e7b9      	b.n	800ccd2 <_malloc_r+0x46>
 800cd5e:	230c      	movs	r3, #12
 800cd60:	603b      	str	r3, [r7, #0]
 800cd62:	4638      	mov	r0, r7
 800cd64:	f000 fba4 	bl	800d4b0 <__malloc_unlock>
 800cd68:	e7a1      	b.n	800ccae <_malloc_r+0x22>
 800cd6a:	6025      	str	r5, [r4, #0]
 800cd6c:	e7de      	b.n	800cd2c <_malloc_r+0xa0>
 800cd6e:	bf00      	nop
 800cd70:	24001160 	.word	0x24001160

0800cd74 <__sfputc_r>:
 800cd74:	6893      	ldr	r3, [r2, #8]
 800cd76:	3b01      	subs	r3, #1
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	b410      	push	{r4}
 800cd7c:	6093      	str	r3, [r2, #8]
 800cd7e:	da08      	bge.n	800cd92 <__sfputc_r+0x1e>
 800cd80:	6994      	ldr	r4, [r2, #24]
 800cd82:	42a3      	cmp	r3, r4
 800cd84:	db01      	blt.n	800cd8a <__sfputc_r+0x16>
 800cd86:	290a      	cmp	r1, #10
 800cd88:	d103      	bne.n	800cd92 <__sfputc_r+0x1e>
 800cd8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd8e:	f7ff bc31 	b.w	800c5f4 <__swbuf_r>
 800cd92:	6813      	ldr	r3, [r2, #0]
 800cd94:	1c58      	adds	r0, r3, #1
 800cd96:	6010      	str	r0, [r2, #0]
 800cd98:	7019      	strb	r1, [r3, #0]
 800cd9a:	4608      	mov	r0, r1
 800cd9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <__sfputs_r>:
 800cda2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda4:	4606      	mov	r6, r0
 800cda6:	460f      	mov	r7, r1
 800cda8:	4614      	mov	r4, r2
 800cdaa:	18d5      	adds	r5, r2, r3
 800cdac:	42ac      	cmp	r4, r5
 800cdae:	d101      	bne.n	800cdb4 <__sfputs_r+0x12>
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	e007      	b.n	800cdc4 <__sfputs_r+0x22>
 800cdb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdb8:	463a      	mov	r2, r7
 800cdba:	4630      	mov	r0, r6
 800cdbc:	f7ff ffda 	bl	800cd74 <__sfputc_r>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	d1f3      	bne.n	800cdac <__sfputs_r+0xa>
 800cdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cdc8 <_vfiprintf_r>:
 800cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdcc:	460d      	mov	r5, r1
 800cdce:	b09d      	sub	sp, #116	; 0x74
 800cdd0:	4614      	mov	r4, r2
 800cdd2:	4698      	mov	r8, r3
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	b118      	cbz	r0, 800cde0 <_vfiprintf_r+0x18>
 800cdd8:	6983      	ldr	r3, [r0, #24]
 800cdda:	b90b      	cbnz	r3, 800cde0 <_vfiprintf_r+0x18>
 800cddc:	f7ff fde4 	bl	800c9a8 <__sinit>
 800cde0:	4b89      	ldr	r3, [pc, #548]	; (800d008 <_vfiprintf_r+0x240>)
 800cde2:	429d      	cmp	r5, r3
 800cde4:	d11b      	bne.n	800ce1e <_vfiprintf_r+0x56>
 800cde6:	6875      	ldr	r5, [r6, #4]
 800cde8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdea:	07d9      	lsls	r1, r3, #31
 800cdec:	d405      	bmi.n	800cdfa <_vfiprintf_r+0x32>
 800cdee:	89ab      	ldrh	r3, [r5, #12]
 800cdf0:	059a      	lsls	r2, r3, #22
 800cdf2:	d402      	bmi.n	800cdfa <_vfiprintf_r+0x32>
 800cdf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdf6:	f7ff fe75 	bl	800cae4 <__retarget_lock_acquire_recursive>
 800cdfa:	89ab      	ldrh	r3, [r5, #12]
 800cdfc:	071b      	lsls	r3, r3, #28
 800cdfe:	d501      	bpl.n	800ce04 <_vfiprintf_r+0x3c>
 800ce00:	692b      	ldr	r3, [r5, #16]
 800ce02:	b9eb      	cbnz	r3, 800ce40 <_vfiprintf_r+0x78>
 800ce04:	4629      	mov	r1, r5
 800ce06:	4630      	mov	r0, r6
 800ce08:	f7ff fc46 	bl	800c698 <__swsetup_r>
 800ce0c:	b1c0      	cbz	r0, 800ce40 <_vfiprintf_r+0x78>
 800ce0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce10:	07dc      	lsls	r4, r3, #31
 800ce12:	d50e      	bpl.n	800ce32 <_vfiprintf_r+0x6a>
 800ce14:	f04f 30ff 	mov.w	r0, #4294967295
 800ce18:	b01d      	add	sp, #116	; 0x74
 800ce1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce1e:	4b7b      	ldr	r3, [pc, #492]	; (800d00c <_vfiprintf_r+0x244>)
 800ce20:	429d      	cmp	r5, r3
 800ce22:	d101      	bne.n	800ce28 <_vfiprintf_r+0x60>
 800ce24:	68b5      	ldr	r5, [r6, #8]
 800ce26:	e7df      	b.n	800cde8 <_vfiprintf_r+0x20>
 800ce28:	4b79      	ldr	r3, [pc, #484]	; (800d010 <_vfiprintf_r+0x248>)
 800ce2a:	429d      	cmp	r5, r3
 800ce2c:	bf08      	it	eq
 800ce2e:	68f5      	ldreq	r5, [r6, #12]
 800ce30:	e7da      	b.n	800cde8 <_vfiprintf_r+0x20>
 800ce32:	89ab      	ldrh	r3, [r5, #12]
 800ce34:	0598      	lsls	r0, r3, #22
 800ce36:	d4ed      	bmi.n	800ce14 <_vfiprintf_r+0x4c>
 800ce38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce3a:	f7ff fe54 	bl	800cae6 <__retarget_lock_release_recursive>
 800ce3e:	e7e9      	b.n	800ce14 <_vfiprintf_r+0x4c>
 800ce40:	2300      	movs	r3, #0
 800ce42:	9309      	str	r3, [sp, #36]	; 0x24
 800ce44:	2320      	movs	r3, #32
 800ce46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce4e:	2330      	movs	r3, #48	; 0x30
 800ce50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d014 <_vfiprintf_r+0x24c>
 800ce54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce58:	f04f 0901 	mov.w	r9, #1
 800ce5c:	4623      	mov	r3, r4
 800ce5e:	469a      	mov	sl, r3
 800ce60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce64:	b10a      	cbz	r2, 800ce6a <_vfiprintf_r+0xa2>
 800ce66:	2a25      	cmp	r2, #37	; 0x25
 800ce68:	d1f9      	bne.n	800ce5e <_vfiprintf_r+0x96>
 800ce6a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce6e:	d00b      	beq.n	800ce88 <_vfiprintf_r+0xc0>
 800ce70:	465b      	mov	r3, fp
 800ce72:	4622      	mov	r2, r4
 800ce74:	4629      	mov	r1, r5
 800ce76:	4630      	mov	r0, r6
 800ce78:	f7ff ff93 	bl	800cda2 <__sfputs_r>
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	f000 80aa 	beq.w	800cfd6 <_vfiprintf_r+0x20e>
 800ce82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce84:	445a      	add	r2, fp
 800ce86:	9209      	str	r2, [sp, #36]	; 0x24
 800ce88:	f89a 3000 	ldrb.w	r3, [sl]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f000 80a2 	beq.w	800cfd6 <_vfiprintf_r+0x20e>
 800ce92:	2300      	movs	r3, #0
 800ce94:	f04f 32ff 	mov.w	r2, #4294967295
 800ce98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce9c:	f10a 0a01 	add.w	sl, sl, #1
 800cea0:	9304      	str	r3, [sp, #16]
 800cea2:	9307      	str	r3, [sp, #28]
 800cea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cea8:	931a      	str	r3, [sp, #104]	; 0x68
 800ceaa:	4654      	mov	r4, sl
 800ceac:	2205      	movs	r2, #5
 800ceae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceb2:	4858      	ldr	r0, [pc, #352]	; (800d014 <_vfiprintf_r+0x24c>)
 800ceb4:	f7f3 fa14 	bl	80002e0 <memchr>
 800ceb8:	9a04      	ldr	r2, [sp, #16]
 800ceba:	b9d8      	cbnz	r0, 800cef4 <_vfiprintf_r+0x12c>
 800cebc:	06d1      	lsls	r1, r2, #27
 800cebe:	bf44      	itt	mi
 800cec0:	2320      	movmi	r3, #32
 800cec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cec6:	0713      	lsls	r3, r2, #28
 800cec8:	bf44      	itt	mi
 800ceca:	232b      	movmi	r3, #43	; 0x2b
 800cecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ced0:	f89a 3000 	ldrb.w	r3, [sl]
 800ced4:	2b2a      	cmp	r3, #42	; 0x2a
 800ced6:	d015      	beq.n	800cf04 <_vfiprintf_r+0x13c>
 800ced8:	9a07      	ldr	r2, [sp, #28]
 800ceda:	4654      	mov	r4, sl
 800cedc:	2000      	movs	r0, #0
 800cede:	f04f 0c0a 	mov.w	ip, #10
 800cee2:	4621      	mov	r1, r4
 800cee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cee8:	3b30      	subs	r3, #48	; 0x30
 800ceea:	2b09      	cmp	r3, #9
 800ceec:	d94e      	bls.n	800cf8c <_vfiprintf_r+0x1c4>
 800ceee:	b1b0      	cbz	r0, 800cf1e <_vfiprintf_r+0x156>
 800cef0:	9207      	str	r2, [sp, #28]
 800cef2:	e014      	b.n	800cf1e <_vfiprintf_r+0x156>
 800cef4:	eba0 0308 	sub.w	r3, r0, r8
 800cef8:	fa09 f303 	lsl.w	r3, r9, r3
 800cefc:	4313      	orrs	r3, r2
 800cefe:	9304      	str	r3, [sp, #16]
 800cf00:	46a2      	mov	sl, r4
 800cf02:	e7d2      	b.n	800ceaa <_vfiprintf_r+0xe2>
 800cf04:	9b03      	ldr	r3, [sp, #12]
 800cf06:	1d19      	adds	r1, r3, #4
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	9103      	str	r1, [sp, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	bfbb      	ittet	lt
 800cf10:	425b      	neglt	r3, r3
 800cf12:	f042 0202 	orrlt.w	r2, r2, #2
 800cf16:	9307      	strge	r3, [sp, #28]
 800cf18:	9307      	strlt	r3, [sp, #28]
 800cf1a:	bfb8      	it	lt
 800cf1c:	9204      	strlt	r2, [sp, #16]
 800cf1e:	7823      	ldrb	r3, [r4, #0]
 800cf20:	2b2e      	cmp	r3, #46	; 0x2e
 800cf22:	d10c      	bne.n	800cf3e <_vfiprintf_r+0x176>
 800cf24:	7863      	ldrb	r3, [r4, #1]
 800cf26:	2b2a      	cmp	r3, #42	; 0x2a
 800cf28:	d135      	bne.n	800cf96 <_vfiprintf_r+0x1ce>
 800cf2a:	9b03      	ldr	r3, [sp, #12]
 800cf2c:	1d1a      	adds	r2, r3, #4
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	9203      	str	r2, [sp, #12]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	bfb8      	it	lt
 800cf36:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf3a:	3402      	adds	r4, #2
 800cf3c:	9305      	str	r3, [sp, #20]
 800cf3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d024 <_vfiprintf_r+0x25c>
 800cf42:	7821      	ldrb	r1, [r4, #0]
 800cf44:	2203      	movs	r2, #3
 800cf46:	4650      	mov	r0, sl
 800cf48:	f7f3 f9ca 	bl	80002e0 <memchr>
 800cf4c:	b140      	cbz	r0, 800cf60 <_vfiprintf_r+0x198>
 800cf4e:	2340      	movs	r3, #64	; 0x40
 800cf50:	eba0 000a 	sub.w	r0, r0, sl
 800cf54:	fa03 f000 	lsl.w	r0, r3, r0
 800cf58:	9b04      	ldr	r3, [sp, #16]
 800cf5a:	4303      	orrs	r3, r0
 800cf5c:	3401      	adds	r4, #1
 800cf5e:	9304      	str	r3, [sp, #16]
 800cf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf64:	482c      	ldr	r0, [pc, #176]	; (800d018 <_vfiprintf_r+0x250>)
 800cf66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf6a:	2206      	movs	r2, #6
 800cf6c:	f7f3 f9b8 	bl	80002e0 <memchr>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d03f      	beq.n	800cff4 <_vfiprintf_r+0x22c>
 800cf74:	4b29      	ldr	r3, [pc, #164]	; (800d01c <_vfiprintf_r+0x254>)
 800cf76:	bb1b      	cbnz	r3, 800cfc0 <_vfiprintf_r+0x1f8>
 800cf78:	9b03      	ldr	r3, [sp, #12]
 800cf7a:	3307      	adds	r3, #7
 800cf7c:	f023 0307 	bic.w	r3, r3, #7
 800cf80:	3308      	adds	r3, #8
 800cf82:	9303      	str	r3, [sp, #12]
 800cf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf86:	443b      	add	r3, r7
 800cf88:	9309      	str	r3, [sp, #36]	; 0x24
 800cf8a:	e767      	b.n	800ce5c <_vfiprintf_r+0x94>
 800cf8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf90:	460c      	mov	r4, r1
 800cf92:	2001      	movs	r0, #1
 800cf94:	e7a5      	b.n	800cee2 <_vfiprintf_r+0x11a>
 800cf96:	2300      	movs	r3, #0
 800cf98:	3401      	adds	r4, #1
 800cf9a:	9305      	str	r3, [sp, #20]
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	f04f 0c0a 	mov.w	ip, #10
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfa8:	3a30      	subs	r2, #48	; 0x30
 800cfaa:	2a09      	cmp	r2, #9
 800cfac:	d903      	bls.n	800cfb6 <_vfiprintf_r+0x1ee>
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d0c5      	beq.n	800cf3e <_vfiprintf_r+0x176>
 800cfb2:	9105      	str	r1, [sp, #20]
 800cfb4:	e7c3      	b.n	800cf3e <_vfiprintf_r+0x176>
 800cfb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfba:	4604      	mov	r4, r0
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e7f0      	b.n	800cfa2 <_vfiprintf_r+0x1da>
 800cfc0:	ab03      	add	r3, sp, #12
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	462a      	mov	r2, r5
 800cfc6:	4b16      	ldr	r3, [pc, #88]	; (800d020 <_vfiprintf_r+0x258>)
 800cfc8:	a904      	add	r1, sp, #16
 800cfca:	4630      	mov	r0, r6
 800cfcc:	f3af 8000 	nop.w
 800cfd0:	4607      	mov	r7, r0
 800cfd2:	1c78      	adds	r0, r7, #1
 800cfd4:	d1d6      	bne.n	800cf84 <_vfiprintf_r+0x1bc>
 800cfd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfd8:	07d9      	lsls	r1, r3, #31
 800cfda:	d405      	bmi.n	800cfe8 <_vfiprintf_r+0x220>
 800cfdc:	89ab      	ldrh	r3, [r5, #12]
 800cfde:	059a      	lsls	r2, r3, #22
 800cfe0:	d402      	bmi.n	800cfe8 <_vfiprintf_r+0x220>
 800cfe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfe4:	f7ff fd7f 	bl	800cae6 <__retarget_lock_release_recursive>
 800cfe8:	89ab      	ldrh	r3, [r5, #12]
 800cfea:	065b      	lsls	r3, r3, #25
 800cfec:	f53f af12 	bmi.w	800ce14 <_vfiprintf_r+0x4c>
 800cff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cff2:	e711      	b.n	800ce18 <_vfiprintf_r+0x50>
 800cff4:	ab03      	add	r3, sp, #12
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	462a      	mov	r2, r5
 800cffa:	4b09      	ldr	r3, [pc, #36]	; (800d020 <_vfiprintf_r+0x258>)
 800cffc:	a904      	add	r1, sp, #16
 800cffe:	4630      	mov	r0, r6
 800d000:	f000 f880 	bl	800d104 <_printf_i>
 800d004:	e7e4      	b.n	800cfd0 <_vfiprintf_r+0x208>
 800d006:	bf00      	nop
 800d008:	0800d6e0 	.word	0x0800d6e0
 800d00c:	0800d700 	.word	0x0800d700
 800d010:	0800d6c0 	.word	0x0800d6c0
 800d014:	0800d720 	.word	0x0800d720
 800d018:	0800d72a 	.word	0x0800d72a
 800d01c:	00000000 	.word	0x00000000
 800d020:	0800cda3 	.word	0x0800cda3
 800d024:	0800d726 	.word	0x0800d726

0800d028 <_printf_common>:
 800d028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d02c:	4616      	mov	r6, r2
 800d02e:	4699      	mov	r9, r3
 800d030:	688a      	ldr	r2, [r1, #8]
 800d032:	690b      	ldr	r3, [r1, #16]
 800d034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d038:	4293      	cmp	r3, r2
 800d03a:	bfb8      	it	lt
 800d03c:	4613      	movlt	r3, r2
 800d03e:	6033      	str	r3, [r6, #0]
 800d040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d044:	4607      	mov	r7, r0
 800d046:	460c      	mov	r4, r1
 800d048:	b10a      	cbz	r2, 800d04e <_printf_common+0x26>
 800d04a:	3301      	adds	r3, #1
 800d04c:	6033      	str	r3, [r6, #0]
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	0699      	lsls	r1, r3, #26
 800d052:	bf42      	ittt	mi
 800d054:	6833      	ldrmi	r3, [r6, #0]
 800d056:	3302      	addmi	r3, #2
 800d058:	6033      	strmi	r3, [r6, #0]
 800d05a:	6825      	ldr	r5, [r4, #0]
 800d05c:	f015 0506 	ands.w	r5, r5, #6
 800d060:	d106      	bne.n	800d070 <_printf_common+0x48>
 800d062:	f104 0a19 	add.w	sl, r4, #25
 800d066:	68e3      	ldr	r3, [r4, #12]
 800d068:	6832      	ldr	r2, [r6, #0]
 800d06a:	1a9b      	subs	r3, r3, r2
 800d06c:	42ab      	cmp	r3, r5
 800d06e:	dc26      	bgt.n	800d0be <_printf_common+0x96>
 800d070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d074:	1e13      	subs	r3, r2, #0
 800d076:	6822      	ldr	r2, [r4, #0]
 800d078:	bf18      	it	ne
 800d07a:	2301      	movne	r3, #1
 800d07c:	0692      	lsls	r2, r2, #26
 800d07e:	d42b      	bmi.n	800d0d8 <_printf_common+0xb0>
 800d080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d084:	4649      	mov	r1, r9
 800d086:	4638      	mov	r0, r7
 800d088:	47c0      	blx	r8
 800d08a:	3001      	adds	r0, #1
 800d08c:	d01e      	beq.n	800d0cc <_printf_common+0xa4>
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	68e5      	ldr	r5, [r4, #12]
 800d092:	6832      	ldr	r2, [r6, #0]
 800d094:	f003 0306 	and.w	r3, r3, #6
 800d098:	2b04      	cmp	r3, #4
 800d09a:	bf08      	it	eq
 800d09c:	1aad      	subeq	r5, r5, r2
 800d09e:	68a3      	ldr	r3, [r4, #8]
 800d0a0:	6922      	ldr	r2, [r4, #16]
 800d0a2:	bf0c      	ite	eq
 800d0a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0a8:	2500      	movne	r5, #0
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	bfc4      	itt	gt
 800d0ae:	1a9b      	subgt	r3, r3, r2
 800d0b0:	18ed      	addgt	r5, r5, r3
 800d0b2:	2600      	movs	r6, #0
 800d0b4:	341a      	adds	r4, #26
 800d0b6:	42b5      	cmp	r5, r6
 800d0b8:	d11a      	bne.n	800d0f0 <_printf_common+0xc8>
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	e008      	b.n	800d0d0 <_printf_common+0xa8>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	4652      	mov	r2, sl
 800d0c2:	4649      	mov	r1, r9
 800d0c4:	4638      	mov	r0, r7
 800d0c6:	47c0      	blx	r8
 800d0c8:	3001      	adds	r0, #1
 800d0ca:	d103      	bne.n	800d0d4 <_printf_common+0xac>
 800d0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d4:	3501      	adds	r5, #1
 800d0d6:	e7c6      	b.n	800d066 <_printf_common+0x3e>
 800d0d8:	18e1      	adds	r1, r4, r3
 800d0da:	1c5a      	adds	r2, r3, #1
 800d0dc:	2030      	movs	r0, #48	; 0x30
 800d0de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0e2:	4422      	add	r2, r4
 800d0e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0ec:	3302      	adds	r3, #2
 800d0ee:	e7c7      	b.n	800d080 <_printf_common+0x58>
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	4622      	mov	r2, r4
 800d0f4:	4649      	mov	r1, r9
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	47c0      	blx	r8
 800d0fa:	3001      	adds	r0, #1
 800d0fc:	d0e6      	beq.n	800d0cc <_printf_common+0xa4>
 800d0fe:	3601      	adds	r6, #1
 800d100:	e7d9      	b.n	800d0b6 <_printf_common+0x8e>
	...

0800d104 <_printf_i>:
 800d104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d108:	7e0f      	ldrb	r7, [r1, #24]
 800d10a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d10c:	2f78      	cmp	r7, #120	; 0x78
 800d10e:	4691      	mov	r9, r2
 800d110:	4680      	mov	r8, r0
 800d112:	460c      	mov	r4, r1
 800d114:	469a      	mov	sl, r3
 800d116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d11a:	d807      	bhi.n	800d12c <_printf_i+0x28>
 800d11c:	2f62      	cmp	r7, #98	; 0x62
 800d11e:	d80a      	bhi.n	800d136 <_printf_i+0x32>
 800d120:	2f00      	cmp	r7, #0
 800d122:	f000 80d8 	beq.w	800d2d6 <_printf_i+0x1d2>
 800d126:	2f58      	cmp	r7, #88	; 0x58
 800d128:	f000 80a3 	beq.w	800d272 <_printf_i+0x16e>
 800d12c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d134:	e03a      	b.n	800d1ac <_printf_i+0xa8>
 800d136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d13a:	2b15      	cmp	r3, #21
 800d13c:	d8f6      	bhi.n	800d12c <_printf_i+0x28>
 800d13e:	a101      	add	r1, pc, #4	; (adr r1, 800d144 <_printf_i+0x40>)
 800d140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d144:	0800d19d 	.word	0x0800d19d
 800d148:	0800d1b1 	.word	0x0800d1b1
 800d14c:	0800d12d 	.word	0x0800d12d
 800d150:	0800d12d 	.word	0x0800d12d
 800d154:	0800d12d 	.word	0x0800d12d
 800d158:	0800d12d 	.word	0x0800d12d
 800d15c:	0800d1b1 	.word	0x0800d1b1
 800d160:	0800d12d 	.word	0x0800d12d
 800d164:	0800d12d 	.word	0x0800d12d
 800d168:	0800d12d 	.word	0x0800d12d
 800d16c:	0800d12d 	.word	0x0800d12d
 800d170:	0800d2bd 	.word	0x0800d2bd
 800d174:	0800d1e1 	.word	0x0800d1e1
 800d178:	0800d29f 	.word	0x0800d29f
 800d17c:	0800d12d 	.word	0x0800d12d
 800d180:	0800d12d 	.word	0x0800d12d
 800d184:	0800d2df 	.word	0x0800d2df
 800d188:	0800d12d 	.word	0x0800d12d
 800d18c:	0800d1e1 	.word	0x0800d1e1
 800d190:	0800d12d 	.word	0x0800d12d
 800d194:	0800d12d 	.word	0x0800d12d
 800d198:	0800d2a7 	.word	0x0800d2a7
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	1d1a      	adds	r2, r3, #4
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	602a      	str	r2, [r5, #0]
 800d1a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e0a3      	b.n	800d2f8 <_printf_i+0x1f4>
 800d1b0:	6820      	ldr	r0, [r4, #0]
 800d1b2:	6829      	ldr	r1, [r5, #0]
 800d1b4:	0606      	lsls	r6, r0, #24
 800d1b6:	f101 0304 	add.w	r3, r1, #4
 800d1ba:	d50a      	bpl.n	800d1d2 <_printf_i+0xce>
 800d1bc:	680e      	ldr	r6, [r1, #0]
 800d1be:	602b      	str	r3, [r5, #0]
 800d1c0:	2e00      	cmp	r6, #0
 800d1c2:	da03      	bge.n	800d1cc <_printf_i+0xc8>
 800d1c4:	232d      	movs	r3, #45	; 0x2d
 800d1c6:	4276      	negs	r6, r6
 800d1c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1cc:	485e      	ldr	r0, [pc, #376]	; (800d348 <_printf_i+0x244>)
 800d1ce:	230a      	movs	r3, #10
 800d1d0:	e019      	b.n	800d206 <_printf_i+0x102>
 800d1d2:	680e      	ldr	r6, [r1, #0]
 800d1d4:	602b      	str	r3, [r5, #0]
 800d1d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1da:	bf18      	it	ne
 800d1dc:	b236      	sxthne	r6, r6
 800d1de:	e7ef      	b.n	800d1c0 <_printf_i+0xbc>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	6820      	ldr	r0, [r4, #0]
 800d1e4:	1d19      	adds	r1, r3, #4
 800d1e6:	6029      	str	r1, [r5, #0]
 800d1e8:	0601      	lsls	r1, r0, #24
 800d1ea:	d501      	bpl.n	800d1f0 <_printf_i+0xec>
 800d1ec:	681e      	ldr	r6, [r3, #0]
 800d1ee:	e002      	b.n	800d1f6 <_printf_i+0xf2>
 800d1f0:	0646      	lsls	r6, r0, #25
 800d1f2:	d5fb      	bpl.n	800d1ec <_printf_i+0xe8>
 800d1f4:	881e      	ldrh	r6, [r3, #0]
 800d1f6:	4854      	ldr	r0, [pc, #336]	; (800d348 <_printf_i+0x244>)
 800d1f8:	2f6f      	cmp	r7, #111	; 0x6f
 800d1fa:	bf0c      	ite	eq
 800d1fc:	2308      	moveq	r3, #8
 800d1fe:	230a      	movne	r3, #10
 800d200:	2100      	movs	r1, #0
 800d202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d206:	6865      	ldr	r5, [r4, #4]
 800d208:	60a5      	str	r5, [r4, #8]
 800d20a:	2d00      	cmp	r5, #0
 800d20c:	bfa2      	ittt	ge
 800d20e:	6821      	ldrge	r1, [r4, #0]
 800d210:	f021 0104 	bicge.w	r1, r1, #4
 800d214:	6021      	strge	r1, [r4, #0]
 800d216:	b90e      	cbnz	r6, 800d21c <_printf_i+0x118>
 800d218:	2d00      	cmp	r5, #0
 800d21a:	d04d      	beq.n	800d2b8 <_printf_i+0x1b4>
 800d21c:	4615      	mov	r5, r2
 800d21e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d222:	fb03 6711 	mls	r7, r3, r1, r6
 800d226:	5dc7      	ldrb	r7, [r0, r7]
 800d228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d22c:	4637      	mov	r7, r6
 800d22e:	42bb      	cmp	r3, r7
 800d230:	460e      	mov	r6, r1
 800d232:	d9f4      	bls.n	800d21e <_printf_i+0x11a>
 800d234:	2b08      	cmp	r3, #8
 800d236:	d10b      	bne.n	800d250 <_printf_i+0x14c>
 800d238:	6823      	ldr	r3, [r4, #0]
 800d23a:	07de      	lsls	r6, r3, #31
 800d23c:	d508      	bpl.n	800d250 <_printf_i+0x14c>
 800d23e:	6923      	ldr	r3, [r4, #16]
 800d240:	6861      	ldr	r1, [r4, #4]
 800d242:	4299      	cmp	r1, r3
 800d244:	bfde      	ittt	le
 800d246:	2330      	movle	r3, #48	; 0x30
 800d248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d24c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d250:	1b52      	subs	r2, r2, r5
 800d252:	6122      	str	r2, [r4, #16]
 800d254:	f8cd a000 	str.w	sl, [sp]
 800d258:	464b      	mov	r3, r9
 800d25a:	aa03      	add	r2, sp, #12
 800d25c:	4621      	mov	r1, r4
 800d25e:	4640      	mov	r0, r8
 800d260:	f7ff fee2 	bl	800d028 <_printf_common>
 800d264:	3001      	adds	r0, #1
 800d266:	d14c      	bne.n	800d302 <_printf_i+0x1fe>
 800d268:	f04f 30ff 	mov.w	r0, #4294967295
 800d26c:	b004      	add	sp, #16
 800d26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d272:	4835      	ldr	r0, [pc, #212]	; (800d348 <_printf_i+0x244>)
 800d274:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d278:	6829      	ldr	r1, [r5, #0]
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d280:	6029      	str	r1, [r5, #0]
 800d282:	061d      	lsls	r5, r3, #24
 800d284:	d514      	bpl.n	800d2b0 <_printf_i+0x1ac>
 800d286:	07df      	lsls	r7, r3, #31
 800d288:	bf44      	itt	mi
 800d28a:	f043 0320 	orrmi.w	r3, r3, #32
 800d28e:	6023      	strmi	r3, [r4, #0]
 800d290:	b91e      	cbnz	r6, 800d29a <_printf_i+0x196>
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	f023 0320 	bic.w	r3, r3, #32
 800d298:	6023      	str	r3, [r4, #0]
 800d29a:	2310      	movs	r3, #16
 800d29c:	e7b0      	b.n	800d200 <_printf_i+0xfc>
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	f043 0320 	orr.w	r3, r3, #32
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	2378      	movs	r3, #120	; 0x78
 800d2a8:	4828      	ldr	r0, [pc, #160]	; (800d34c <_printf_i+0x248>)
 800d2aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2ae:	e7e3      	b.n	800d278 <_printf_i+0x174>
 800d2b0:	0659      	lsls	r1, r3, #25
 800d2b2:	bf48      	it	mi
 800d2b4:	b2b6      	uxthmi	r6, r6
 800d2b6:	e7e6      	b.n	800d286 <_printf_i+0x182>
 800d2b8:	4615      	mov	r5, r2
 800d2ba:	e7bb      	b.n	800d234 <_printf_i+0x130>
 800d2bc:	682b      	ldr	r3, [r5, #0]
 800d2be:	6826      	ldr	r6, [r4, #0]
 800d2c0:	6961      	ldr	r1, [r4, #20]
 800d2c2:	1d18      	adds	r0, r3, #4
 800d2c4:	6028      	str	r0, [r5, #0]
 800d2c6:	0635      	lsls	r5, r6, #24
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	d501      	bpl.n	800d2d0 <_printf_i+0x1cc>
 800d2cc:	6019      	str	r1, [r3, #0]
 800d2ce:	e002      	b.n	800d2d6 <_printf_i+0x1d2>
 800d2d0:	0670      	lsls	r0, r6, #25
 800d2d2:	d5fb      	bpl.n	800d2cc <_printf_i+0x1c8>
 800d2d4:	8019      	strh	r1, [r3, #0]
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	6123      	str	r3, [r4, #16]
 800d2da:	4615      	mov	r5, r2
 800d2dc:	e7ba      	b.n	800d254 <_printf_i+0x150>
 800d2de:	682b      	ldr	r3, [r5, #0]
 800d2e0:	1d1a      	adds	r2, r3, #4
 800d2e2:	602a      	str	r2, [r5, #0]
 800d2e4:	681d      	ldr	r5, [r3, #0]
 800d2e6:	6862      	ldr	r2, [r4, #4]
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f7f2 fff8 	bl	80002e0 <memchr>
 800d2f0:	b108      	cbz	r0, 800d2f6 <_printf_i+0x1f2>
 800d2f2:	1b40      	subs	r0, r0, r5
 800d2f4:	6060      	str	r0, [r4, #4]
 800d2f6:	6863      	ldr	r3, [r4, #4]
 800d2f8:	6123      	str	r3, [r4, #16]
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d300:	e7a8      	b.n	800d254 <_printf_i+0x150>
 800d302:	6923      	ldr	r3, [r4, #16]
 800d304:	462a      	mov	r2, r5
 800d306:	4649      	mov	r1, r9
 800d308:	4640      	mov	r0, r8
 800d30a:	47d0      	blx	sl
 800d30c:	3001      	adds	r0, #1
 800d30e:	d0ab      	beq.n	800d268 <_printf_i+0x164>
 800d310:	6823      	ldr	r3, [r4, #0]
 800d312:	079b      	lsls	r3, r3, #30
 800d314:	d413      	bmi.n	800d33e <_printf_i+0x23a>
 800d316:	68e0      	ldr	r0, [r4, #12]
 800d318:	9b03      	ldr	r3, [sp, #12]
 800d31a:	4298      	cmp	r0, r3
 800d31c:	bfb8      	it	lt
 800d31e:	4618      	movlt	r0, r3
 800d320:	e7a4      	b.n	800d26c <_printf_i+0x168>
 800d322:	2301      	movs	r3, #1
 800d324:	4632      	mov	r2, r6
 800d326:	4649      	mov	r1, r9
 800d328:	4640      	mov	r0, r8
 800d32a:	47d0      	blx	sl
 800d32c:	3001      	adds	r0, #1
 800d32e:	d09b      	beq.n	800d268 <_printf_i+0x164>
 800d330:	3501      	adds	r5, #1
 800d332:	68e3      	ldr	r3, [r4, #12]
 800d334:	9903      	ldr	r1, [sp, #12]
 800d336:	1a5b      	subs	r3, r3, r1
 800d338:	42ab      	cmp	r3, r5
 800d33a:	dcf2      	bgt.n	800d322 <_printf_i+0x21e>
 800d33c:	e7eb      	b.n	800d316 <_printf_i+0x212>
 800d33e:	2500      	movs	r5, #0
 800d340:	f104 0619 	add.w	r6, r4, #25
 800d344:	e7f5      	b.n	800d332 <_printf_i+0x22e>
 800d346:	bf00      	nop
 800d348:	0800d731 	.word	0x0800d731
 800d34c:	0800d742 	.word	0x0800d742

0800d350 <_sbrk_r>:
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	4d06      	ldr	r5, [pc, #24]	; (800d36c <_sbrk_r+0x1c>)
 800d354:	2300      	movs	r3, #0
 800d356:	4604      	mov	r4, r0
 800d358:	4608      	mov	r0, r1
 800d35a:	602b      	str	r3, [r5, #0]
 800d35c:	f7f3 fe66 	bl	800102c <_sbrk>
 800d360:	1c43      	adds	r3, r0, #1
 800d362:	d102      	bne.n	800d36a <_sbrk_r+0x1a>
 800d364:	682b      	ldr	r3, [r5, #0]
 800d366:	b103      	cbz	r3, 800d36a <_sbrk_r+0x1a>
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	bd38      	pop	{r3, r4, r5, pc}
 800d36c:	24001168 	.word	0x24001168

0800d370 <__sread>:
 800d370:	b510      	push	{r4, lr}
 800d372:	460c      	mov	r4, r1
 800d374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d378:	f000 f8a0 	bl	800d4bc <_read_r>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	bfab      	itete	ge
 800d380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d382:	89a3      	ldrhlt	r3, [r4, #12]
 800d384:	181b      	addge	r3, r3, r0
 800d386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d38a:	bfac      	ite	ge
 800d38c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d38e:	81a3      	strhlt	r3, [r4, #12]
 800d390:	bd10      	pop	{r4, pc}

0800d392 <__swrite>:
 800d392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d396:	461f      	mov	r7, r3
 800d398:	898b      	ldrh	r3, [r1, #12]
 800d39a:	05db      	lsls	r3, r3, #23
 800d39c:	4605      	mov	r5, r0
 800d39e:	460c      	mov	r4, r1
 800d3a0:	4616      	mov	r6, r2
 800d3a2:	d505      	bpl.n	800d3b0 <__swrite+0x1e>
 800d3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a8:	2302      	movs	r3, #2
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f000 f868 	bl	800d480 <_lseek_r>
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3ba:	81a3      	strh	r3, [r4, #12]
 800d3bc:	4632      	mov	r2, r6
 800d3be:	463b      	mov	r3, r7
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c6:	f000 b817 	b.w	800d3f8 <_write_r>

0800d3ca <__sseek>:
 800d3ca:	b510      	push	{r4, lr}
 800d3cc:	460c      	mov	r4, r1
 800d3ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3d2:	f000 f855 	bl	800d480 <_lseek_r>
 800d3d6:	1c43      	adds	r3, r0, #1
 800d3d8:	89a3      	ldrh	r3, [r4, #12]
 800d3da:	bf15      	itete	ne
 800d3dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d3e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d3e6:	81a3      	strheq	r3, [r4, #12]
 800d3e8:	bf18      	it	ne
 800d3ea:	81a3      	strhne	r3, [r4, #12]
 800d3ec:	bd10      	pop	{r4, pc}

0800d3ee <__sclose>:
 800d3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3f2:	f000 b813 	b.w	800d41c <_close_r>
	...

0800d3f8 <_write_r>:
 800d3f8:	b538      	push	{r3, r4, r5, lr}
 800d3fa:	4d07      	ldr	r5, [pc, #28]	; (800d418 <_write_r+0x20>)
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	4608      	mov	r0, r1
 800d400:	4611      	mov	r1, r2
 800d402:	2200      	movs	r2, #0
 800d404:	602a      	str	r2, [r5, #0]
 800d406:	461a      	mov	r2, r3
 800d408:	f7f3 fdbf 	bl	8000f8a <_write>
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	d102      	bne.n	800d416 <_write_r+0x1e>
 800d410:	682b      	ldr	r3, [r5, #0]
 800d412:	b103      	cbz	r3, 800d416 <_write_r+0x1e>
 800d414:	6023      	str	r3, [r4, #0]
 800d416:	bd38      	pop	{r3, r4, r5, pc}
 800d418:	24001168 	.word	0x24001168

0800d41c <_close_r>:
 800d41c:	b538      	push	{r3, r4, r5, lr}
 800d41e:	4d06      	ldr	r5, [pc, #24]	; (800d438 <_close_r+0x1c>)
 800d420:	2300      	movs	r3, #0
 800d422:	4604      	mov	r4, r0
 800d424:	4608      	mov	r0, r1
 800d426:	602b      	str	r3, [r5, #0]
 800d428:	f7f3 fdcb 	bl	8000fc2 <_close>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d102      	bne.n	800d436 <_close_r+0x1a>
 800d430:	682b      	ldr	r3, [r5, #0]
 800d432:	b103      	cbz	r3, 800d436 <_close_r+0x1a>
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	24001168 	.word	0x24001168

0800d43c <_fstat_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4d07      	ldr	r5, [pc, #28]	; (800d45c <_fstat_r+0x20>)
 800d440:	2300      	movs	r3, #0
 800d442:	4604      	mov	r4, r0
 800d444:	4608      	mov	r0, r1
 800d446:	4611      	mov	r1, r2
 800d448:	602b      	str	r3, [r5, #0]
 800d44a:	f7f3 fdc6 	bl	8000fda <_fstat>
 800d44e:	1c43      	adds	r3, r0, #1
 800d450:	d102      	bne.n	800d458 <_fstat_r+0x1c>
 800d452:	682b      	ldr	r3, [r5, #0]
 800d454:	b103      	cbz	r3, 800d458 <_fstat_r+0x1c>
 800d456:	6023      	str	r3, [r4, #0]
 800d458:	bd38      	pop	{r3, r4, r5, pc}
 800d45a:	bf00      	nop
 800d45c:	24001168 	.word	0x24001168

0800d460 <_isatty_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4d06      	ldr	r5, [pc, #24]	; (800d47c <_isatty_r+0x1c>)
 800d464:	2300      	movs	r3, #0
 800d466:	4604      	mov	r4, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	602b      	str	r3, [r5, #0]
 800d46c:	f7f3 fdc5 	bl	8000ffa <_isatty>
 800d470:	1c43      	adds	r3, r0, #1
 800d472:	d102      	bne.n	800d47a <_isatty_r+0x1a>
 800d474:	682b      	ldr	r3, [r5, #0]
 800d476:	b103      	cbz	r3, 800d47a <_isatty_r+0x1a>
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	bd38      	pop	{r3, r4, r5, pc}
 800d47c:	24001168 	.word	0x24001168

0800d480 <_lseek_r>:
 800d480:	b538      	push	{r3, r4, r5, lr}
 800d482:	4d07      	ldr	r5, [pc, #28]	; (800d4a0 <_lseek_r+0x20>)
 800d484:	4604      	mov	r4, r0
 800d486:	4608      	mov	r0, r1
 800d488:	4611      	mov	r1, r2
 800d48a:	2200      	movs	r2, #0
 800d48c:	602a      	str	r2, [r5, #0]
 800d48e:	461a      	mov	r2, r3
 800d490:	f7f3 fdbe 	bl	8001010 <_lseek>
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	d102      	bne.n	800d49e <_lseek_r+0x1e>
 800d498:	682b      	ldr	r3, [r5, #0]
 800d49a:	b103      	cbz	r3, 800d49e <_lseek_r+0x1e>
 800d49c:	6023      	str	r3, [r4, #0]
 800d49e:	bd38      	pop	{r3, r4, r5, pc}
 800d4a0:	24001168 	.word	0x24001168

0800d4a4 <__malloc_lock>:
 800d4a4:	4801      	ldr	r0, [pc, #4]	; (800d4ac <__malloc_lock+0x8>)
 800d4a6:	f7ff bb1d 	b.w	800cae4 <__retarget_lock_acquire_recursive>
 800d4aa:	bf00      	nop
 800d4ac:	2400115c 	.word	0x2400115c

0800d4b0 <__malloc_unlock>:
 800d4b0:	4801      	ldr	r0, [pc, #4]	; (800d4b8 <__malloc_unlock+0x8>)
 800d4b2:	f7ff bb18 	b.w	800cae6 <__retarget_lock_release_recursive>
 800d4b6:	bf00      	nop
 800d4b8:	2400115c 	.word	0x2400115c

0800d4bc <_read_r>:
 800d4bc:	b538      	push	{r3, r4, r5, lr}
 800d4be:	4d07      	ldr	r5, [pc, #28]	; (800d4dc <_read_r+0x20>)
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	4608      	mov	r0, r1
 800d4c4:	4611      	mov	r1, r2
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	602a      	str	r2, [r5, #0]
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	f7f3 fd40 	bl	8000f50 <_read>
 800d4d0:	1c43      	adds	r3, r0, #1
 800d4d2:	d102      	bne.n	800d4da <_read_r+0x1e>
 800d4d4:	682b      	ldr	r3, [r5, #0]
 800d4d6:	b103      	cbz	r3, 800d4da <_read_r+0x1e>
 800d4d8:	6023      	str	r3, [r4, #0]
 800d4da:	bd38      	pop	{r3, r4, r5, pc}
 800d4dc:	24001168 	.word	0x24001168

0800d4e0 <_init>:
 800d4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e2:	bf00      	nop
 800d4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4e6:	bc08      	pop	{r3}
 800d4e8:	469e      	mov	lr, r3
 800d4ea:	4770      	bx	lr

0800d4ec <_fini>:
 800d4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ee:	bf00      	nop
 800d4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4f2:	bc08      	pop	{r3}
 800d4f4:	469e      	mov	lr, r3
 800d4f6:	4770      	bx	lr
