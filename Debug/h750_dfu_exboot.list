
h750_dfu_exboot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b62c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800b8cc  0800b8cc  0001b8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ba84  0800ba84  0001ba84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ba88  0800ba88  0001ba88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000144  20000000  0800ba8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f98  20000144  0800bbd0  00020144  2**2
                  ALLOC
  7 ._user_heap_stack 00001404  200010dc  0800bbd0  000210dc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
  9 .debug_info   000185da  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003953  00000000  00000000  0003874c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011a0  00000000  00000000  0003c0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001020  00000000  00000000  0003d240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a762  00000000  00000000  0003e260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017288  00000000  00000000  000789c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015f4b7  00000000  00000000  0008fc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ef101  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004f7c  00000000  00000000  001ef154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000144 	.word	0x20000144
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b8b4 	.word	0x0800b8b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000148 	.word	0x20000148
 80002dc:	0800b8b4 	.word	0x0800b8b4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  /* Configure MPU to allow non aligned access */
  MPU_Config();
 8000386:	f000 fa8f 	bl	80008a8 <MPU_Config>
  CPU_CACHE_Enable();
 800038a:	f000 f901 	bl	8000590 <CPU_CACHE_Enable>
  HAL_Init();
 800038e:	f001 fa5d 	bl	800184c <HAL_Init>
  SystemClock_Config();
 8000392:	f000 f87d 	bl	8000490 <SystemClock_Config>
  MX_GPIO_Init();
 8000396:	f000 f9c5 	bl	8000724 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 800039a:	f000 f841 	bl	8000420 <MX_QUADSPI_Init>

  if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_RESET){
 800039e:	2102      	movs	r1, #2
 80003a0:	4818      	ldr	r0, [pc, #96]	; (8000404 <main+0x84>)
 80003a2:	f001 fe51 	bl	8002048 <HAL_GPIO_ReadPin>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d122      	bne.n	80003f2 <main+0x72>

	if(QSPI_EnableMap() != HAL_OK){
 80003ac:	f001 f8a6 	bl	80014fc <QSPI_EnableMap>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d004      	beq.n	80003c0 <main+0x40>
	  printf("QSPI error init \r\n");
 80003b6:	4814      	ldr	r0, [pc, #80]	; (8000408 <main+0x88>)
 80003b8:	f00a fafe 	bl	800a9b8 <puts>
	  Error_Handler();
 80003bc:	f000 fab6 	bl	800092c <Error_Handler>
	}

	CPU_CACHE_Disable();
 80003c0:	f000 f954 	bl	800066c <CPU_CACHE_Disable>

	//__disable_irq();
	SCB->VTOR = APPLICATION_ADDRESS;//vektor tablosunun konumunu belirle
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <main+0x8c>)
 80003c6:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 80003ca:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0;
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <main+0x90>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]

	JumpToApplication = (pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS + 4));
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <main+0x94>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	461a      	mov	r2, r3
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <main+0x98>)
 80003da:	601a      	str	r2, [r3, #0]
	__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80003dc:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	f383 8808 	msr	MSP, r3
}
 80003ea:	bf00      	nop
	JumpToApplication();
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <main+0x98>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4798      	blx	r3
  }

  MX_USB_DEVICE_Init();
 80003f2:	f009 fdc5 	bl	8009f80 <MX_USB_DEVICE_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	2101      	movs	r1, #1
 80003fa:	4808      	ldr	r0, [pc, #32]	; (800041c <main+0x9c>)
 80003fc:	f001 fe3c 	bl	8002078 <HAL_GPIO_WritePin>


  /* We should never get here as execution is now on user application */
  while(1)
 8000400:	e7fe      	b.n	8000400 <main+0x80>
 8000402:	bf00      	nop
 8000404:	58021400 	.word	0x58021400
 8000408:	0800b8cc 	.word	0x0800b8cc
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	e000e010 	.word	0xe000e010
 8000414:	90000004 	.word	0x90000004
 8000418:	200001ac 	.word	0x200001ac
 800041c:	58020400 	.word	0x58020400

08000420 <MX_QUADSPI_Init>:
  * @brief  Initialize and configure Volatile and Non-Volatile memory.
  * @param  None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8000424:	4b17      	ldr	r3, [pc, #92]	; (8000484 <MX_QUADSPI_Init+0x64>)
 8000426:	4a18      	ldr	r2, [pc, #96]	; (8000488 <MX_QUADSPI_Init+0x68>)
 8000428:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800042a:	4b16      	ldr	r3, [pc, #88]	; (8000484 <MX_QUADSPI_Init+0x64>)
 800042c:	2201      	movs	r2, #1
 800042e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_QUADSPI_Init+0x64>)
 8000432:	2204      	movs	r2, #4
 8000434:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_QUADSPI_Init+0x64>)
 8000438:	2200      	movs	r2, #0
 800043a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 21;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_QUADSPI_Init+0x64>)
 800043e:	2215      	movs	r2, #21
 8000440:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_QUADSPI_Init+0x64>)
 8000444:	2200      	movs	r2, #0
 8000446:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_3;
 8000448:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_QUADSPI_Init+0x64>)
 800044a:	2201      	movs	r2, #1
 800044c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800044e:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <MX_QUADSPI_Init+0x64>)
 8000450:	2200      	movs	r2, #0
 8000452:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_QUADSPI_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800045a:	480a      	ldr	r0, [pc, #40]	; (8000484 <MX_QUADSPI_Init+0x64>)
 800045c:	f003 f91c 	bl	8003698 <HAL_QSPI_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000466:	f000 fa61 	bl	800092c <Error_Handler>
  }

  if(QSPI_Init() != HAL_OK){
 800046a:	f000 fef9 	bl	8001260 <QSPI_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d004      	beq.n	800047e <MX_QUADSPI_Init+0x5e>
	  printf("QSPI error init \r\n");
 8000474:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_QUADSPI_Init+0x6c>)
 8000476:	f00a fa9f 	bl	800a9b8 <puts>
	  Error_Handler();
 800047a:	f000 fa57 	bl	800092c <Error_Handler>
  }
  /* USER CODE END QUADSPI_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000160 	.word	0x20000160
 8000488:	52005000 	.word	0x52005000
 800048c:	0800b8cc 	.word	0x0800b8cc

08000490 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b09c      	sub	sp, #112	; 0x70
 8000494:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049a:	224c      	movs	r2, #76	; 0x4c
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f00a f9fc 	bl	800a89c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2220      	movs	r2, #32
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f00a f9f6 	bl	800a89c <memset>

	  /** Supply configuration update enable
	  */
	  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004b0:	2002      	movs	r0, #2
 80004b2:	f003 f8a7 	bl	8003604 <HAL_PWREx_ConfigSupply>

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004b6:	2300      	movs	r3, #0
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	4b33      	ldr	r3, [pc, #204]	; (8000588 <SystemClock_Config+0xf8>)
 80004bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004be:	4a32      	ldr	r2, [pc, #200]	; (8000588 <SystemClock_Config+0xf8>)
 80004c0:	f023 0301 	bic.w	r3, r3, #1
 80004c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004c6:	4b30      	ldr	r3, [pc, #192]	; (8000588 <SystemClock_Config+0xf8>)
 80004c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	4b2e      	ldr	r3, [pc, #184]	; (800058c <SystemClock_Config+0xfc>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004d8:	4a2c      	ldr	r2, [pc, #176]	; (800058c <SystemClock_Config+0xfc>)
 80004da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b2a      	ldr	r3, [pc, #168]	; (800058c <SystemClock_Config+0xfc>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	683b      	ldr	r3, [r7, #0]

	  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004ec:	bf00      	nop
 80004ee:	4b27      	ldr	r3, [pc, #156]	; (800058c <SystemClock_Config+0xfc>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004fa:	d1f8      	bne.n	80004ee <SystemClock_Config+0x5e>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004fc:	2303      	movs	r3, #3
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000504:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000506:	2301      	movs	r3, #1
 8000508:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050a:	2340      	movs	r3, #64	; 0x40
 800050c:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050e:	2302      	movs	r3, #2
 8000510:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000512:	2302      	movs	r3, #2
 8000514:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLM = 2;
 8000516:	2302      	movs	r3, #2
 8000518:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLN = 16;
 800051a:	2310      	movs	r3, #16
 800051c:	657b      	str	r3, [r7, #84]	; 0x54
	  RCC_OscInitStruct.PLL.PLLP = 2;
 800051e:	2302      	movs	r3, #2
 8000520:	65bb      	str	r3, [r7, #88]	; 0x58
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000522:	2304      	movs	r3, #4
 8000524:	65fb      	str	r3, [r7, #92]	; 0x5c
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8000526:	2302      	movs	r3, #2
 8000528:	663b      	str	r3, [r7, #96]	; 0x60
	  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800052a:	230c      	movs	r3, #12
 800052c:	667b      	str	r3, [r7, #100]	; 0x64
	  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800052e:	2300      	movs	r3, #0
 8000530:	66bb      	str	r3, [r7, #104]	; 0x68
	  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053a:	4618      	mov	r0, r3
 800053c:	f003 fd52 	bl	8003fe4 <HAL_RCC_OscConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0xba>
	  {
	    Error_Handler();
 8000546:	f000 f9f1 	bl	800092c <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	233f      	movs	r3, #63	; 0x3f
 800054c:	607b      	str	r3, [r7, #4]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
	                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
	  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800055e:	2340      	movs	r3, #64	; 0x40
 8000560:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
	  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	623b      	str	r3, [r7, #32]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2101      	movs	r1, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f004 f992 	bl	8004898 <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xee>
	  {
	    Error_Handler();
 800057a:	f000 f9d7 	bl	800092c <Error_Handler>
	  }
}
 800057e:	bf00      	nop
 8000580:	3770      	adds	r7, #112	; 0x70
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	58000400 	.word	0x58000400
 800058c:	58024800 	.word	0x58024800

08000590 <CPU_CACHE_Enable>:


static void CPU_CACHE_Enable(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000596:	4b34      	ldr	r3, [pc, #208]	; (8000668 <CPU_CACHE_Enable+0xd8>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d11b      	bne.n	80005da <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005a2:	f3bf 8f4f 	dsb	sy
}
 80005a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005a8:	f3bf 8f6f 	isb	sy
}
 80005ac:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005ae:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <CPU_CACHE_Enable+0xd8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005b6:	f3bf 8f4f 	dsb	sy
}
 80005ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005bc:	f3bf 8f6f 	isb	sy
}
 80005c0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005c2:	4b29      	ldr	r3, [pc, #164]	; (8000668 <CPU_CACHE_Enable+0xd8>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a28      	ldr	r2, [pc, #160]	; (8000668 <CPU_CACHE_Enable+0xd8>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ce:	f3bf 8f4f 	dsb	sy
}
 80005d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d4:	f3bf 8f6f 	isb	sy
}
 80005d8:	e000      	b.n	80005dc <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005da:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <CPU_CACHE_Enable+0xd8>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d138      	bne.n	800065a <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <CPU_CACHE_Enable+0xd8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <CPU_CACHE_Enable+0xd8>)
 80005f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005fc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	0b5b      	lsrs	r3, r3, #13
 8000602:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000606:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	08db      	lsrs	r3, r3, #3
 800060c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000610:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	015a      	lsls	r2, r3, #5
 8000616:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800061a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000620:	4911      	ldr	r1, [pc, #68]	; (8000668 <CPU_CACHE_Enable+0xd8>)
 8000622:	4313      	orrs	r3, r2
 8000624:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	1e5a      	subs	r2, r3, #1
 800062c:	607a      	str	r2, [r7, #4]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1ef      	bne.n	8000612 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1e5a      	subs	r2, r3, #1
 8000636:	60ba      	str	r2, [r7, #8]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1e5      	bne.n	8000608 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800063c:	f3bf 8f4f 	dsb	sy
}
 8000640:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <CPU_CACHE_Enable+0xd8>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <CPU_CACHE_Enable+0xd8>)
 8000648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800064c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	e000      	b.n	800065c <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800065a:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <CPU_CACHE_Disable>:

static void CPU_CACHE_Disable(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000672:	f3bf 8f4f 	dsb	sy
}
 8000676:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000678:	f3bf 8f6f 	isb	sy
}
 800067c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <CPU_CACHE_Disable+0xb4>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a27      	ldr	r2, [pc, #156]	; (8000720 <CPU_CACHE_Disable+0xb4>)
 8000684:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000688:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <CPU_CACHE_Disable+0xb4>)
 800068c:	2200      	movs	r2, #0
 800068e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000692:	f3bf 8f4f 	dsb	sy
}
 8000696:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000698:	f3bf 8f6f 	isb	sy
}
 800069c:	bf00      	nop
}
 800069e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <CPU_CACHE_Disable+0xb4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006a8:	f3bf 8f4f 	dsb	sy
}
 80006ac:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <CPU_CACHE_Disable+0xb4>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <CPU_CACHE_Disable+0xb4>)
 80006b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ba:	f3bf 8f4f 	dsb	sy
}
 80006be:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <CPU_CACHE_Disable+0xb4>)
 80006c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006c6:	60fb      	str	r3, [r7, #12]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	0b5b      	lsrs	r3, r3, #13
 80006cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006d0:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	08db      	lsrs	r3, r3, #3
 80006d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006da:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	015a      	lsls	r2, r3, #5
 80006e0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80006e4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <CPU_CACHE_Disable+0xb4>)
 80006ec:	4313      	orrs	r3, r2
 80006ee:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1ef      	bne.n	80006dc <CPU_CACHE_Disable+0x70>
    } while(sets-- != 0U);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	1e5a      	subs	r2, r3, #1
 8000700:	60ba      	str	r2, [r7, #8]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1e5      	bne.n	80006d2 <CPU_CACHE_Disable+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
 8000706:	f3bf 8f4f 	dsb	sy
}
 800070a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800070c:	f3bf 8f6f 	isb	sy
}
 8000710:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000712:	bf00      	nop
  /* Disable I-Cache */
  SCB_DisableICache();

  /* Disable D-Cache */
  SCB_DisableDCache();
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08e      	sub	sp, #56	; 0x38
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	4b57      	ldr	r3, [pc, #348]	; (8000898 <MX_GPIO_Init+0x174>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a55      	ldr	r2, [pc, #340]	; (8000898 <MX_GPIO_Init+0x174>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b53      	ldr	r3, [pc, #332]	; (8000898 <MX_GPIO_Init+0x174>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 0310 	and.w	r3, r3, #16
 8000754:	623b      	str	r3, [r7, #32]
 8000756:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000758:	4b4f      	ldr	r3, [pc, #316]	; (8000898 <MX_GPIO_Init+0x174>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075e:	4a4e      	ldr	r2, [pc, #312]	; (8000898 <MX_GPIO_Init+0x174>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000768:	4b4b      	ldr	r3, [pc, #300]	; (8000898 <MX_GPIO_Init+0x174>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61fb      	str	r3, [r7, #28]
 8000774:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	4b48      	ldr	r3, [pc, #288]	; (8000898 <MX_GPIO_Init+0x174>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	4a46      	ldr	r2, [pc, #280]	; (8000898 <MX_GPIO_Init+0x174>)
 800077e:	f043 0308 	orr.w	r3, r3, #8
 8000782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000786:	4b44      	ldr	r3, [pc, #272]	; (8000898 <MX_GPIO_Init+0x174>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078c:	f003 0308 	and.w	r3, r3, #8
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	4b40      	ldr	r3, [pc, #256]	; (8000898 <MX_GPIO_Init+0x174>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	4a3f      	ldr	r2, [pc, #252]	; (8000898 <MX_GPIO_Init+0x174>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a4:	4b3c      	ldr	r3, [pc, #240]	; (8000898 <MX_GPIO_Init+0x174>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b2:	4b39      	ldr	r3, [pc, #228]	; (8000898 <MX_GPIO_Init+0x174>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b8:	4a37      	ldr	r2, [pc, #220]	; (8000898 <MX_GPIO_Init+0x174>)
 80007ba:	f043 0320 	orr.w	r3, r3, #32
 80007be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c2:	4b35      	ldr	r3, [pc, #212]	; (8000898 <MX_GPIO_Init+0x174>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c8:	f003 0320 	and.w	r3, r3, #32
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <MX_GPIO_Init+0x174>)
 80007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d6:	4a30      	ldr	r2, [pc, #192]	; (8000898 <MX_GPIO_Init+0x174>)
 80007d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e0:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <MX_GPIO_Init+0x174>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_GPIO_Init+0x174>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f4:	4a28      	ldr	r2, [pc, #160]	; (8000898 <MX_GPIO_Init+0x174>)
 80007f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_GPIO_Init+0x174>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_GPIO_Init+0x174>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000812:	4a21      	ldr	r2, [pc, #132]	; (8000898 <MX_GPIO_Init+0x174>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_GPIO_Init+0x174>)
 800081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2101      	movs	r1, #1
 800082e:	481b      	ldr	r0, [pc, #108]	; (800089c <MX_GPIO_Init+0x178>)
 8000830:	f001 fc22 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	4819      	ldr	r0, [pc, #100]	; (80008a0 <MX_GPIO_Init+0x17c>)
 800083a:	f001 fc1d 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800083e:	2302      	movs	r3, #2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000846:	2302      	movs	r3, #2
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	4619      	mov	r1, r3
 8000850:	4814      	ldr	r0, [pc, #80]	; (80008a4 <MX_GPIO_Init+0x180>)
 8000852:	f001 fa49 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000856:	2301      	movs	r3, #1
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4619      	mov	r1, r3
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_GPIO_Init+0x178>)
 800086e:	f001 fa3b 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000872:	2301      	movs	r3, #1
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_GPIO_Init+0x17c>)
 800088a:	f001 fa2d 	bl	8001ce8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088e:	bf00      	nop
 8000890:	3738      	adds	r7, #56	; 0x38
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	58024400 	.word	0x58024400
 800089c:	58020800 	.word	0x58020800
 80008a0:	58020400 	.word	0x58020400
 80008a4:	58021400 	.word	0x58021400

080008a8 <MPU_Config>:

static void MPU_Config (void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 80008ae:	f001 f99f 	bl	8001bf0 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008b2:	2301      	movs	r3, #1
 80008b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008ba:	231f      	movs	r3, #31
 80008bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008be:	2300      	movs	r3, #0
 80008c0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008d6:	2387      	movs	r3, #135	; 0x87
 80008d8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008da:	2301      	movs	r3, #1
 80008dc:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008de:	463b      	mov	r3, r7
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 f9bd 	bl	8001c60 <HAL_MPU_ConfigRegion>

  /* Configure the MPU QSPI flash */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008e6:	2301      	movs	r3, #1
 80008e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80008ea:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80008ee:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80008f0:	2319      	movs	r3, #25
 80008f2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008f4:	2303      	movs	r3, #3
 80008f6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000904:	2304      	movs	r3, #4
 8000906:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000908:	2300      	movs	r3, #0
 800090a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800090c:	2300      	movs	r3, #0
 800090e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000914:	463b      	mov	r3, r7
 8000916:	4618      	mov	r0, r3
 8000918:	f001 f9a2 	bl	8001c60 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800091c:	2004      	movs	r0, #4
 800091e:	f001 f97f 	bl	8001c20 <HAL_MPU_Enable>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <Error_Handler>:


void Error_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2101      	movs	r1, #1
 8000938:	4801      	ldr	r0, [pc, #4]	; (8000940 <Error_Handler+0x14>)
 800093a:	f001 fb9d 	bl	8002078 <HAL_GPIO_WritePin>
  while (1)
 800093e:	e7fe      	b.n	800093e <Error_Handler+0x12>
 8000940:	58020800 	.word	0x58020800

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_MspInit+0x30>)
 800094c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000950:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x30>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x30>)
 800095c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	58024400 	.word	0x58024400

08000978 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0be      	sub	sp, #248	; 0xf8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000990:	f107 0320 	add.w	r3, r7, #32
 8000994:	22c0      	movs	r2, #192	; 0xc0
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f009 ff7f 	bl	800a89c <memset>
  if(hqspi->Instance==QUADSPI)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a67      	ldr	r2, [pc, #412]	; (8000b40 <HAL_QSPI_MspInit+0x1c8>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	f040 80c7 	bne.w	8000b38 <HAL_QSPI_MspInit+0x1c0>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80009aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009ae:	f04f 0300 	mov.w	r3, #0
 80009b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	4618      	mov	r0, r3
 80009c0:	f004 faca 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80009ca:	f7ff ffaf 	bl	800092c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80009ce:	4b5d      	ldr	r3, [pc, #372]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 80009d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80009d4:	4a5b      	ldr	r2, [pc, #364]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009da:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80009de:	4b59      	ldr	r3, [pc, #356]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 80009e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80009e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e8:	61fb      	str	r3, [r7, #28]
 80009ea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ec:	4b55      	ldr	r3, [pc, #340]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	4a54      	ldr	r2, [pc, #336]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fc:	4b51      	ldr	r3, [pc, #324]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	61bb      	str	r3, [r7, #24]
 8000a08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a0a:	4b4e      	ldr	r3, [pc, #312]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	4a4c      	ldr	r2, [pc, #304]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 8000a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a28:	4b46      	ldr	r3, [pc, #280]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	4a45      	ldr	r2, [pc, #276]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 8000a30:	f043 0320 	orr.w	r3, r3, #32
 8000a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a38:	4b42      	ldr	r3, [pc, #264]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3e:	f003 0320 	and.w	r3, r3, #32
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	4a3d      	ldr	r2, [pc, #244]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a56:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <HAL_QSPI_MspInit+0x1cc>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a64:	2304      	movs	r3, #4
 8000a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a7c:	2309      	movs	r3, #9
 8000a7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a82:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a86:	4619      	mov	r1, r3
 8000a88:	482f      	ldr	r0, [pc, #188]	; (8000b48 <HAL_QSPI_MspInit+0x1d0>)
 8000a8a:	f001 f92d 	bl	8001ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a8e:	2340      	movs	r3, #64	; 0x40
 8000a90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4826      	ldr	r0, [pc, #152]	; (8000b4c <HAL_QSPI_MspInit+0x1d4>)
 8000ab4:	f001 f918 	bl	8001ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ad6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ada:	4619      	mov	r1, r3
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <HAL_QSPI_MspInit+0x1d8>)
 8000ade:	f001 f903 	bl	8001ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ae2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000afc:	230a      	movs	r3, #10
 8000afe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <HAL_QSPI_MspInit+0x1d8>)
 8000b0a:	f001 f8ed 	bl	8001ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b26:	2309      	movs	r3, #9
 8000b28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4808      	ldr	r0, [pc, #32]	; (8000b54 <HAL_QSPI_MspInit+0x1dc>)
 8000b34:	f001 f8d8 	bl	8001ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	37f8      	adds	r7, #248	; 0xf8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	52005000 	.word	0x52005000
 8000b44:	58024400 	.word	0x58024400
 8000b48:	58021000 	.word	0x58021000
 8000b4c:	58021800 	.word	0x58021800
 8000b50:	58021400 	.word	0x58021400
 8000b54:	58020400 	.word	0x58020400

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 fec4 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <OTG_FS_IRQHandler+0x10>)
 8000bb2:	f001 fc28 	bl	8002406 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200007a0 	.word	0x200007a0

08000bc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00a      	b.n	8000be8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd2:	f3af 8000 	nop.w
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf0      	blt.n	8000bd2 <_read+0x12>
  }

  return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e009      	b.n	8000c20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf1      	blt.n	8000c0c <_write+0x12>
  }
  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_close>:

int _close(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_isatty>:

int _isatty(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f009 fdbc 	bl	800a848 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20008000 	.word	0x20008000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	200001b0 	.word	0x200001b0
 8000d04:	200010e0 	.word	0x200010e0

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b37      	ldr	r3, [pc, #220]	; (8000dec <SystemInit+0xe4>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a36      	ldr	r2, [pc, #216]	; (8000dec <SystemInit+0xe4>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d1c:	4b34      	ldr	r3, [pc, #208]	; (8000df0 <SystemInit+0xe8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 030f 	and.w	r3, r3, #15
 8000d24:	2b06      	cmp	r3, #6
 8000d26:	d807      	bhi.n	8000d38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d28:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <SystemInit+0xe8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f023 030f 	bic.w	r3, r3, #15
 8000d30:	4a2f      	ldr	r2, [pc, #188]	; (8000df0 <SystemInit+0xe8>)
 8000d32:	f043 0307 	orr.w	r3, r3, #7
 8000d36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d38:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <SystemInit+0xec>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a2d      	ldr	r2, [pc, #180]	; (8000df4 <SystemInit+0xec>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d44:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <SystemInit+0xec>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <SystemInit+0xec>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4929      	ldr	r1, [pc, #164]	; (8000df4 <SystemInit+0xec>)
 8000d50:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <SystemInit+0xf0>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <SystemInit+0xe8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d007      	beq.n	8000d72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d62:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <SystemInit+0xe8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 030f 	bic.w	r3, r3, #15
 8000d6a:	4a21      	ldr	r2, [pc, #132]	; (8000df0 <SystemInit+0xe8>)
 8000d6c:	f043 0307 	orr.w	r3, r3, #7
 8000d70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <SystemInit+0xec>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <SystemInit+0xec>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <SystemInit+0xec>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <SystemInit+0xec>)
 8000d86:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <SystemInit+0xf4>)
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <SystemInit+0xec>)
 8000d8c:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <SystemInit+0xf8>)
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <SystemInit+0xec>)
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <SystemInit+0xfc>)
 8000d94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <SystemInit+0xec>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <SystemInit+0xec>)
 8000d9e:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <SystemInit+0xfc>)
 8000da0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <SystemInit+0xec>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <SystemInit+0xec>)
 8000daa:	4a16      	ldr	r2, [pc, #88]	; (8000e04 <SystemInit+0xfc>)
 8000dac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <SystemInit+0xec>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <SystemInit+0xec>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <SystemInit+0xec>)
 8000dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <SystemInit+0xec>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <SystemInit+0x100>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <SystemInit+0x104>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dd2:	d202      	bcs.n	8000dda <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <SystemInit+0x108>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <SystemInit+0x10c>)
 8000ddc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000de0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00
 8000df0:	52002000 	.word	0x52002000
 8000df4:	58024400 	.word	0x58024400
 8000df8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dfc:	02020200 	.word	0x02020200
 8000e00:	01ff0000 	.word	0x01ff0000
 8000e04:	01010280 	.word	0x01010280
 8000e08:	5c001000 	.word	0x5c001000
 8000e0c:	ffff0000 	.word	0xffff0000
 8000e10:	51008108 	.word	0x51008108
 8000e14:	52004000 	.word	0x52004000

08000e18 <QSPI_If_Init_FS>:

/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful,  else.
  */
uint16_t QSPI_If_Init_FS(void){
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

	return (USBD_OK);
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <QSPI_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful,  else
  */
uint16_t QSPI_If_DeInit_FS(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <QSPI_If_Erase_FS>:
/**
  * @brief  Erase block(64KB).
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful,  else.
  */
uint16_t QSPI_If_Erase_FS(uint32_t Add){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	//printf("erase flag partition ...\r\n");
	state = USBD_FAIL;
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <QSPI_If_Erase_FS+0x5c>)
 8000e42:	2203      	movs	r2, #3
 8000e44:	801a      	strh	r2, [r3, #0]
	///blue led on

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4813      	ldr	r0, [pc, #76]	; (8000e98 <QSPI_If_Erase_FS+0x60>)
 8000e4c:	f001 f914 	bl	8002078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2101      	movs	r1, #1
 8000e54:	4811      	ldr	r0, [pc, #68]	; (8000e9c <QSPI_If_Erase_FS+0x64>)
 8000e56:	f001 f90f 	bl	8002078 <HAL_GPIO_WritePin>
	printf("erase flag partition..\r\n");
 8000e5a:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <QSPI_If_Erase_FS+0x68>)
 8000e5c:	f009 fdac 	bl	800a9b8 <puts>

	if (Add <= QSPI_FLASH_END){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <QSPI_If_Erase_FS+0x6c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d809      	bhi.n	8000e7c <QSPI_If_Erase_FS+0x44>
		state = QSPI_EraseBlock(Add);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fb9b 	bl	80015a4 <QSPI_EraseBlock>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <QSPI_If_Erase_FS+0x5c>)
 8000e74:	801a      	strh	r2, [r3, #0]
		state = HAL_OK;
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <QSPI_If_Erase_FS+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	801a      	strh	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <QSPI_If_Erase_FS+0x64>)
 8000e82:	f001 f8f9 	bl	8002078 <HAL_GPIO_WritePin>

	return state;
 8000e86:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <QSPI_If_Erase_FS+0x5c>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200001b4 	.word	0x200001b4
 8000e98:	58020400 	.word	0x58020400
 8000e9c:	58020800 	.word	0x58020800
 8000ea0:	0800b90c 	.word	0x0800b90c
 8000ea4:	90400000 	.word	0x90400000

08000ea8 <erase_sector>:
  * @retval USBD_OK if operation is successful,  else.
  */

uint32_t back_addr = 0;

void erase_sector(uint32_t addr){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	uint32_t block_er = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
	if(((addr - back_addr) % SECTOR_BYTE  == 0)){
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <erase_sector+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10c      	bne.n	8000ede <erase_sector+0x36>
		block_er = addr / SECTOR_BYTE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	0b1b      	lsrs	r3, r3, #12
 8000ec8:	60fb      	str	r3, [r7, #12]
		QSPI_EraseSector(block_er);
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f000 fb26 	bl	800151c <QSPI_EraseSector>
		back_addr = addr;
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <erase_sector+0x40>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
		printf("er(%ld) ", block_er);
 8000ed6:	68f9      	ldr	r1, [r7, #12]
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <erase_sector+0x44>)
 8000eda:	f009 fce7 	bl	800a8ac <iprintf>
	}
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200001b8 	.word	0x200001b8
 8000eec:	0800b924 	.word	0x0800b924

08000ef0 <QSPI_If_Write_FS>:

uint16_t QSPI_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	state = USBD_FAIL;
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <QSPI_If_Write_FS+0x74>)
 8000efe:	2203      	movs	r2, #3
 8000f00:	801a      	strh	r2, [r3, #0]
	///blue led on
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);

	printf("writing: ");
 8000f02:	4819      	ldr	r0, [pc, #100]	; (8000f68 <QSPI_If_Write_FS+0x78>)
 8000f04:	f009 fcd2 	bl	800a8ac <iprintf>
	uint32_t addr = ((uint32_t)dest-QSPI_FLASH_BASE);//flasha yazma adresi (0 + down_addr)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	f103 43e0 	add.w	r3, r3, #1879048192	; 0x70000000
 8000f0e:	617b      	str	r3, [r7, #20]

	erase_sector(addr);
 8000f10:	6978      	ldr	r0, [r7, #20]
 8000f12:	f7ff ffc9 	bl	8000ea8 <erase_sector>

	if(dest < (uint8_t*)QSPI_FLASH_BASE){
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	f1b3 4f10 	cmp.w	r3, #2415919104	; 0x90000000
 8000f1c:	d203      	bcs.n	8000f26 <QSPI_If_Write_FS+0x36>
		addr = ((uint32_t)dest-FLASH_BANK1_BASE);
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000f24:	617b      	str	r3, [r7, #20]
	}
	if ((addr+Len)<=FLASH_BYTE){
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f30:	d808      	bhi.n	8000f44 <QSPI_If_Write_FS+0x54>
		state =  QSPI_Write(addr,src, Len);
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68f9      	ldr	r1, [r7, #12]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f000 fb8a 	bl	8001650 <QSPI_Write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <QSPI_If_Write_FS+0x74>)
 8000f42:	801a      	strh	r2, [r3, #0]
	}

	printf(" 0x%lX, %ld OK\r\n", addr, Len);
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	6979      	ldr	r1, [r7, #20]
 8000f48:	4808      	ldr	r0, [pc, #32]	; (8000f6c <QSPI_If_Write_FS+0x7c>)
 8000f4a:	f009 fcaf 	bl	800a8ac <iprintf>

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4807      	ldr	r0, [pc, #28]	; (8000f70 <QSPI_If_Write_FS+0x80>)
 8000f52:	f001 f8aa 	bl	80020aa <HAL_GPIO_TogglePin>
	return state;
 8000f56:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <QSPI_If_Write_FS+0x74>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200001b4 	.word	0x200001b4
 8000f68:	0800b930 	.word	0x0800b930
 8000f6c:	0800b93c 	.word	0x0800b93c
 8000f70:	58020800 	.word	0x58020800

08000f74 <QSPI_If_Read_FS>:
  * @param  src: Pointer to the source buffer. Address to be written to.
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *QSPI_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	if(DEBUG){
		printf("Read addr: 0x%lX, 0x%lX, %ld \r\n", (uint32_t)src, (uint32_t)dest, (uint32_t)Len);
 8000f80:	68f9      	ldr	r1, [r7, #12]
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <QSPI_If_Read_FS+0x5c>)
 8000f88:	f009 fc90 	bl	800a8ac <iprintf>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <QSPI_If_Read_FS+0x60>)
 8000f92:	f001 f871 	bl	8002078 <HAL_GPIO_WritePin>
	if (src>=(uint8_t*)QSPI_FLASH_BASE && (src+Len)<=(uint8_t*)QSPI_FLASH_END){
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 4f10 	cmp.w	r3, #2415919104	; 0x90000000
 8000f9c:	d30d      	bcc.n	8000fba <QSPI_If_Read_FS+0x46>
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <QSPI_If_Read_FS+0x64>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d807      	bhi.n	8000fba <QSPI_If_Read_FS+0x46>
		QSPI_Read(((uint32_t)src-QSPI_FLASH_BASE), dest, Len);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f103 43e0 	add.w	r3, r3, #1879048192	; 0x70000000
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fbc7 	bl	8001748 <QSPI_Read>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <QSPI_If_Read_FS+0x60>)
 8000fc0:	f001 f85a 	bl	8002078 <HAL_GPIO_WritePin>
	return (uint8_t *) (dest);
 8000fc4:	68bb      	ldr	r3, [r7, #8]
	/* no way to indicate fail from return value */
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	0800b950 	.word	0x0800b950
 8000fd4:	58020800 	.word	0x58020800
 8000fd8:	90400000 	.word	0x90400000

08000fdc <QSPI_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t QSPI_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	72fb      	strb	r3, [r7, #11]
  switch (Cmd)
 8000fea:	7afb      	ldrb	r3, [r7, #11]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d10c      	bne.n	800100a <QSPI_If_GetStatus_FS+0x2e>
  {
    case DFU_MEDIA_PROGRAM:
	buffer[1] = (uint8_t) QSPI_FLASH_PROGRAM_TIME;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	2214      	movs	r2, #20
 8000ff6:	701a      	strb	r2, [r3, #0]
	buffer[2] = (uint8_t) (QSPI_FLASH_PROGRAM_TIME << 8);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3303      	adds	r3, #3
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
    break;
 8001008:	e00e      	b.n	8001028 <QSPI_If_GetStatus_FS+0x4c>

    case DFU_MEDIA_ERASE:
    default:
	buffer[1] = (uint8_t) QSPI_FLASH_ERASE_TIME;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3301      	adds	r3, #1
 800100e:	2214      	movs	r2, #20
 8001010:	701a      	strb	r2, [r3, #0]
	buffer[2] = (uint8_t) (QSPI_FLASH_ERASE_TIME << 8);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3302      	adds	r3, #2
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3303      	adds	r3, #3
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
	QSPI_EraseChip();
 8001022:	f000 fb03 	bl	800162c <QSPI_EraseChip>
    break;
 8001026:	bf00      	nop
  }
  return (USBD_OK);
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <QSPI_SetCom>:
	return HAL_OK;
}

/**********************************LIB START************************************************************/

QSPI_CommandTypeDef QSPI_SetCom(uint32_t Instruction) {
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b090      	sub	sp, #64	; 0x40
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand;
	memset(&sCommand, 0, sizeof(QSPI_CommandTypeDef));
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	2238      	movs	r2, #56	; 0x38
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f009 fc28 	bl	800a89c <memset>
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001054:	2300      	movs	r3, #0
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001058:	2300      	movs	r3, #0
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c

	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800105c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001060:	617b      	str	r3, [r7, #20]
	sCommand.InstructionMode = qspi_data.qe ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <QSPI_SetCom+0x80>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <QSPI_SetCom+0x3c>
 800106a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800106e:	e001      	b.n	8001074 <QSPI_SetCom+0x40>
 8001070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001074:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_NONE;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c

	sCommand.NbData = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
	sCommand.DummyCycles = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = Instruction;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	60bb      	str	r3, [r7, #8]
	return sCommand;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	461d      	mov	r5, r3
 8001092:	f107 0408 	add.w	r4, r7, #8
 8001096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010a6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	3740      	adds	r7, #64	; 0x40
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bdb0      	pop	{r4, r5, r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001bc 	.word	0x200001bc

080010b8 <QSPI_Delay>:

void QSPI_Delay(uint32_t us){
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	for (uint32_t temp = 0; temp < us; temp++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	e003      	b.n	80010ce <QSPI_Delay+0x16>
		__NOP();
 80010c6:	bf00      	nop
	for (uint32_t temp = 0; temp < us; temp++) {
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3301      	adds	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3f7      	bcc.n	80010c6 <QSPI_Delay+0xe>
	}
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <QSPI_IsBusy>:

uint8_t QSPI_IsBusy(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
#ifdef AUTOPOOL
	QSPI_AutoPollingMemReady();
#else
	uint8_t reg1[1], is_busy = 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	71fb      	strb	r3, [r7, #7]
	while(is_busy){
 80010ee:	e00d      	b.n	800110c <QSPI_IsBusy+0x28>
	  QSPI_ReadStatusReg(reg1, 1, 1);
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2201      	movs	r2, #1
 80010f4:	2101      	movs	r1, #1
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f8e0 	bl	80012bc <QSPI_ReadStatusReg>
	  is_busy = ((reg1[0]) & 0x01);
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	71fb      	strb	r3, [r7, #7]
	  QSPI_Delay(1000);
 8001104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001108:	f7ff ffd6 	bl	80010b8 <QSPI_Delay>
	while(is_busy){
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1ee      	bne.n	80010f0 <QSPI_IsBusy+0xc>
	}
#endif
	return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <QSPI_Cmd>:

uint8_t QSPI_Cmd(uint32_t cmd){
 800111c:	b580      	push	{r7, lr}
 800111e:	b090      	sub	sp, #64	; 0x40
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef sCommand = QSPI_SetCom(cmd);
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff82 	bl	8001034 <QSPI_SetCom>
	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	f241 3288 	movw	r2, #5000	; 0x1388
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <QSPI_Cmd+0x38>)
 800113c:	f002 fb20 	bl	8003780 <HAL_QSPI_Command>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <QSPI_Cmd+0x2e>
		return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <QSPI_Cmd+0x30>
	}
	return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3740      	adds	r7, #64	; 0x40
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000160 	.word	0x20000160

08001158 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void){
 8001158:	b580      	push	{r7, lr}
 800115a:	b094      	sub	sp, #80	; 0x50
 800115c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef com = QSPI_SetCom(0x05);
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	2105      	movs	r1, #5
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff65 	bl	8001034 <QSPI_SetCom>
	QSPI_AutoPollingTypeDef sConfig;

	sConfig.Match = 0x00;
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x01;
 800116e:	2301      	movs	r3, #1
 8001170:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8001176:	2301      	movs	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x50;
 800117a:	2350      	movs	r3, #80	; 0x50
 800117c:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]

	com.DataMode = qspi_data.qe ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <QSPI_AutoPollingMemReady+0x68>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <QSPI_AutoPollingMemReady+0x38>
 800118a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800118e:	e001      	b.n	8001194 <QSPI_AutoPollingMemReady+0x3c>
 8001190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001194:	63fb      	str	r3, [r7, #60]	; 0x3c
	com.NbData = 1;
 8001196:	2301      	movs	r3, #1
 8001198:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_QSPI_AutoPolling(&hqspi, &com, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800119a:	463a      	mov	r2, r7
 800119c:	f107 0118 	add.w	r1, r7, #24
 80011a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <QSPI_AutoPollingMemReady+0x6c>)
 80011a6:	f002 fc78 	bl	8003a9a <HAL_QSPI_AutoPolling>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <QSPI_AutoPollingMemReady+0x5c>
		return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <QSPI_AutoPollingMemReady+0x5e>
	}
  return FLASH_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3750      	adds	r7, #80	; 0x50
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200001bc 	.word	0x200001bc
 80011c4:	20000160 	.word	0x20000160

080011c8 <QSPI_WriteEnable>:

uint8_t QSPI_WriteEnable(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

	if (QSPI_Cmd(0x06) != HAL_OK) {
 80011ce:	2006      	movs	r0, #6
 80011d0:	f7ff ffa4 	bl	800111c <QSPI_Cmd>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00b      	beq.n	80011f2 <QSPI_WriteEnable+0x2a>
		return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <QSPI_WriteEnable+0x36>
		return HAL_ERROR;
	}
#else
	uint8_t reg_data[1];
	while(!(reg_data[0] & 0x02)){
		QSPI_ReadStatusReg(reg_data, 1, 1);
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2201      	movs	r2, #1
 80011e2:	2101      	movs	r1, #1
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f869 	bl	80012bc <QSPI_ReadStatusReg>
		QSPI_Delay(1000);
 80011ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ee:	f7ff ff63 	bl	80010b8 <QSPI_Delay>
	while(!(reg_data[0] & 0x02)){
 80011f2:	793b      	ldrb	r3, [r7, #4]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <QSPI_WriteEnable+0x16>
	}
#endif
	return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <QSPI_Reset>:

uint8_t QSPI_Reset(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
	memset(&qspi_data, 0, sizeof(Qspi_variable));
 800120e:	2202      	movs	r2, #2
 8001210:	2100      	movs	r1, #0
 8001212:	4812      	ldr	r0, [pc, #72]	; (800125c <QSPI_Reset+0x54>)
 8001214:	f009 fb42 	bl	800a89c <memset>
	uint32_t temp = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
	//enable reset
	if (QSPI_Cmd(0x66) != HAL_OK) {
 800121c:	2066      	movs	r0, #102	; 0x66
 800121e:	f7ff ff7d 	bl	800111c <QSPI_Cmd>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <QSPI_Reset+0x24>
		return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e012      	b.n	8001252 <QSPI_Reset+0x4a>
	}
	//delay
	for (temp = 0; temp < 0x2f; temp++) {
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	e003      	b.n	800123a <QSPI_Reset+0x32>
		__NOP();
 8001232:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3301      	adds	r3, #1
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b2e      	cmp	r3, #46	; 0x2e
 800123e:	d9f8      	bls.n	8001232 <QSPI_Reset+0x2a>
	}
	//reset
	if(QSPI_Cmd(0x99) !=HAL_OK){
 8001240:	2099      	movs	r0, #153	; 0x99
 8001242:	f7ff ff6b 	bl	800111c <QSPI_Cmd>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <QSPI_Reset+0x48>
		return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <QSPI_Reset+0x4a>
	}
	return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001bc 	.word	0x200001bc

08001260 <QSPI_Init>:
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(gpio, &GPIO_InitStruct);
}

uint8_t QSPI_Init(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	uint8_t wr[1] = {0x00}, status = FLASH_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	713b      	strb	r3, [r7, #4]
 800126a:	2300      	movs	r3, #0
 800126c:	71fb      	strb	r3, [r7, #7]
#ifdef WPHOLD
    QSPI_Gpio_mode(1, GPIO_PIN_2, GPIOE);
    QSPI_Gpio_mode(1, GPIO_PIN_6, GPIOF);
#endif
#ifdef RESET
	if(QSPI_Reset()!=HAL_OK){
 800126e:	f7ff ffcb 	bl	8001208 <QSPI_Reset>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <QSPI_Init+0x1c>
		return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e019      	b.n	80012b0 <QSPI_Init+0x50>
	}
#endif
	QSPI_QEDisable();
 800127c:	f000 f926 	bl	80014cc <QSPI_QEDisable>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2140      	movs	r1, #64	; 0x40
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <QSPI_Init+0x58>)
 8001286:	f000 fef7 	bl	8002078 <HAL_GPIO_WritePin>
	QSPI_Cmd(0XAB);
 800128a:	20ab      	movs	r0, #171	; 0xab
 800128c:	f7ff ff46 	bl	800111c <QSPI_Cmd>
	QSPI_WriteEnable();
 8001290:	f7ff ff9a 	bl	80011c8 <QSPI_WriteEnable>
	status = QSPI_WriteStatusReg(wr, 1, 1);//reg1 set 0x00
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2201      	movs	r2, #1
 8001298:	2101      	movs	r1, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f85c 	bl	8001358 <QSPI_WriteStatusReg>
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
	QSPI_Delay(100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f7ff ff07 	bl	80010b8 <QSPI_Delay>
	QSPI_ReadDevID();
 80012aa:	f000 f8d9 	bl	8001460 <QSPI_ReadDevID>
	return status;
 80012ae:	79fb      	ldrb	r3, [r7, #7]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	58021800 	.word	0x58021800

080012bc <QSPI_ReadStatusReg>:

uint8_t QSPI_ReadStatusReg(uint8_t *reg_data, uint8_t reg_num, uint8_t size) {
 80012bc:	b5b0      	push	{r4, r5, r7, lr}
 80012be:	b098      	sub	sp, #96	; 0x60
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
 80012c8:	4613      	mov	r3, r2
 80012ca:	70bb      	strb	r3, [r7, #2]
	uint32_t addr[7] = {0x00, 0x05, 0x35, 0x15, 0x48, 0x94, 0x9F};
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <QSPI_ReadStatusReg+0x90>)
 80012ce:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80012d2:	461d      	mov	r5, r3
 80012d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	QSPI_CommandTypeDef sCommand = QSPI_SetCom(addr[reg_num]);
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	3360      	adds	r3, #96	; 0x60
 80012e6:	443b      	add	r3, r7
 80012e8:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fe9e 	bl	8001034 <QSPI_SetCom>

	sCommand.DataMode = qspi_data.qe ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <QSPI_ReadStatusReg+0x94>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <QSPI_ReadStatusReg+0x4a>
 8001300:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001304:	e001      	b.n	800130a <QSPI_ReadStatusReg+0x4e>
 8001306:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.NbData = size;
 800130c:	78bb      	ldrb	r3, [r7, #2]
 800130e:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	f241 3288 	movw	r2, #5000	; 0x1388
 8001318:	4619      	mov	r1, r3
 800131a:	480e      	ldr	r0, [pc, #56]	; (8001354 <QSPI_ReadStatusReg+0x98>)
 800131c:	f002 fa30 	bl	8003780 <HAL_QSPI_Command>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <QSPI_ReadStatusReg+0x6e>
		return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00b      	b.n	8001342 <QSPI_ReadStatusReg+0x86>
	}
	if (HAL_QSPI_Receive(&hqspi, reg_data, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800132a:	f241 3288 	movw	r2, #5000	; 0x1388
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <QSPI_ReadStatusReg+0x98>)
 8001332:	f002 fb15 	bl	8003960 <HAL_QSPI_Receive>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <QSPI_ReadStatusReg+0x84>
		return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <QSPI_ReadStatusReg+0x86>
	}
	return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3760      	adds	r7, #96	; 0x60
 8001346:	46bd      	mov	sp, r7
 8001348:	bdb0      	pop	{r4, r5, r7, pc}
 800134a:	bf00      	nop
 800134c:	0800b970 	.word	0x0800b970
 8001350:	200001bc 	.word	0x200001bc
 8001354:	20000160 	.word	0x20000160

08001358 <QSPI_WriteStatusReg>:

uint8_t QSPI_WriteStatusReg(uint8_t *reg_data, uint8_t reg_num, uint8_t size) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b096      	sub	sp, #88	; 0x58
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
 8001364:	4613      	mov	r3, r2
 8001366:	70bb      	strb	r3, [r7, #2]
	uint32_t addr[6] = {0x00, 0x01, 0x31, 0x11, 0x38};
 8001368:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	2301      	movs	r3, #1
 800137c:	647b      	str	r3, [r7, #68]	; 0x44
 800137e:	2331      	movs	r3, #49	; 0x31
 8001380:	64bb      	str	r3, [r7, #72]	; 0x48
 8001382:	2311      	movs	r3, #17
 8001384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001386:	2338      	movs	r3, #56	; 0x38
 8001388:	653b      	str	r3, [r7, #80]	; 0x50
	QSPI_CommandTypeDef com = QSPI_SetCom(addr[reg_num]);
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	3358      	adds	r3, #88	; 0x58
 8001390:	443b      	add	r3, r7
 8001392:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fe49 	bl	8001034 <QSPI_SetCom>
	com.DataMode = qspi_data.qe ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <QSPI_WriteStatusReg+0xac>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <QSPI_WriteStatusReg+0x58>
 80013aa:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80013ae:	e001      	b.n	80013b4 <QSPI_WriteStatusReg+0x5c>
 80013b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	com.NbData = size;
 80013b6:	78bb      	ldrb	r3, [r7, #2]
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30

	if (QSPI_IsBusy() != HAL_OK) {
 80013ba:	f7ff fe93 	bl	80010e4 <QSPI_IsBusy>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <QSPI_WriteStatusReg+0x70>
		return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e018      	b.n	80013fa <QSPI_WriteStatusReg+0xa2>
	}
	if (HAL_QSPI_Command(&hqspi, &com, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4619      	mov	r1, r3
 80013d2:	480d      	ldr	r0, [pc, #52]	; (8001408 <QSPI_WriteStatusReg+0xb0>)
 80013d4:	f002 f9d4 	bl	8003780 <HAL_QSPI_Command>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <QSPI_WriteStatusReg+0x8a>
		return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e00b      	b.n	80013fa <QSPI_WriteStatusReg+0xa2>
	}
	if (HAL_QSPI_Transmit(&hqspi, reg_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80013e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <QSPI_WriteStatusReg+0xb0>)
 80013ea:	f002 fa27 	bl	800383c <HAL_QSPI_Transmit>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <QSPI_WriteStatusReg+0xa0>
		return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <QSPI_WriteStatusReg+0xa2>
	}
	return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3758      	adds	r7, #88	; 0x58
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200001bc 	.word	0x200001bc
 8001408:	20000160 	.word	0x20000160

0800140c <QSPI_EnableMemoryMappedMode>:


uint8_t QSPI_EnableMemoryMappedMode(void) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b090      	sub	sp, #64	; 0x40
 8001410:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef com = QSPI_SetCom(0xEB);
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	21eb      	movs	r1, #235	; 0xeb
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe0b 	bl	8001034 <QSPI_SetCom>
    	com.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800141e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001422:	623b      	str	r3, [r7, #32]
		com.AddressMode = QSPI_ADDRESS_4_LINES;
 8001424:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
		com.DataMode = QSPI_DATA_4_LINES;
 800142a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
		com.DummyCycles = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	61fb      	str	r3, [r7, #28]

    QSPI_MemoryMappedTypeDef sMemMappedCfg;
    	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &com, &sMemMappedCfg) != HAL_OK) {
 8001438:	463a      	mov	r2, r7
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	4619      	mov	r1, r3
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <QSPI_EnableMemoryMappedMode+0x50>)
 8001442:	f002 fba1 	bl	8003b88 <HAL_QSPI_MemoryMapped>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <QSPI_EnableMemoryMappedMode+0x44>
		return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <QSPI_EnableMemoryMappedMode+0x46>
	}
    return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3740      	adds	r7, #64	; 0x40
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000160 	.word	0x20000160

08001460 <QSPI_ReadDevID>:

uint16_t QSPI_ReadDevID(void){
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	uint8_t reg_data[3];
	QSPI_ReadStatusReg(reg_data, 6, 3);
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2203      	movs	r2, #3
 800146a:	2106      	movs	r1, #6
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff25 	bl	80012bc <QSPI_ReadStatusReg>
    return (reg_data[0]<<8) | reg_data[1];
 8001472:	793b      	ldrb	r3, [r7, #4]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	b21a      	sxth	r2, r3
 8001478:	797b      	ldrb	r3, [r7, #5]
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	b29b      	uxth	r3, r3
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <QSPI_QEEnable>:

uint8_t QSPI_QEEnable(){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	uint8_t status = FLASH_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	71fb      	strb	r3, [r7, #7]
	QSPI_WriteEnable();
 8001496:	f7ff fe97 	bl	80011c8 <QSPI_WriteEnable>
	QSPI_Cmd(0X38);
 800149a:	2038      	movs	r0, #56	; 0x38
 800149c:	f7ff fe3e 	bl	800111c <QSPI_Cmd>
	uint8_t wr[1] = {0x02};
 80014a0:	2302      	movs	r3, #2
 80014a2:	713b      	strb	r3, [r7, #4]
	status = QSPI_WriteStatusReg(wr, 2, 1);
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2201      	movs	r2, #1
 80014a8:	2102      	movs	r1, #2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff54 	bl	8001358 <QSPI_WriteStatusReg>
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
	QSPI_IsBusy();
 80014b4:	f7ff fe16 	bl	80010e4 <QSPI_IsBusy>
	qspi_data.qe = 1;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <QSPI_QEEnable+0x3c>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
	return status;
 80014be:	79fb      	ldrb	r3, [r7, #7]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200001bc 	.word	0x200001bc

080014cc <QSPI_QEDisable>:

uint8_t QSPI_QEDisable(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	qspi_data.qe = 1;
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <QSPI_QEDisable+0x2c>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
	uint8_t status = FLASH_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	71fb      	strb	r3, [r7, #7]
	status = QSPI_Cmd(0xFF);
 80014dc:	20ff      	movs	r0, #255	; 0xff
 80014de:	f7ff fe1d 	bl	800111c <QSPI_Cmd>
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	qspi_data.qe = 0;
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <QSPI_QEDisable+0x2c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
	return status;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200001bc 	.word	0x200001bc

080014fc <QSPI_EnableMap>:
uint8_t QSPI_EnableMap(){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	QSPI_QEEnable();
 8001500:	f7ff ffc4 	bl	800148c <QSPI_QEEnable>
	if(QSPI_EnableMemoryMappedMode() !=HAL_OK){
 8001504:	f7ff ff82 	bl	800140c <QSPI_EnableMemoryMappedMode>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <QSPI_EnableMap+0x16>
		return HAL_ERROR + 1;
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <QSPI_EnableMap+0x1c>
	}
	QSPI_AutoPollingMemReady();
 8001512:	f7ff fe21 	bl	8001158 <QSPI_AutoPollingMemReady>
	return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}

0800151c <QSPI_EraseSector>:

uint8_t QSPI_EraseSector(uint32_t sector) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b090      	sub	sp, #64	; 0x40
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	if(sector >	SECTOR_SIZE){
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152a:	d901      	bls.n	8001530 <QSPI_EraseSector+0x14>
		return FLASH_ERR_PARAM;
 800152c:	2302      	movs	r3, #2
 800152e:	e031      	b.n	8001594 <QSPI_EraseSector+0x78>
	}
	//enable
	if(QSPI_WriteEnable()!= HAL_OK) {
 8001530:	f7ff fe4a 	bl	80011c8 <QSPI_WriteEnable>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <QSPI_EraseSector+0x22>
		return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e02a      	b.n	8001594 <QSPI_EraseSector+0x78>
	}
	//resume
	if(QSPI_Cmd(0x7A)!= HAL_OK) {
 800153e:	207a      	movs	r0, #122	; 0x7a
 8001540:	f7ff fdec 	bl	800111c <QSPI_Cmd>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <QSPI_EraseSector+0x32>
		return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e022      	b.n	8001594 <QSPI_EraseSector+0x78>
	}
	//erase sector
	QSPI_CommandTypeDef sCommand = QSPI_SetCom(0x20);
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	2120      	movs	r1, #32
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fd6d 	bl	8001034 <QSPI_SetCom>
	sCommand.AddressMode = qspi_data.qe ? QSPI_ADDRESS_4_LINES : QSPI_ADDRESS_1_LINE;
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <QSPI_EraseSector+0x80>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d002      	beq.n	8001568 <QSPI_EraseSector+0x4c>
 8001562:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001566:	e001      	b.n	800156c <QSPI_EraseSector+0x50>
 8001568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.Address = sector * SECTOR_BYTE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	031b      	lsls	r3, r3, #12
 8001572:	60fb      	str	r3, [r7, #12]
	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4619      	mov	r1, r3
 800157e:	4808      	ldr	r0, [pc, #32]	; (80015a0 <QSPI_EraseSector+0x84>)
 8001580:	f002 f8fe 	bl	8003780 <HAL_QSPI_Command>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <QSPI_EraseSector+0x72>
		return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e002      	b.n	8001594 <QSPI_EraseSector+0x78>
	}

	//waiting finish
	QSPI_IsBusy();
 800158e:	f7ff fda9 	bl	80010e4 <QSPI_IsBusy>
	return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3740      	adds	r7, #64	; 0x40
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200001bc 	.word	0x200001bc
 80015a0:	20000160 	.word	0x20000160

080015a4 <QSPI_EraseBlock>:

uint8_t QSPI_EraseBlock(uint32_t block){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b090      	sub	sp, #64	; 0x40
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	if(block >	BLOCK_SIZE){
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b40      	cmp	r3, #64	; 0x40
 80015b0:	d901      	bls.n	80015b6 <QSPI_EraseBlock+0x12>
		return FLASH_ERR_PARAM;
 80015b2:	2302      	movs	r3, #2
 80015b4:	e031      	b.n	800161a <QSPI_EraseBlock+0x76>
	}
	//enable
	if(QSPI_WriteEnable()!= HAL_OK) {
 80015b6:	f7ff fe07 	bl	80011c8 <QSPI_WriteEnable>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <QSPI_EraseBlock+0x20>
		return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e02a      	b.n	800161a <QSPI_EraseBlock+0x76>
	}
	//resume
	if(QSPI_Cmd(0x7A)!= HAL_OK) {
 80015c4:	207a      	movs	r0, #122	; 0x7a
 80015c6:	f7ff fda9 	bl	800111c <QSPI_Cmd>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <QSPI_EraseBlock+0x30>
		return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e022      	b.n	800161a <QSPI_EraseBlock+0x76>
	}
	//erase sector
	QSPI_CommandTypeDef sCommand = QSPI_SetCom(0xD8);
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	21d8      	movs	r1, #216	; 0xd8
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fd2a 	bl	8001034 <QSPI_SetCom>
	sCommand.AddressMode = qspi_data.qe ? QSPI_ADDRESS_4_LINES : QSPI_ADDRESS_1_LINE;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <QSPI_EraseBlock+0x80>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <QSPI_EraseBlock+0x4a>
 80015e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015ec:	e001      	b.n	80015f2 <QSPI_EraseBlock+0x4e>
 80015ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.Address = block * BLOCK_BYTE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	041b      	lsls	r3, r3, #16
 80015f8:	60fb      	str	r3, [r7, #12]
	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4619      	mov	r1, r3
 8001604:	4808      	ldr	r0, [pc, #32]	; (8001628 <QSPI_EraseBlock+0x84>)
 8001606:	f002 f8bb 	bl	8003780 <HAL_QSPI_Command>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <QSPI_EraseBlock+0x70>
		return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e002      	b.n	800161a <QSPI_EraseBlock+0x76>
	}

	//waiting finish
	QSPI_IsBusy();
 8001614:	f7ff fd66 	bl	80010e4 <QSPI_IsBusy>
	return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3740      	adds	r7, #64	; 0x40
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200001bc 	.word	0x200001bc
 8001628:	20000160 	.word	0x20000160

0800162c <QSPI_EraseChip>:

uint8_t QSPI_EraseChip(){
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  //enable
  QSPI_WriteEnable();
 8001630:	f7ff fdca 	bl	80011c8 <QSPI_WriteEnable>
  //erase
  if(QSPI_Cmd(0xC7)!= HAL_OK) {
 8001634:	20c7      	movs	r0, #199	; 0xc7
 8001636:	f7ff fd71 	bl	800111c <QSPI_Cmd>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <QSPI_EraseChip+0x18>
	return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e002      	b.n	800164a <QSPI_EraseChip+0x1e>
  }
  //waiting
  QSPI_IsBusy();
 8001644:	f7ff fd4e 	bl	80010e4 <QSPI_IsBusy>
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <QSPI_Write>:


uint8_t QSPI_Write(uint32_t address, uint8_t *data, uint32_t size){
 8001650:	b580      	push	{r7, lr}
 8001652:	b096      	sub	sp, #88	; 0x58
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	int32_t page_byte = size;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t loop_size = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	653b      	str	r3, [r7, #80]	; 0x50

	if(size > (PAGE_SIZE * PAGE_BYTE)){
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800166a:	d901      	bls.n	8001670 <QSPI_Write+0x20>
		return FLASH_ERR_PARAM;
 800166c:	2302      	movs	r3, #2
 800166e:	e063      	b.n	8001738 <QSPI_Write+0xe8>
	}
	//write
	uint32_t cmd = qspi_data.qe ? 0x32 : 0x02;
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <QSPI_Write+0xf0>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <QSPI_Write+0x2c>
 8001678:	2332      	movs	r3, #50	; 0x32
 800167a:	e000      	b.n	800167e <QSPI_Write+0x2e>
 800167c:	2302      	movs	r3, #2
 800167e:	64fb      	str	r3, [r7, #76]	; 0x4c
	QSPI_CommandTypeDef sCommand = QSPI_SetCom(cmd);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fcd4 	bl	8001034 <QSPI_SetCom>
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800168c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001690:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode =  qspi_data.qe ? QSPI_ADDRESS_4_LINES : QSPI_ADDRESS_1_LINE;
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <QSPI_Write+0xf0>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <QSPI_Write+0x50>
 800169a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800169e:	e001      	b.n	80016a4 <QSPI_Write+0x54>
 80016a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DataMode =  qspi_data.qe ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <QSPI_Write+0xf0>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <QSPI_Write+0x64>
 80016ae:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80016b2:	e001      	b.n	80016b8 <QSPI_Write+0x68>
 80016b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016b8:	63bb      	str	r3, [r7, #56]	; 0x38

	//write map
	while(page_byte > 0){
 80016ba:	e039      	b.n	8001730 <QSPI_Write+0xe0>

		if(!(loop_size % 0x100))
 80016bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <QSPI_Write+0x78>
			QSPI_WriteEnable();
 80016c4:	f7ff fd80 	bl	80011c8 <QSPI_WriteEnable>

		size = ((page_byte>PAGE_BYTE) ? PAGE_BYTE : page_byte);
 80016c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ce:	bfa8      	it	ge
 80016d0:	f44f 7380 	movge.w	r3, #256	; 0x100
 80016d4:	607b      	str	r3, [r7, #4]
		sCommand.Address = (address);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = size;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4619      	mov	r1, r3
 80016e8:	4816      	ldr	r0, [pc, #88]	; (8001744 <QSPI_Write+0xf4>)
 80016ea:	f002 f849 	bl	8003780 <HAL_QSPI_Command>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <QSPI_Write+0xa8>
			return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e01f      	b.n	8001738 <QSPI_Write+0xe8>
		}
		if (HAL_QSPI_Transmit(&hqspi, ((void *)data)+(loop_size), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016fc:	4413      	add	r3, r2
 80016fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001702:	4619      	mov	r1, r3
 8001704:	480f      	ldr	r0, [pc, #60]	; (8001744 <QSPI_Write+0xf4>)
 8001706:	f002 f899 	bl	800383c <HAL_QSPI_Transmit>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <QSPI_Write+0xc4>
			return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e011      	b.n	8001738 <QSPI_Write+0xe8>
		}

		loop_size +=PAGE_BYTE;
 8001714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001716:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800171a:	653b      	str	r3, [r7, #80]	; 0x50
		address	  +=PAGE_BYTE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001722:	60fb      	str	r3, [r7, #12]
		page_byte -=PAGE_BYTE;
 8001724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001726:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800172a:	657b      	str	r3, [r7, #84]	; 0x54

		QSPI_IsBusy();
 800172c:	f7ff fcda 	bl	80010e4 <QSPI_IsBusy>
	while(page_byte > 0){
 8001730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001732:	2b00      	cmp	r3, #0
 8001734:	dcc2      	bgt.n	80016bc <QSPI_Write+0x6c>
	}

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3758      	adds	r7, #88	; 0x58
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200001bc 	.word	0x200001bc
 8001744:	20000160 	.word	0x20000160

08001748 <QSPI_Read>:

uint8_t QSPI_Read(uint32_t address, uint8_t *data, uint32_t size){
 8001748:	b580      	push	{r7, lr}
 800174a:	b094      	sub	sp, #80	; 0x50
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	uint32_t cmd = qspi_data.qe ? 0xEB : 0x03;
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <QSPI_Read+0xa8>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <QSPI_Read+0x18>
 800175c:	23eb      	movs	r3, #235	; 0xeb
 800175e:	e000      	b.n	8001762 <QSPI_Read+0x1a>
 8001760:	2303      	movs	r3, #3
 8001762:	64fb      	str	r3, [r7, #76]	; 0x4c
    QSPI_CommandTypeDef sCommand = QSPI_SetCom(cmd);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fc62 	bl	8001034 <QSPI_SetCom>
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001774:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode =  qspi_data.qe ? QSPI_ADDRESS_4_LINES : QSPI_ADDRESS_1_LINE;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <QSPI_Read+0xa8>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <QSPI_Read+0x3c>
 800177e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001782:	e001      	b.n	8001788 <QSPI_Read+0x40>
 8001784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001788:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DataMode =  qspi_data.qe ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <QSPI_Read+0xa8>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <QSPI_Read+0x50>
 8001792:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001796:	e001      	b.n	800179c <QSPI_Read+0x54>
 8001798:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = size;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address =  address;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles =  qspi_data.qe ? 2 : 0;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <QSPI_Read+0xa8>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <QSPI_Read+0x6a>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e000      	b.n	80017b4 <QSPI_Read+0x6c>
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4619      	mov	r1, r3
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <QSPI_Read+0xac>)
 80017c2:	f001 ffdd 	bl	8003780 <HAL_QSPI_Command>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <QSPI_Read+0x88>
		return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e00b      	b.n	80017e8 <QSPI_Read+0xa0>
	}
	if (HAL_QSPI_Receive(&hqspi, data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80017d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <QSPI_Read+0xac>)
 80017d8:	f002 f8c2 	bl	8003960 <HAL_QSPI_Receive>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <QSPI_Read+0x9e>
		return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <QSPI_Read+0xa0>
	}
	return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3750      	adds	r7, #80	; 0x50
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200001bc 	.word	0x200001bc
 80017f4:	20000160 	.word	0x20000160

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001830 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017fc:	f7ff fa84 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001802:	490d      	ldr	r1, [pc, #52]	; (8001838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001818:	4c0a      	ldr	r4, [pc, #40]	; (8001844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001826:	f009 f815 	bl	800a854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7fe fda9 	bl	8000380 <main>
  bx  lr
 800182e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 800183c:	0800ba8c 	.word	0x0800ba8c
  ldr r2, =_sbss
 8001840:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8001844:	200010dc 	.word	0x200010dc

08001848 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC3_IRQHandler>
	...

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001852:	2003      	movs	r0, #3
 8001854:	f000 f98c 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001858:	f003 f9d4 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 800185c:	4602      	mov	r2, r0
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_Init+0x68>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	f003 030f 	and.w	r3, r3, #15
 8001868:	4913      	ldr	r1, [pc, #76]	; (80018b8 <HAL_Init+0x6c>)
 800186a:	5ccb      	ldrb	r3, [r1, r3]
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
 8001874:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_Init+0x68>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_Init+0x6c>)
 8001880:	5cd3      	ldrb	r3, [r2, r3]
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
 800188c:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <HAL_Init+0x70>)
 800188e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001890:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_Init+0x74>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001896:	200f      	movs	r0, #15
 8001898:	f000 f814 	bl	80018c4 <HAL_InitTick>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e002      	b.n	80018ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018a6:	f7ff f84d 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	58024400 	.word	0x58024400
 80018b8:	0800b9dc 	.word	0x0800b9dc
 80018bc:	20000004 	.word	0x20000004
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_InitTick+0x60>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e021      	b.n	800191c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <HAL_InitTick+0x64>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_InitTick+0x60>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f971 	bl	8001bd6 <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00e      	b.n	800191c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d80a      	bhi.n	800191a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001904:	2200      	movs	r2, #0
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f000 f93b 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	4a06      	ldr	r2, [pc, #24]	; (800192c <HAL_InitTick+0x68>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000028 	.word	0x20000028
 8001928:	20000000 	.word	0x20000000
 800192c:	20000024 	.word	0x20000024

08001930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x20>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x24>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_IncTick+0x24>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000028 	.word	0x20000028
 8001954:	200001c0 	.word	0x200001c0

08001958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_GetTick+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	200001c0 	.word	0x200001c0

08001970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff ffee 	bl	8001958 <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001988:	d005      	beq.n	8001996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_Delay+0x44>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001996:	bf00      	nop
 8001998:	f7ff ffde 	bl	8001958 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d8f7      	bhi.n	8001998 <HAL_Delay+0x28>
  {
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000028 	.word	0x20000028

080019b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_GetREVID+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	0c1b      	lsrs	r3, r3, #16
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	5c001000 	.word	0x5c001000

080019d0 <__NVIC_SetPriorityGrouping>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <__NVIC_SetPriorityGrouping+0x40>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <__NVIC_SetPriorityGrouping+0x40>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00
 8001a14:	05fa0000 	.word	0x05fa0000

08001a18 <__NVIC_GetPriorityGrouping>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	; (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	; (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f7ff ff8e 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff29 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b94:	f7ff ff40 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6978      	ldr	r0, [r7, #20]
 8001ba0:	f7ff ff90 	bl	8001ac4 <NVIC_EncodePriority>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff5f 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff33 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffa4 	bl	8001b2c <SysTick_Config>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001bf4:	f3bf 8f5f 	dmb	sy
}
 8001bf8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_MPU_Disable+0x28>)
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <HAL_MPU_Disable+0x28>)
 8001c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c04:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_MPU_Disable+0x2c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	605a      	str	r2, [r3, #4]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00
 8001c1c:	e000ed90 	.word	0xe000ed90

08001c20 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c28:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <HAL_MPU_Enable+0x38>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_MPU_Enable+0x3c>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_MPU_Enable+0x3c>)
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c3e:	f3bf 8f4f 	dsb	sy
}
 8001c42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c44:	f3bf 8f6f 	isb	sy
}
 8001c48:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed90 	.word	0xe000ed90
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	785a      	ldrb	r2, [r3, #1]
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_MPU_ConfigRegion+0x84>)
 8001c6e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d029      	beq.n	8001ccc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001c78:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <HAL_MPU_ConfigRegion+0x84>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7b1b      	ldrb	r3, [r3, #12]
 8001c84:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7adb      	ldrb	r3, [r3, #11]
 8001c8a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7a9b      	ldrb	r3, [r3, #10]
 8001c92:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7b5b      	ldrb	r3, [r3, #13]
 8001c9a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7b9b      	ldrb	r3, [r3, #14]
 8001ca2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ca4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7bdb      	ldrb	r3, [r3, #15]
 8001caa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7a5b      	ldrb	r3, [r3, #9]
 8001cb2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7a1b      	ldrb	r3, [r3, #8]
 8001cba:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cbc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cc6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cc8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001cca:	e005      	b.n	8001cd8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_MPU_ConfigRegion+0x84>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001cd2:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <HAL_MPU_ConfigRegion+0x84>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed90 	.word	0xe000ed90

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cf6:	4b89      	ldr	r3, [pc, #548]	; (8001f1c <HAL_GPIO_Init+0x234>)
 8001cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cfa:	e194      	b.n	8002026 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8186 	beq.w	8002020 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d005      	beq.n	8001d2c <HAL_GPIO_Init+0x44>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d130      	bne.n	8001d8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d62:	2201      	movs	r2, #1
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	f003 0201 	and.w	r2, r3, #1
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d017      	beq.n	8001dca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d123      	bne.n	8001e1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3208      	adds	r2, #8
 8001dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	08da      	lsrs	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3208      	adds	r2, #8
 8001e18:	69b9      	ldr	r1, [r7, #24]
 8001e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0203 	and.w	r2, r3, #3
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 80e0 	beq.w	8002020 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e60:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_GPIO_Init+0x238>)
 8001e62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e66:	4a2e      	ldr	r2, [pc, #184]	; (8001f20 <HAL_GPIO_Init+0x238>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <HAL_GPIO_Init+0x238>)
 8001e72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7e:	4a29      	ldr	r2, [pc, #164]	; (8001f24 <HAL_GPIO_Init+0x23c>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <HAL_GPIO_Init+0x240>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d052      	beq.n	8001f50 <HAL_GPIO_Init+0x268>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <HAL_GPIO_Init+0x244>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d031      	beq.n	8001f16 <HAL_GPIO_Init+0x22e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <HAL_GPIO_Init+0x248>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d02b      	beq.n	8001f12 <HAL_GPIO_Init+0x22a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <HAL_GPIO_Init+0x24c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d025      	beq.n	8001f0e <HAL_GPIO_Init+0x226>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <HAL_GPIO_Init+0x250>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d01f      	beq.n	8001f0a <HAL_GPIO_Init+0x222>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	; (8001f3c <HAL_GPIO_Init+0x254>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d019      	beq.n	8001f06 <HAL_GPIO_Init+0x21e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a1a      	ldr	r2, [pc, #104]	; (8001f40 <HAL_GPIO_Init+0x258>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_GPIO_Init+0x21a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a19      	ldr	r2, [pc, #100]	; (8001f44 <HAL_GPIO_Init+0x25c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00d      	beq.n	8001efe <HAL_GPIO_Init+0x216>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_GPIO_Init+0x260>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <HAL_GPIO_Init+0x212>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <HAL_GPIO_Init+0x264>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_GPIO_Init+0x20e>
 8001ef2:	2309      	movs	r3, #9
 8001ef4:	e02d      	b.n	8001f52 <HAL_GPIO_Init+0x26a>
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	e02b      	b.n	8001f52 <HAL_GPIO_Init+0x26a>
 8001efa:	2308      	movs	r3, #8
 8001efc:	e029      	b.n	8001f52 <HAL_GPIO_Init+0x26a>
 8001efe:	2307      	movs	r3, #7
 8001f00:	e027      	b.n	8001f52 <HAL_GPIO_Init+0x26a>
 8001f02:	2306      	movs	r3, #6
 8001f04:	e025      	b.n	8001f52 <HAL_GPIO_Init+0x26a>
 8001f06:	2305      	movs	r3, #5
 8001f08:	e023      	b.n	8001f52 <HAL_GPIO_Init+0x26a>
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	e021      	b.n	8001f52 <HAL_GPIO_Init+0x26a>
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e01f      	b.n	8001f52 <HAL_GPIO_Init+0x26a>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e01d      	b.n	8001f52 <HAL_GPIO_Init+0x26a>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e01b      	b.n	8001f52 <HAL_GPIO_Init+0x26a>
 8001f1a:	bf00      	nop
 8001f1c:	58000080 	.word	0x58000080
 8001f20:	58024400 	.word	0x58024400
 8001f24:	58000400 	.word	0x58000400
 8001f28:	58020000 	.word	0x58020000
 8001f2c:	58020400 	.word	0x58020400
 8001f30:	58020800 	.word	0x58020800
 8001f34:	58020c00 	.word	0x58020c00
 8001f38:	58021000 	.word	0x58021000
 8001f3c:	58021400 	.word	0x58021400
 8001f40:	58021800 	.word	0x58021800
 8001f44:	58021c00 	.word	0x58021c00
 8001f48:	58022000 	.word	0x58022000
 8001f4c:	58022400 	.word	0x58022400
 8001f50:	2300      	movs	r3, #0
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	f002 0203 	and.w	r2, r2, #3
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	4093      	lsls	r3, r2
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f62:	4938      	ldr	r1, [pc, #224]	; (8002044 <HAL_GPIO_Init+0x35c>)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	3301      	adds	r3, #1
 8002024:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	f47f ae63 	bne.w	8001cfc <HAL_GPIO_Init+0x14>
  }
}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	3724      	adds	r7, #36	; 0x24
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	58000400 	.word	0x58000400

08002048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	887b      	ldrh	r3, [r7, #2]
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	e001      	b.n	800206a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
 8002084:	4613      	mov	r3, r2
 8002086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002088:	787b      	ldrb	r3, [r7, #1]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002094:	e003      	b.n	800209e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	041a      	lsls	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	619a      	str	r2, [r3, #24]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020bc:	887a      	ldrh	r2, [r7, #2]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	041a      	lsls	r2, r3, #16
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	400b      	ands	r3, r1
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e0:	b08f      	sub	sp, #60	; 0x3c
 80020e2:	af0a      	add	r7, sp, #40	; 0x28
 80020e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e116      	b.n	800231e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f008 f87a 	bl	800a204 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2203      	movs	r2, #3
 8002114:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f004 fba1 	bl	8006876 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	687e      	ldr	r6, [r7, #4]
 800213c:	466d      	mov	r5, sp
 800213e:	f106 0410 	add.w	r4, r6, #16
 8002142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800214e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002152:	1d33      	adds	r3, r6, #4
 8002154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002156:	6838      	ldr	r0, [r7, #0]
 8002158:	f004 fa6c 	bl	8006634 <USB_CoreInit>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0d7      	b.n	800231e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f004 fb8f 	bl	8006898 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
 800217e:	e04a      	b.n	8002216 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	333d      	adds	r3, #61	; 0x3d
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	333c      	adds	r3, #60	; 0x3c
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	b298      	uxth	r0, r3
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3356      	adds	r3, #86	; 0x56
 80021bc:	4602      	mov	r2, r0
 80021be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	3340      	adds	r3, #64	; 0x40
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	3344      	adds	r3, #68	; 0x44
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3348      	adds	r3, #72	; 0x48
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	334c      	adds	r3, #76	; 0x4c
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	3301      	adds	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	d3af      	bcc.n	8002180 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e044      	b.n	80022b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	3301      	adds	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d3b5      	bcc.n	8002226 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	687e      	ldr	r6, [r7, #4]
 80022c2:	466d      	mov	r5, sp
 80022c4:	f106 0410 	add.w	r4, r6, #16
 80022c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d8:	1d33      	adds	r3, r6, #4
 80022da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022dc:	6838      	ldr	r0, [r7, #0]
 80022de:	f004 fb27 	bl	8006930 <USB_DevInit>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e014      	b.n	800231e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	2b01      	cmp	r3, #1
 800230a:	d102      	bne.n	8002312 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f001 f949 	bl	80035a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f005 fa8d 	bl	8007836 <USB_DevDisconnect>

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002326 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_PCD_Start+0x1c>
 800233e:	2302      	movs	r3, #2
 8002340:	e022      	b.n	8002388 <HAL_PCD_Start+0x62>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800235a:	2b01      	cmp	r3, #1
 800235c:	d105      	bne.n	800236a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f004 fa70 	bl	8006854 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f005 fa3b 	bl	80077f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_PCD_Stop+0x1c>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e028      	b.n	80023fe <HAL_PCD_Stop+0x6e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f004 fa5c 	bl	8006876 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f005 fa37 	bl	8007836 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2110      	movs	r1, #16
 80023ce:	4618      	mov	r0, r3
 80023d0:	f004 fc0c 	bl	8006bec <USB_FlushTxFifo>

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002406:	b590      	push	{r4, r7, lr}
 8002408:	b08d      	sub	sp, #52	; 0x34
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f005 fabe 	bl	800799e <USB_GetMode>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	f040 84b7 	bne.w	8002d98 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f005 fa22 	bl	8007878 <USB_ReadInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 84ad 	beq.w	8002d96 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f005 fa0f 	bl	8007878 <USB_ReadInterrupts>
 800245a:	4603      	mov	r3, r0
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d107      	bne.n	8002474 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f002 0202 	and.w	r2, r2, #2
 8002472:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f005 f9fd 	bl	8007878 <USB_ReadInterrupts>
 800247e:	4603      	mov	r3, r0
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b10      	cmp	r3, #16
 8002486:	d161      	bne.n	800254c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0210 	bic.w	r2, r2, #16
 8002496:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	f003 020f 	and.w	r2, r3, #15
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	3304      	adds	r3, #4
 80024b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	0c5b      	lsrs	r3, r3, #17
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d124      	bne.n	800250e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d035      	beq.n	800253c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	6a38      	ldr	r0, [r7, #32]
 80024e4:	f005 f834 	bl	8007550 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024f4:	441a      	add	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002506:	441a      	add	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	615a      	str	r2, [r3, #20]
 800250c:	e016      	b.n	800253c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	0c5b      	lsrs	r3, r3, #17
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	2b06      	cmp	r3, #6
 8002518:	d110      	bne.n	800253c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002520:	2208      	movs	r2, #8
 8002522:	4619      	mov	r1, r3
 8002524:	6a38      	ldr	r0, [r7, #32]
 8002526:	f005 f813 	bl	8007550 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002536:	441a      	add	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0210 	orr.w	r2, r2, #16
 800254a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f005 f991 	bl	8007878 <USB_ReadInterrupts>
 8002556:	4603      	mov	r3, r0
 8002558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002560:	f040 80a7 	bne.w	80026b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f005 f996 	bl	800789e <USB_ReadDevAllOutEpInterrupt>
 8002572:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002574:	e099      	b.n	80026aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 808e 	beq.w	800269e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f005 f9ba 	bl	8007906 <USB_ReadDevOutEPInterrupt>
 8002592:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025aa:	461a      	mov	r2, r3
 80025ac:	2301      	movs	r3, #1
 80025ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fe70 	bl	8003298 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00c      	beq.n	80025dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ce:	461a      	mov	r2, r3
 80025d0:	2308      	movs	r3, #8
 80025d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 ff46 	bl	8003468 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f2:	461a      	mov	r2, r3
 80025f4:	2310      	movs	r3, #16
 80025f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d030      	beq.n	8002664 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260a:	2b80      	cmp	r3, #128	; 0x80
 800260c:	d109      	bne.n	8002622 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800261c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002620:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	3304      	adds	r3, #4
 8002636:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	78db      	ldrb	r3, [r3, #3]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d108      	bne.n	8002652 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2200      	movs	r2, #0
 8002644:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f007 feff 	bl	800a450 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	4413      	add	r3, r2
 800265a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265e:	461a      	mov	r2, r3
 8002660:	2302      	movs	r3, #2
 8002662:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267a:	461a      	mov	r2, r3
 800267c:	2320      	movs	r3, #32
 800267e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002696:	461a      	mov	r2, r3
 8002698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	3301      	adds	r3, #1
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f47f af62 	bne.w	8002576 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f005 f8de 	bl	8007878 <USB_ReadInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026c6:	f040 80db 	bne.w	8002880 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f005 f8ff 	bl	80078d2 <USB_ReadDevAllInEpInterrupt>
 80026d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026da:	e0cd      	b.n	8002878 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80c2 	beq.w	800286c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f005 f925 	bl	8007942 <USB_ReadDevInEPInterrupt>
 80026f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d057      	beq.n	80027b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	2201      	movs	r2, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	43db      	mvns	r3, r3
 800271e:	69f9      	ldr	r1, [r7, #28]
 8002720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002724:	4013      	ands	r3, r2
 8002726:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	4413      	add	r3, r2
 8002730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002734:	461a      	mov	r2, r3
 8002736:	2301      	movs	r3, #1
 8002738:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d132      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3348      	adds	r3, #72	; 0x48
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4403      	add	r3, r0
 8002762:	3344      	adds	r3, #68	; 0x44
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4419      	add	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4403      	add	r3, r0
 8002776:	3348      	adds	r3, #72	; 0x48
 8002778:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	2b00      	cmp	r3, #0
 800277e:	d113      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x3a2>
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	334c      	adds	r3, #76	; 0x4c
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d108      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027a0:	461a      	mov	r2, r3
 80027a2:	2101      	movs	r1, #1
 80027a4:	f005 f92e 	bl	8007a04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	4619      	mov	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f007 fdc9 	bl	800a346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ca:	461a      	mov	r2, r3
 80027cc:	2308      	movs	r3, #8
 80027ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e6:	461a      	mov	r2, r3
 80027e8:	2310      	movs	r3, #16
 80027ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002802:	461a      	mov	r2, r3
 8002804:	2340      	movs	r3, #64	; 0x40
 8002806:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d023      	beq.n	800285a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002812:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002814:	6a38      	ldr	r0, [r7, #32]
 8002816:	f004 f9e9 	bl	8006bec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	3338      	adds	r3, #56	; 0x38
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	3304      	adds	r3, #4
 800282c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	78db      	ldrb	r3, [r3, #3]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d108      	bne.n	8002848 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2200      	movs	r2, #0
 800283a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4619      	mov	r1, r3
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f007 fe16 	bl	800a474 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002854:	461a      	mov	r2, r3
 8002856:	2302      	movs	r3, #2
 8002858:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fc88 	bl	800317c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	3301      	adds	r3, #1
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	2b00      	cmp	r3, #0
 800287c:	f47f af2e 	bne.w	80026dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f004 fff7 	bl	8007878 <USB_ReadInterrupts>
 800288a:	4603      	mov	r3, r0
 800288c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002894:	d122      	bne.n	80028dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d108      	bne.n	80028c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028bc:	2100      	movs	r1, #0
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fe94 	bl	80035ec <HAL_PCDEx_LPM_Callback>
 80028c4:	e002      	b.n	80028cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f007 fdb4 	bl	800a434 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 ffc9 	bl	8007878 <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028f0:	d112      	bne.n	8002918 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d102      	bne.n	8002908 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f007 fd70 	bl	800a3e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002916:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f004 ffab 	bl	8007878 <USB_ReadInterrupts>
 8002922:	4603      	mov	r3, r0
 8002924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800292c:	d121      	bne.n	8002972 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800293c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d111      	bne.n	800296c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	f003 020f 	and.w	r2, r3, #15
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002962:	2101      	movs	r1, #1
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fe41 	bl	80035ec <HAL_PCDEx_LPM_Callback>
 800296a:	e002      	b.n	8002972 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f007 fd3b 	bl	800a3e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f004 ff7e 	bl	8007878 <USB_ReadInterrupts>
 800297c:	4603      	mov	r3, r0
 800297e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002986:	f040 80b7 	bne.w	8002af8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2110      	movs	r1, #16
 80029a4:	4618      	mov	r0, r3
 80029a6:	f004 f921 	bl	8006bec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ae:	e046      	b.n	8002a3e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029bc:	461a      	mov	r2, r3
 80029be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d4:	0151      	lsls	r1, r2, #5
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	440a      	add	r2, r1
 80029da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f0:	461a      	mov	r2, r3
 80029f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a08:	0151      	lsls	r1, r2, #5
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	440a      	add	r2, r1
 8002a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a28:	0151      	lsls	r1, r2, #5
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	440a      	add	r2, r1
 8002a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a36:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d3b3      	bcc.n	80029b0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a56:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a5a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d016      	beq.n	8002a92 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a74:	f043 030b 	orr.w	r3, r3, #11
 8002a78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a8a:	f043 030b 	orr.w	r3, r3, #11
 8002a8e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a90:	e015      	b.n	8002abe <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f242 032b 	movw	r3, #8235	; 0x202b
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab8:	f043 030b 	orr.w	r3, r3, #11
 8002abc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002acc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ad0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f004 ff8e 	bl	8007a04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 febb 	bl	8007878 <USB_ReadInterrupts>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0c:	d124      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f004 ff52 	bl	80079bc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f004 f8e2 	bl	8006ce6 <USB_GetDevSpeed>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681c      	ldr	r4, [r3, #0]
 8002b2e:	f002 f9e3 	bl	8004ef8 <HAL_RCC_GetHCLKFreq>
 8002b32:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f003 fde7 	bl	8006710 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f007 fc27 	bl	800a396 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b56:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 fe8b 	bl	8007878 <USB_ReadInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d10a      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f007 fc04 	bl	800a37a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f002 0208 	and.w	r2, r2, #8
 8002b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f004 fe76 	bl	8007878 <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	2b80      	cmp	r3, #128	; 0x80
 8002b94:	d122      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	e014      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d105      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 faa7 	bl	800311a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	3301      	adds	r3, #1
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d3e5      	bcc.n	8002ba8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f004 fe49 	bl	8007878 <USB_ReadInterrupts>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bf0:	d13b      	bne.n	8002c6a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf6:	e02b      	b.n	8002c50 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3340      	adds	r3, #64	; 0x40
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d115      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	da12      	bge.n	8002c4a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	333f      	adds	r3, #63	; 0x3f
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fa68 	bl	800311a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d3ce      	bcc.n	8002bf8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f004 fe02 	bl	8007878 <USB_ReadInterrupts>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c7e:	d155      	bne.n	8002d2c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c80:	2301      	movs	r3, #1
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
 8002c84:	e045      	b.n	8002d12 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d12e      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	da2b      	bge.n	8002d0c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002cc0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d121      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d08:	6053      	str	r3, [r2, #4]
            break;
 8002d0a:	e007      	b.n	8002d1c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	3301      	adds	r3, #1
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d3b4      	bcc.n	8002c86 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 fda1 	bl	8007878 <USB_ReadInterrupts>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d10a      	bne.n	8002d58 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f007 fba8 	bl	800a498 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f004 fd8b 	bl	8007878 <USB_ReadInterrupts>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d115      	bne.n	8002d98 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f007 fb98 	bl	800a4b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	e000      	b.n	8002d98 <HAL_PCD_IRQHandler+0x992>
      return;
 8002d96:	bf00      	nop
    }
  }
}
 8002d98:	3734      	adds	r7, #52	; 0x34
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd90      	pop	{r4, r7, pc}

08002d9e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_PCD_SetAddress+0x1a>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e013      	b.n	8002de0 <HAL_PCD_SetAddress+0x42>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 fce9 	bl	80077a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	4608      	mov	r0, r1
 8002df2:	4611      	mov	r1, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	70fb      	strb	r3, [r7, #3]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	803b      	strh	r3, [r7, #0]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	da0f      	bge.n	8002e2e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	f003 020f 	and.w	r2, r3, #15
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	3338      	adds	r3, #56	; 0x38
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	3304      	adds	r3, #4
 8002e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	705a      	strb	r2, [r3, #1]
 8002e2c:	e00f      	b.n	8002e4e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	f003 020f 	and.w	r2, r3, #15
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	3304      	adds	r3, #4
 8002e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e5a:	883a      	ldrh	r2, [r7, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	78ba      	ldrb	r2, [r7, #2]
 8002e64:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	785b      	ldrb	r3, [r3, #1]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e78:	78bb      	ldrb	r3, [r7, #2]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d102      	bne.n	8002e84 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_PCD_EP_Open+0xaa>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e00e      	b.n	8002eb0 <HAL_PCD_EP_Open+0xc8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68f9      	ldr	r1, [r7, #12]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f003 ff45 	bl	8006d30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002eae:	7afb      	ldrb	r3, [r7, #11]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	f003 020f 	and.w	r2, r3, #15
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4413      	add	r3, r2
 8002ede:	3304      	adds	r3, #4
 8002ee0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002efa:	7afb      	ldrb	r3, [r7, #11]
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6979      	ldr	r1, [r7, #20]
 8002f22:	f003 ff8d 	bl	8006e40 <USB_EPStartXfer>

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f40:	7afb      	ldrb	r3, [r7, #11]
 8002f42:	f003 020f 	and.w	r2, r3, #15
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	3338      	adds	r3, #56	; 0x38
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	3304      	adds	r3, #4
 8002f56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2200      	movs	r2, #0
 8002f68:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f70:	7afb      	ldrb	r3, [r7, #11]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d102      	bne.n	8002f8a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	6979      	ldr	r1, [r7, #20]
 8002f98:	f003 ff52 	bl	8006e40 <USB_EPStartXfer>

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	f003 020f 	and.w	r2, r3, #15
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d901      	bls.n	8002fc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e050      	b.n	8003066 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	da0f      	bge.n	8002fec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 020f 	and.w	r2, r3, #15
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	3338      	adds	r3, #56	; 0x38
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	705a      	strb	r2, [r3, #1]
 8002fea:	e00d      	b.n	8003008 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3304      	adds	r3, #4
 8003000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	b2da      	uxtb	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_PCD_EP_SetStall+0x82>
 8003024:	2302      	movs	r3, #2
 8003026:	e01e      	b.n	8003066 <HAL_PCD_EP_SetStall+0xc0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68f9      	ldr	r1, [r7, #12]
 8003036:	4618      	mov	r0, r3
 8003038:	f004 fae2 	bl	8007600 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	b2d9      	uxtb	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003056:	461a      	mov	r2, r3
 8003058:	f004 fcd4 	bl	8007a04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	d901      	bls.n	800308c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e042      	b.n	8003112 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800308c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003090:	2b00      	cmp	r3, #0
 8003092:	da0f      	bge.n	80030b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	f003 020f 	and.w	r2, r3, #15
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	3338      	adds	r3, #56	; 0x38
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	3304      	adds	r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	705a      	strb	r2, [r3, #1]
 80030b2:	e00f      	b.n	80030d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	f003 020f 	and.w	r2, r3, #15
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	3304      	adds	r3, #4
 80030cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_PCD_EP_ClrStall+0x86>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e00e      	b.n	8003112 <HAL_PCD_EP_ClrStall+0xa4>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68f9      	ldr	r1, [r7, #12]
 8003102:	4618      	mov	r0, r3
 8003104:	f004 faea 	bl	80076dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800312a:	2b00      	cmp	r3, #0
 800312c:	da0c      	bge.n	8003148 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	f003 020f 	and.w	r2, r3, #15
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	3338      	adds	r3, #56	; 0x38
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	3304      	adds	r3, #4
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	e00c      	b.n	8003162 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f003 020f 	and.w	r2, r3, #15
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	3304      	adds	r3, #4
 8003160:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68f9      	ldr	r1, [r7, #12]
 8003168:	4618      	mov	r0, r3
 800316a:	f004 f909 	bl	8007380 <USB_EPStopXfer>
 800316e:	4603      	mov	r3, r0
 8003170:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003172:	7afb      	ldrb	r3, [r7, #11]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af02      	add	r7, sp, #8
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	3338      	adds	r3, #56	; 0x38
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4413      	add	r3, r2
 80031a0:	3304      	adds	r3, #4
 80031a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d901      	bls.n	80031b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e06c      	b.n	800328e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d902      	bls.n	80031d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	3303      	adds	r3, #3
 80031d4:	089b      	lsrs	r3, r3, #2
 80031d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031d8:	e02b      	b.n	8003232 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d902      	bls.n	80031f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3303      	adds	r3, #3
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	68d9      	ldr	r1, [r3, #12]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800320e:	b2db      	uxtb	r3, r3
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	4603      	mov	r3, r0
 8003214:	6978      	ldr	r0, [r7, #20]
 8003216:	f004 f95d 	bl	80074d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	441a      	add	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	441a      	add	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	b29b      	uxth	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	429a      	cmp	r2, r3
 8003246:	d809      	bhi.n	800325c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003250:	429a      	cmp	r2, r3
 8003252:	d203      	bcs.n	800325c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1be      	bne.n	80031da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	429a      	cmp	r2, r3
 8003266:	d811      	bhi.n	800328c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	2201      	movs	r2, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	43db      	mvns	r3, r3
 8003282:	6939      	ldr	r1, [r7, #16]
 8003284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003288:	4013      	ands	r3, r2
 800328a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	333c      	adds	r3, #60	; 0x3c
 80032b0:	3304      	adds	r3, #4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d17b      	bne.n	80033c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	4a61      	ldr	r2, [pc, #388]	; (8003460 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	f240 80b9 	bls.w	8003454 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80b3 	beq.w	8003454 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fa:	461a      	mov	r2, r3
 80032fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003300:	6093      	str	r3, [r2, #8]
 8003302:	e0a7      	b.n	8003454 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331a:	461a      	mov	r2, r3
 800331c:	2320      	movs	r3, #32
 800331e:	6093      	str	r3, [r2, #8]
 8003320:	e098      	b.n	8003454 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003328:	2b00      	cmp	r3, #0
 800332a:	f040 8093 	bne.w	8003454 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4a4b      	ldr	r2, [pc, #300]	; (8003460 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d90f      	bls.n	8003356 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003352:	6093      	str	r3, [r2, #8]
 8003354:	e07e      	b.n	8003454 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	3304      	adds	r3, #4
 800336a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a1a      	ldr	r2, [r3, #32]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	0159      	lsls	r1, r3, #5
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	440b      	add	r3, r1
 8003378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003382:	1ad2      	subs	r2, r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d114      	bne.n	80033b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033a0:	461a      	mov	r2, r3
 80033a2:	2101      	movs	r1, #1
 80033a4:	f004 fb2e 	bl	8007a04 <USB_EP0_OutStart>
 80033a8:	e006      	b.n	80033b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	441a      	add	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f006 ffa6 	bl	800a310 <HAL_PCD_DataOutStageCallback>
 80033c4:	e046      	b.n	8003454 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	4a26      	ldr	r2, [pc, #152]	; (8003464 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d124      	bne.n	8003418 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e4:	461a      	mov	r2, r3
 80033e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ea:	6093      	str	r3, [r2, #8]
 80033ec:	e032      	b.n	8003454 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	461a      	mov	r2, r3
 8003406:	2320      	movs	r3, #32
 8003408:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	4619      	mov	r1, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f006 ff7d 	bl	800a310 <HAL_PCD_DataOutStageCallback>
 8003416:	e01d      	b.n	8003454 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d114      	bne.n	8003448 <PCD_EP_OutXfrComplete_int+0x1b0>
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d108      	bne.n	8003448 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003440:	461a      	mov	r2, r3
 8003442:	2100      	movs	r1, #0
 8003444:	f004 fade 	bl	8007a04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f006 ff5e 	bl	800a310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	4f54300a 	.word	0x4f54300a
 8003464:	4f54310a 	.word	0x4f54310a

08003468 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	333c      	adds	r3, #60	; 0x3c
 8003480:	3304      	adds	r3, #4
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4a15      	ldr	r2, [pc, #84]	; (80034f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d90e      	bls.n	80034bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d009      	beq.n	80034bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b4:	461a      	mov	r2, r3
 80034b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f006 ff15 	bl	800a2ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d90c      	bls.n	80034e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d108      	bne.n	80034e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034dc:	461a      	mov	r2, r3
 80034de:	2101      	movs	r1, #1
 80034e0:	f004 fa90 	bl	8007a04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	4f54300a 	.word	0x4f54300a

080034f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	70fb      	strb	r3, [r7, #3]
 8003500:	4613      	mov	r3, r2
 8003502:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d107      	bne.n	8003522 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003512:	883b      	ldrh	r3, [r7, #0]
 8003514:	0419      	lsls	r1, r3, #16
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	430a      	orrs	r2, r1
 800351e:	629a      	str	r2, [r3, #40]	; 0x28
 8003520:	e028      	b.n	8003574 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4413      	add	r3, r2
 800352e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	e00d      	b.n	8003552 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	3340      	adds	r3, #64	; 0x40
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	4413      	add	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	3301      	adds	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	3b01      	subs	r3, #1
 8003558:	429a      	cmp	r2, r3
 800355a:	d3ec      	bcc.n	8003536 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800355c:	883b      	ldrh	r3, [r7, #0]
 800355e:	0418      	lsls	r0, r3, #16
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	3b01      	subs	r3, #1
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	4302      	orrs	r2, r0
 800356c:	3340      	adds	r3, #64	; 0x40
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	10000003 	.word	0x10000003

080035ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_PWREx_ConfigSupply+0x70>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b04      	cmp	r3, #4
 8003616:	d00a      	beq.n	800362e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003618:	4b16      	ldr	r3, [pc, #88]	; (8003674 <HAL_PWREx_ConfigSupply+0x70>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e01f      	b.n	800366a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e01d      	b.n	800366a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_PWREx_ConfigSupply+0x70>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f023 0207 	bic.w	r2, r3, #7
 8003636:	490f      	ldr	r1, [pc, #60]	; (8003674 <HAL_PWREx_ConfigSupply+0x70>)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4313      	orrs	r3, r2
 800363c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800363e:	f7fe f98b 	bl	8001958 <HAL_GetTick>
 8003642:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003644:	e009      	b.n	800365a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003646:	f7fe f987 	bl	8001958 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003654:	d901      	bls.n	800365a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e007      	b.n	800366a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_PWREx_ConfigSupply+0x70>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003666:	d1ee      	bne.n	8003646 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	58024800 	.word	0x58024800

08003678 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4a04      	ldr	r2, [pc, #16]	; (8003694 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003686:	60d3      	str	r3, [r2, #12]
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	58024800 	.word	0x58024800

08003698 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af02      	add	r7, sp, #8
 800369e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80036a0:	f7fe f95a 	bl	8001958 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e05f      	b.n	8003770 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d107      	bne.n	80036cc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fd f95b 	bl	8000978 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80036c2:	f241 3188 	movw	r1, #5000	; 0x1388
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fac0 	bl	8003c4c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	3b01      	subs	r3, #1
 80036dc:	021a      	lsls	r2, r3, #8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	2120      	movs	r1, #32
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fab8 	bl	8003c68 <QSPI_WaitFlagStateUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80036fc:	7afb      	ldrb	r3, [r7, #11]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d135      	bne.n	800376e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_QSPI_Init+0xe0>)
 800370a:	4013      	ands	r3, r2
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6852      	ldr	r2, [r2, #4]
 8003710:	0611      	lsls	r1, r2, #24
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68d2      	ldr	r2, [r2, #12]
 8003716:	4311      	orrs	r1, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	69d2      	ldr	r2, [r2, #28]
 800371c:	4311      	orrs	r1, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6a12      	ldr	r2, [r2, #32]
 8003722:	4311      	orrs	r1, r2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	430b      	orrs	r3, r1
 800372a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_QSPI_Init+0xe4>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6912      	ldr	r2, [r2, #16]
 800373a:	0411      	lsls	r1, r2, #16
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6952      	ldr	r2, [r2, #20]
 8003740:	4311      	orrs	r1, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6992      	ldr	r2, [r2, #24]
 8003746:	4311      	orrs	r1, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	430b      	orrs	r3, r1
 800374e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800376e:	7afb      	ldrb	r3, [r7, #11]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	00ffff2f 	.word	0x00ffff2f
 800377c:	ffe0f8fe 	.word	0xffe0f8fe

08003780 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800378c:	f7fe f8e4 	bl	8001958 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_QSPI_Command+0x22>
 800379e:	2302      	movs	r3, #2
 80037a0:	e048      	b.n	8003834 <HAL_QSPI_Command+0xb4>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d137      	bne.n	8003826 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2200      	movs	r2, #0
 80037cc:	2120      	movs	r1, #32
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fa4a 	bl	8003c68 <QSPI_WaitFlagStateUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d125      	bne.n	800382a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80037de:	2200      	movs	r2, #0
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fa77 	bl	8003cd6 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d115      	bne.n	800381c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2201      	movs	r2, #1
 80037f8:	2102      	movs	r1, #2
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa34 	bl	8003c68 <QSPI_WaitFlagStateUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10f      	bne.n	800382a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2202      	movs	r2, #2
 8003810:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800381a:	e006      	b.n	800382a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003824:	e001      	b.n	800382a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003826:	2302      	movs	r3, #2
 8003828:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003832:	7dfb      	ldrb	r3, [r7, #23]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	; 0x28
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800384c:	f7fe f884 	bl	8001958 <HAL_GetTick>
 8003850:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3320      	adds	r3, #32
 8003858:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_QSPI_Transmit+0x2e>
 8003866:	2302      	movs	r3, #2
 8003868:	e076      	b.n	8003958 <HAL_QSPI_Transmit+0x11c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	d165      	bne.n	800394a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d056      	beq.n	8003938 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2212      	movs	r2, #18
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80038be:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80038c0:	e01b      	b.n	80038fa <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2201      	movs	r2, #1
 80038ca:	2104      	movs	r1, #4
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f9cb 	bl	8003c68 <QSPI_WaitFlagStateUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80038d6:	7ffb      	ldrb	r3, [r7, #31]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d113      	bne.n	8003904 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	1e5a      	subs	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1df      	bne.n	80038c2 <HAL_QSPI_Transmit+0x86>
 8003902:	e000      	b.n	8003906 <HAL_QSPI_Transmit+0xca>
          break;
 8003904:	bf00      	nop
      }

      if (status == HAL_OK)
 8003906:	7ffb      	ldrb	r3, [r7, #31]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d110      	bne.n	800392e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2201      	movs	r2, #1
 8003914:	2102      	movs	r1, #2
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f9a6 	bl	8003c68 <QSPI_WaitFlagStateUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003920:	7ffb      	ldrb	r3, [r7, #31]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2202      	movs	r2, #2
 800392c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003936:	e00a      	b.n	800394e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	f043 0208 	orr.w	r2, r3, #8
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e001      	b.n	800394e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800394a:	2302      	movs	r3, #2
 800394c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003956:	7ffb      	ldrb	r3, [r7, #31]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003970:	f7fd fff2 	bl	8001958 <HAL_GetTick>
 8003974:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3320      	adds	r3, #32
 8003984:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_QSPI_Receive+0x36>
 8003992:	2302      	movs	r3, #2
 8003994:	e07d      	b.n	8003a92 <HAL_QSPI_Receive+0x132>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d16c      	bne.n	8003a84 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d05d      	beq.n	8003a72 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2222      	movs	r2, #34	; 0x22
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039ee:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80039f8:	e01c      	b.n	8003a34 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2201      	movs	r2, #1
 8003a02:	2106      	movs	r1, #6
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f92f 	bl	8003c68 <QSPI_WaitFlagStateUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003a0e:	7ffb      	ldrb	r3, [r7, #31]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d114      	bne.n	8003a3e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	1e5a      	subs	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1de      	bne.n	80039fa <HAL_QSPI_Receive+0x9a>
 8003a3c:	e000      	b.n	8003a40 <HAL_QSPI_Receive+0xe0>
          break;
 8003a3e:	bf00      	nop
      }

      if (status == HAL_OK)
 8003a40:	7ffb      	ldrb	r3, [r7, #31]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d110      	bne.n	8003a68 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	2102      	movs	r1, #2
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f909 	bl	8003c68 <QSPI_WaitFlagStateUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003a5a:	7ffb      	ldrb	r3, [r7, #31]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2202      	movs	r2, #2
 8003a66:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a70:	e00a      	b.n	8003a88 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f043 0208 	orr.w	r2, r3, #8
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e001      	b.n	8003a88 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
 8003a86:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8003a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b088      	sub	sp, #32
 8003a9e:	af02      	add	r7, sp, #8
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003aa8:	f7fd ff56 	bl	8001958 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_QSPI_AutoPolling+0x24>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e060      	b.n	8003b80 <HAL_QSPI_AutoPolling+0xe6>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d14f      	bne.n	8003b72 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2242      	movs	r2, #66	; 0x42
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2120      	movs	r1, #32
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f8bc 	bl	8003c68 <QSPI_WaitFlagStateUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003af4:	7dfb      	ldrb	r3, [r7, #23]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d13d      	bne.n	8003b76 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6852      	ldr	r2, [r2, #4]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6892      	ldr	r2, [r2, #8]
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003b30:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003b3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f8c8 	bl	8003cd6 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	2108      	movs	r1, #8
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f889 	bl	8003c68 <QSPI_WaitFlagStateUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2208      	movs	r2, #8
 8003b66:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b70:	e001      	b.n	8003b76 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
 8003b74:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b94:	f7fd fee0 	bl	8001958 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_QSPI_MemoryMapped+0x22>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e04c      	b.n	8003c44 <HAL_QSPI_MemoryMapped+0xbc>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d13b      	bne.n	8003c36 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2282      	movs	r2, #130	; 0x82
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f845 	bl	8003c68 <QSPI_WaitFlagStateUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d128      	bne.n	8003c3a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 0108 	bic.w	r1, r3, #8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d110      	bne.n	8003c28 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2210      	movs	r2, #16
 8003c16:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c26:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8003c28:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f851 	bl	8003cd6 <QSPI_Config>
 8003c34:	e001      	b.n	8003c3a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
 8003c38:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003c78:	e01a      	b.n	8003cb0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d016      	beq.n	8003cb0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c82:	f7fd fe69 	bl	8001958 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d302      	bcc.n	8003c98 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e00e      	b.n	8003cce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d1d6      	bne.n	8003c7a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <QSPI_Config+0x28>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003cf0:	d005      	beq.n	8003cfe <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3a01      	subs	r2, #1
 8003cfc:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 80b9 	beq.w	8003e7a <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d05f      	beq.n	8003dd0 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	6892      	ldr	r2, [r2, #8]
 8003d18:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d031      	beq.n	8003d86 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	049b      	lsls	r3, r3, #18
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	ea42 0103 	orr.w	r1, r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d76:	f000 812e 	beq.w	8003fd6 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	6852      	ldr	r2, [r2, #4]
 8003d82:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003d84:	e127      	b.n	8003fd6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	431a      	orrs	r2, r3
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	049b      	lsls	r3, r3, #18
 8003da2:	431a      	orrs	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	ea42 0103 	orr.w	r1, r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	615a      	str	r2, [r3, #20]
}
 8003dce:	e102      	b.n	8003fd6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d02e      	beq.n	8003e36 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	049b      	lsls	r3, r3, #18
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	ea42 0103 	orr.w	r1, r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003e26:	f000 80d6 	beq.w	8003fd6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	6852      	ldr	r2, [r2, #4]
 8003e32:	619a      	str	r2, [r3, #24]
}
 8003e34:	e0cf      	b.n	8003fd6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	049b      	lsls	r3, r3, #18
 8003e52:	431a      	orrs	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	ea42 0103 	orr.w	r1, r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	615a      	str	r2, [r3, #20]
}
 8003e78:	e0ad      	b.n	8003fd6 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d058      	beq.n	8003f34 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	6892      	ldr	r2, [r2, #8]
 8003e8a:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d02d      	beq.n	8003ef0 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	049b      	lsls	r3, r3, #18
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	ea42 0103 	orr.w	r1, r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ee2:	d078      	beq.n	8003fd6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	6852      	ldr	r2, [r2, #4]
 8003eec:	619a      	str	r2, [r3, #24]
}
 8003eee:	e072      	b.n	8003fd6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	431a      	orrs	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	431a      	orrs	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	049b      	lsls	r3, r3, #18
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	ea42 0103 	orr.w	r1, r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	615a      	str	r2, [r3, #20]
}
 8003f32:	e050      	b.n	8003fd6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02a      	beq.n	8003f92 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	431a      	orrs	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	049b      	lsls	r3, r3, #18
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	ea42 0103 	orr.w	r1, r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003f84:	d027      	beq.n	8003fd6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	6852      	ldr	r2, [r2, #4]
 8003f8e:	619a      	str	r2, [r3, #24]
}
 8003f90:	e021      	b.n	8003fd6 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01d      	beq.n	8003fd6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	049b      	lsls	r3, r3, #18
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	ea42 0103 	orr.w	r1, r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	615a      	str	r2, [r3, #20]
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08c      	sub	sp, #48	; 0x30
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f000 bc48 	b.w	8004888 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8088 	beq.w	8004116 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004006:	4b99      	ldr	r3, [pc, #612]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004010:	4b96      	ldr	r3, [pc, #600]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	2b10      	cmp	r3, #16
 800401a:	d007      	beq.n	800402c <HAL_RCC_OscConfig+0x48>
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	2b18      	cmp	r3, #24
 8004020:	d111      	bne.n	8004046 <HAL_RCC_OscConfig+0x62>
 8004022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d10c      	bne.n	8004046 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800402c:	4b8f      	ldr	r3, [pc, #572]	; (800426c <HAL_RCC_OscConfig+0x288>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d06d      	beq.n	8004114 <HAL_RCC_OscConfig+0x130>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d169      	bne.n	8004114 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f000 bc21 	b.w	8004888 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404e:	d106      	bne.n	800405e <HAL_RCC_OscConfig+0x7a>
 8004050:	4b86      	ldr	r3, [pc, #536]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a85      	ldr	r2, [pc, #532]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	e02e      	b.n	80040bc <HAL_RCC_OscConfig+0xd8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10c      	bne.n	8004080 <HAL_RCC_OscConfig+0x9c>
 8004066:	4b81      	ldr	r3, [pc, #516]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a80      	ldr	r2, [pc, #512]	; (800426c <HAL_RCC_OscConfig+0x288>)
 800406c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	4b7e      	ldr	r3, [pc, #504]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a7d      	ldr	r2, [pc, #500]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e01d      	b.n	80040bc <HAL_RCC_OscConfig+0xd8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0xc0>
 800408a:	4b78      	ldr	r3, [pc, #480]	; (800426c <HAL_RCC_OscConfig+0x288>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a77      	ldr	r2, [pc, #476]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	4b75      	ldr	r3, [pc, #468]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a74      	ldr	r2, [pc, #464]	; (800426c <HAL_RCC_OscConfig+0x288>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e00b      	b.n	80040bc <HAL_RCC_OscConfig+0xd8>
 80040a4:	4b71      	ldr	r3, [pc, #452]	; (800426c <HAL_RCC_OscConfig+0x288>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a70      	ldr	r2, [pc, #448]	; (800426c <HAL_RCC_OscConfig+0x288>)
 80040aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b6e      	ldr	r3, [pc, #440]	; (800426c <HAL_RCC_OscConfig+0x288>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a6d      	ldr	r2, [pc, #436]	; (800426c <HAL_RCC_OscConfig+0x288>)
 80040b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d013      	beq.n	80040ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd fc48 	bl	8001958 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fd fc44 	bl	8001958 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e3d4      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040de:	4b63      	ldr	r3, [pc, #396]	; (800426c <HAL_RCC_OscConfig+0x288>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0xe8>
 80040ea:	e014      	b.n	8004116 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd fc34 	bl	8001958 <HAL_GetTick>
 80040f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fd fc30 	bl	8001958 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	; 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e3c0      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004106:	4b59      	ldr	r3, [pc, #356]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x110>
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80ca 	beq.w	80042b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004124:	4b51      	ldr	r3, [pc, #324]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800412c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800412e:	4b4f      	ldr	r3, [pc, #316]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <HAL_RCC_OscConfig+0x166>
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	2b18      	cmp	r3, #24
 800413e:	d156      	bne.n	80041ee <HAL_RCC_OscConfig+0x20a>
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d151      	bne.n	80041ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800414a:	4b48      	ldr	r3, [pc, #288]	; (800426c <HAL_RCC_OscConfig+0x288>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_RCC_OscConfig+0x17e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e392      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004162:	4b42      	ldr	r3, [pc, #264]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 0219 	bic.w	r2, r3, #25
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	493f      	ldr	r1, [pc, #252]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004170:	4313      	orrs	r3, r2
 8004172:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fd fbf0 	bl	8001958 <HAL_GetTick>
 8004178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fd fbec 	bl	8001958 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e37c      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800418e:	4b37      	ldr	r3, [pc, #220]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419a:	f7fd fc0d 	bl	80019b8 <HAL_GetREVID>
 800419e:	4603      	mov	r3, r0
 80041a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d817      	bhi.n	80041d8 <HAL_RCC_OscConfig+0x1f4>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d108      	bne.n	80041c2 <HAL_RCC_OscConfig+0x1de>
 80041b0:	4b2e      	ldr	r3, [pc, #184]	; (800426c <HAL_RCC_OscConfig+0x288>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041b8:	4a2c      	ldr	r2, [pc, #176]	; (800426c <HAL_RCC_OscConfig+0x288>)
 80041ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c0:	e07a      	b.n	80042b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c2:	4b2a      	ldr	r3, [pc, #168]	; (800426c <HAL_RCC_OscConfig+0x288>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	031b      	lsls	r3, r3, #12
 80041d0:	4926      	ldr	r1, [pc, #152]	; (800426c <HAL_RCC_OscConfig+0x288>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d6:	e06f      	b.n	80042b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d8:	4b24      	ldr	r3, [pc, #144]	; (800426c <HAL_RCC_OscConfig+0x288>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	061b      	lsls	r3, r3, #24
 80041e6:	4921      	ldr	r1, [pc, #132]	; (800426c <HAL_RCC_OscConfig+0x288>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041ec:	e064      	b.n	80042b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d047      	beq.n	8004286 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_RCC_OscConfig+0x288>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 0219 	bic.w	r2, r3, #25
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	491a      	ldr	r1, [pc, #104]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004204:	4313      	orrs	r3, r2
 8004206:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fd fba6 	bl	8001958 <HAL_GetTick>
 800420c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004210:	f7fd fba2 	bl	8001958 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e332      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422e:	f7fd fbc3 	bl	80019b8 <HAL_GetREVID>
 8004232:	4603      	mov	r3, r0
 8004234:	f241 0203 	movw	r2, #4099	; 0x1003
 8004238:	4293      	cmp	r3, r2
 800423a:	d819      	bhi.n	8004270 <HAL_RCC_OscConfig+0x28c>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d108      	bne.n	8004256 <HAL_RCC_OscConfig+0x272>
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800424c:	4a07      	ldr	r2, [pc, #28]	; (800426c <HAL_RCC_OscConfig+0x288>)
 800424e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004252:	6053      	str	r3, [r2, #4]
 8004254:	e030      	b.n	80042b8 <HAL_RCC_OscConfig+0x2d4>
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	031b      	lsls	r3, r3, #12
 8004264:	4901      	ldr	r1, [pc, #4]	; (800426c <HAL_RCC_OscConfig+0x288>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
 800426a:	e025      	b.n	80042b8 <HAL_RCC_OscConfig+0x2d4>
 800426c:	58024400 	.word	0x58024400
 8004270:	4b9a      	ldr	r3, [pc, #616]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	4997      	ldr	r1, [pc, #604]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
 8004284:	e018      	b.n	80042b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004286:	4b95      	ldr	r3, [pc, #596]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a94      	ldr	r2, [pc, #592]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fd fb61 	bl	8001958 <HAL_GetTick>
 8004296:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429a:	f7fd fb5d 	bl	8001958 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e2ed      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042ac:	4b8b      	ldr	r3, [pc, #556]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1f0      	bne.n	800429a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80a9 	beq.w	8004418 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c6:	4b85      	ldr	r3, [pc, #532]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042d0:	4b82      	ldr	r3, [pc, #520]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d007      	beq.n	80042ec <HAL_RCC_OscConfig+0x308>
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	2b18      	cmp	r3, #24
 80042e0:	d13a      	bne.n	8004358 <HAL_RCC_OscConfig+0x374>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d135      	bne.n	8004358 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042ec:	4b7b      	ldr	r3, [pc, #492]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_OscConfig+0x320>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	2b80      	cmp	r3, #128	; 0x80
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e2c1      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004304:	f7fd fb58 	bl	80019b8 <HAL_GetREVID>
 8004308:	4603      	mov	r3, r0
 800430a:	f241 0203 	movw	r2, #4099	; 0x1003
 800430e:	4293      	cmp	r3, r2
 8004310:	d817      	bhi.n	8004342 <HAL_RCC_OscConfig+0x35e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	2b20      	cmp	r3, #32
 8004318:	d108      	bne.n	800432c <HAL_RCC_OscConfig+0x348>
 800431a:	4b70      	ldr	r3, [pc, #448]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004322:	4a6e      	ldr	r2, [pc, #440]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004328:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800432a:	e075      	b.n	8004418 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800432c:	4b6b      	ldr	r3, [pc, #428]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	069b      	lsls	r3, r3, #26
 800433a:	4968      	ldr	r1, [pc, #416]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004340:	e06a      	b.n	8004418 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004342:	4b66      	ldr	r3, [pc, #408]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	061b      	lsls	r3, r3, #24
 8004350:	4962      	ldr	r1, [pc, #392]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004352:	4313      	orrs	r3, r2
 8004354:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004356:	e05f      	b.n	8004418 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d042      	beq.n	80043e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004360:	4b5e      	ldr	r3, [pc, #376]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a5d      	ldr	r2, [pc, #372]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fd faf4 	bl	8001958 <HAL_GetTick>
 8004370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004374:	f7fd faf0 	bl	8001958 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e280      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004386:	4b55      	ldr	r3, [pc, #340]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004392:	f7fd fb11 	bl	80019b8 <HAL_GetREVID>
 8004396:	4603      	mov	r3, r0
 8004398:	f241 0203 	movw	r2, #4099	; 0x1003
 800439c:	4293      	cmp	r3, r2
 800439e:	d817      	bhi.n	80043d0 <HAL_RCC_OscConfig+0x3ec>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d108      	bne.n	80043ba <HAL_RCC_OscConfig+0x3d6>
 80043a8:	4b4c      	ldr	r3, [pc, #304]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80043b0:	4a4a      	ldr	r2, [pc, #296]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80043b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043b6:	6053      	str	r3, [r2, #4]
 80043b8:	e02e      	b.n	8004418 <HAL_RCC_OscConfig+0x434>
 80043ba:	4b48      	ldr	r3, [pc, #288]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	069b      	lsls	r3, r3, #26
 80043c8:	4944      	ldr	r1, [pc, #272]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	604b      	str	r3, [r1, #4]
 80043ce:	e023      	b.n	8004418 <HAL_RCC_OscConfig+0x434>
 80043d0:	4b42      	ldr	r3, [pc, #264]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	061b      	lsls	r3, r3, #24
 80043de:	493f      	ldr	r1, [pc, #252]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60cb      	str	r3, [r1, #12]
 80043e4:	e018      	b.n	8004418 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80043e6:	4b3d      	ldr	r3, [pc, #244]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a3c      	ldr	r2, [pc, #240]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80043ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fd fab1 	bl	8001958 <HAL_GetTick>
 80043f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80043fa:	f7fd faad 	bl	8001958 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e23d      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800440c:	4b33      	ldr	r3, [pc, #204]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d036      	beq.n	8004492 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d019      	beq.n	8004460 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442c:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 800442e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004430:	4a2a      	ldr	r2, [pc, #168]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004438:	f7fd fa8e 	bl	8001958 <HAL_GetTick>
 800443c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004440:	f7fd fa8a 	bl	8001958 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e21a      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004452:	4b22      	ldr	r3, [pc, #136]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x45c>
 800445e:	e018      	b.n	8004492 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004460:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004464:	4a1d      	ldr	r2, [pc, #116]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fd fa74 	bl	8001958 <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004474:	f7fd fa70 	bl	8001958 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e200      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 8004488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d039      	beq.n	8004512 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01c      	beq.n	80044e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044a6:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80044ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044b2:	f7fd fa51 	bl	8001958 <HAL_GetTick>
 80044b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ba:	f7fd fa4d 	bl	8001958 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e1dd      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <HAL_RCC_OscConfig+0x4f8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x4d6>
 80044d8:	e01b      	b.n	8004512 <HAL_RCC_OscConfig+0x52e>
 80044da:	bf00      	nop
 80044dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044e0:	4b9b      	ldr	r3, [pc, #620]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a9a      	ldr	r2, [pc, #616]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80044e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044ec:	f7fd fa34 	bl	8001958 <HAL_GetTick>
 80044f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044f4:	f7fd fa30 	bl	8001958 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e1c0      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004506:	4b92      	ldr	r3, [pc, #584]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8081 	beq.w	8004622 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004520:	4b8c      	ldr	r3, [pc, #560]	; (8004754 <HAL_RCC_OscConfig+0x770>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a8b      	ldr	r2, [pc, #556]	; (8004754 <HAL_RCC_OscConfig+0x770>)
 8004526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800452c:	f7fd fa14 	bl	8001958 <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004534:	f7fd fa10 	bl	8001958 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e1a0      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004546:	4b83      	ldr	r3, [pc, #524]	; (8004754 <HAL_RCC_OscConfig+0x770>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d106      	bne.n	8004568 <HAL_RCC_OscConfig+0x584>
 800455a:	4b7d      	ldr	r3, [pc, #500]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	4a7c      	ldr	r2, [pc, #496]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	6713      	str	r3, [r2, #112]	; 0x70
 8004566:	e02d      	b.n	80045c4 <HAL_RCC_OscConfig+0x5e0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10c      	bne.n	800458a <HAL_RCC_OscConfig+0x5a6>
 8004570:	4b77      	ldr	r3, [pc, #476]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	4a76      	ldr	r2, [pc, #472]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	6713      	str	r3, [r2, #112]	; 0x70
 800457c:	4b74      	ldr	r3, [pc, #464]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	4a73      	ldr	r2, [pc, #460]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004582:	f023 0304 	bic.w	r3, r3, #4
 8004586:	6713      	str	r3, [r2, #112]	; 0x70
 8004588:	e01c      	b.n	80045c4 <HAL_RCC_OscConfig+0x5e0>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b05      	cmp	r3, #5
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x5c8>
 8004592:	4b6f      	ldr	r3, [pc, #444]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a6e      	ldr	r2, [pc, #440]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004598:	f043 0304 	orr.w	r3, r3, #4
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
 800459e:	4b6c      	ldr	r3, [pc, #432]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a6b      	ldr	r2, [pc, #428]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0x5e0>
 80045ac:	4b68      	ldr	r3, [pc, #416]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	4a67      	ldr	r2, [pc, #412]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	6713      	str	r3, [r2, #112]	; 0x70
 80045b8:	4b65      	ldr	r3, [pc, #404]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045bc:	4a64      	ldr	r2, [pc, #400]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80045be:	f023 0304 	bic.w	r3, r3, #4
 80045c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d015      	beq.n	80045f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fd f9c4 	bl	8001958 <HAL_GetTick>
 80045d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d4:	f7fd f9c0 	bl	8001958 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e14e      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045ea:	4b59      	ldr	r3, [pc, #356]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0ee      	beq.n	80045d4 <HAL_RCC_OscConfig+0x5f0>
 80045f6:	e014      	b.n	8004622 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f8:	f7fd f9ae 	bl	8001958 <HAL_GetTick>
 80045fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004600:	f7fd f9aa 	bl	8001958 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	; 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e138      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004616:	4b4e      	ldr	r3, [pc, #312]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1ee      	bne.n	8004600 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 812d 	beq.w	8004886 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800462c:	4b48      	ldr	r3, [pc, #288]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004634:	2b18      	cmp	r3, #24
 8004636:	f000 80bd 	beq.w	80047b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b02      	cmp	r3, #2
 8004640:	f040 809e 	bne.w	8004780 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004644:	4b42      	ldr	r3, [pc, #264]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a41      	ldr	r2, [pc, #260]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 800464a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800464e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fd f982 	bl	8001958 <HAL_GetTick>
 8004654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004658:	f7fd f97e 	bl	8001958 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e10e      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800466a:	4b39      	ldr	r3, [pc, #228]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004676:	4b36      	ldr	r3, [pc, #216]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800467a:	4b37      	ldr	r3, [pc, #220]	; (8004758 <HAL_RCC_OscConfig+0x774>)
 800467c:	4013      	ands	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004686:	0112      	lsls	r2, r2, #4
 8004688:	430a      	orrs	r2, r1
 800468a:	4931      	ldr	r1, [pc, #196]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 800468c:	4313      	orrs	r3, r2
 800468e:	628b      	str	r3, [r1, #40]	; 0x28
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	3b01      	subs	r3, #1
 8004696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469e:	3b01      	subs	r3, #1
 80046a0:	025b      	lsls	r3, r3, #9
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	3b01      	subs	r3, #1
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	3b01      	subs	r3, #1
 80046ba:	061b      	lsls	r3, r3, #24
 80046bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046c0:	4923      	ldr	r1, [pc, #140]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80046c6:	4b22      	ldr	r3, [pc, #136]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	4a21      	ldr	r2, [pc, #132]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046d2:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80046d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d6:	4b21      	ldr	r3, [pc, #132]	; (800475c <HAL_RCC_OscConfig+0x778>)
 80046d8:	4013      	ands	r3, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046de:	00d2      	lsls	r2, r2, #3
 80046e0:	491b      	ldr	r1, [pc, #108]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80046e6:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	f023 020c 	bic.w	r2, r3, #12
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	4917      	ldr	r1, [pc, #92]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80046f8:	4b15      	ldr	r3, [pc, #84]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	f023 0202 	bic.w	r2, r3, #2
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004704:	4912      	ldr	r1, [pc, #72]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800470a:	4b11      	ldr	r3, [pc, #68]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	4a10      	ldr	r2, [pc, #64]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004716:	4b0e      	ldr	r3, [pc, #56]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	4a0d      	ldr	r2, [pc, #52]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 800471c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004720:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004722:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800472c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800472e:	4b08      	ldr	r3, [pc, #32]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	4a07      	ldr	r2, [pc, #28]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a04      	ldr	r2, [pc, #16]	; (8004750 <HAL_RCC_OscConfig+0x76c>)
 8004740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fd f907 	bl	8001958 <HAL_GetTick>
 800474a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800474c:	e011      	b.n	8004772 <HAL_RCC_OscConfig+0x78e>
 800474e:	bf00      	nop
 8004750:	58024400 	.word	0x58024400
 8004754:	58024800 	.word	0x58024800
 8004758:	fffffc0c 	.word	0xfffffc0c
 800475c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004760:	f7fd f8fa 	bl	8001958 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e08a      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004772:	4b47      	ldr	r3, [pc, #284]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x77c>
 800477e:	e082      	b.n	8004886 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004780:	4b43      	ldr	r3, [pc, #268]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a42      	ldr	r2, [pc, #264]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 8004786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800478a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fd f8e4 	bl	8001958 <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fd f8e0 	bl	8001958 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e070      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047a6:	4b3a      	ldr	r3, [pc, #232]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x7b0>
 80047b2:	e068      	b.n	8004886 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047b4:	4b36      	ldr	r3, [pc, #216]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047ba:	4b35      	ldr	r3, [pc, #212]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d031      	beq.n	800482c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f003 0203 	and.w	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d12a      	bne.n	800482c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d122      	bne.n	800482c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d11a      	bne.n	800482c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	0a5b      	lsrs	r3, r3, #9
 80047fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d111      	bne.n	800482c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	0c1b      	lsrs	r3, r3, #16
 800480c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d108      	bne.n	800482c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	0e1b      	lsrs	r3, r3, #24
 800481e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d001      	beq.n	8004830 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e02b      	b.n	8004888 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004830:	4b17      	ldr	r3, [pc, #92]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004834:	08db      	lsrs	r3, r3, #3
 8004836:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800483a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	429a      	cmp	r2, r3
 8004844:	d01f      	beq.n	8004886 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	4a11      	ldr	r2, [pc, #68]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004852:	f7fd f881 	bl	8001958 <HAL_GetTick>
 8004856:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004858:	bf00      	nop
 800485a:	f7fd f87d 	bl	8001958 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	4293      	cmp	r3, r2
 8004864:	d0f9      	beq.n	800485a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004866:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 8004868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <HAL_RCC_OscConfig+0x8b0>)
 800486c:	4013      	ands	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004872:	00d2      	lsls	r2, r2, #3
 8004874:	4906      	ldr	r1, [pc, #24]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 8004876:	4313      	orrs	r3, r2
 8004878:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800487a:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	4a04      	ldr	r2, [pc, #16]	; (8004890 <HAL_RCC_OscConfig+0x8ac>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3730      	adds	r7, #48	; 0x30
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	58024400 	.word	0x58024400
 8004894:	ffff0007 	.word	0xffff0007

08004898 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e19c      	b.n	8004be6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ac:	4b8a      	ldr	r3, [pc, #552]	; (8004ad8 <HAL_RCC_ClockConfig+0x240>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d910      	bls.n	80048dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b87      	ldr	r3, [pc, #540]	; (8004ad8 <HAL_RCC_ClockConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f023 020f 	bic.w	r2, r3, #15
 80048c2:	4985      	ldr	r1, [pc, #532]	; (8004ad8 <HAL_RCC_ClockConfig+0x240>)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b83      	ldr	r3, [pc, #524]	; (8004ad8 <HAL_RCC_ClockConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e184      	b.n	8004be6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d010      	beq.n	800490a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	4b7b      	ldr	r3, [pc, #492]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d908      	bls.n	800490a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048f8:	4b78      	ldr	r3, [pc, #480]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	4975      	ldr	r1, [pc, #468]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004906:	4313      	orrs	r3, r2
 8004908:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d010      	beq.n	8004938 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	4b70      	ldr	r3, [pc, #448]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004922:	429a      	cmp	r2, r3
 8004924:	d908      	bls.n	8004938 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004926:	4b6d      	ldr	r3, [pc, #436]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	496a      	ldr	r1, [pc, #424]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004934:	4313      	orrs	r3, r2
 8004936:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	d010      	beq.n	8004966 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699a      	ldr	r2, [r3, #24]
 8004948:	4b64      	ldr	r3, [pc, #400]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004950:	429a      	cmp	r2, r3
 8004952:	d908      	bls.n	8004966 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004954:	4b61      	ldr	r3, [pc, #388]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	495e      	ldr	r1, [pc, #376]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004962:	4313      	orrs	r3, r2
 8004964:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d010      	beq.n	8004994 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69da      	ldr	r2, [r3, #28]
 8004976:	4b59      	ldr	r3, [pc, #356]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800497e:	429a      	cmp	r2, r3
 8004980:	d908      	bls.n	8004994 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004982:	4b56      	ldr	r3, [pc, #344]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	4953      	ldr	r1, [pc, #332]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004990:	4313      	orrs	r3, r2
 8004992:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d010      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	4b4d      	ldr	r3, [pc, #308]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d908      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b0:	4b4a      	ldr	r3, [pc, #296]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f023 020f 	bic.w	r2, r3, #15
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4947      	ldr	r1, [pc, #284]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d055      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049ce:	4b43      	ldr	r3, [pc, #268]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	4940      	ldr	r1, [pc, #256]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d107      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049e8:	4b3c      	ldr	r3, [pc, #240]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d121      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0f6      	b.n	8004be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d107      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a00:	4b36      	ldr	r3, [pc, #216]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d115      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0ea      	b.n	8004be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d107      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a18:	4b30      	ldr	r3, [pc, #192]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d109      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0de      	b.n	8004be6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a28:	4b2c      	ldr	r3, [pc, #176]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0d6      	b.n	8004be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a38:	4b28      	ldr	r3, [pc, #160]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f023 0207 	bic.w	r2, r3, #7
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4925      	ldr	r1, [pc, #148]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4a:	f7fc ff85 	bl	8001958 <HAL_GetTick>
 8004a4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a52:	f7fc ff81 	bl	8001958 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e0be      	b.n	8004be6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a68:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d1eb      	bne.n	8004a52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d010      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d208      	bcs.n	8004aa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a96:	4b11      	ldr	r3, [pc, #68]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f023 020f 	bic.w	r2, r3, #15
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	490e      	ldr	r1, [pc, #56]	; (8004adc <HAL_RCC_ClockConfig+0x244>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_ClockConfig+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d214      	bcs.n	8004ae0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab6:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <HAL_RCC_ClockConfig+0x240>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 020f 	bic.w	r2, r3, #15
 8004abe:	4906      	ldr	r1, [pc, #24]	; (8004ad8 <HAL_RCC_ClockConfig+0x240>)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac6:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <HAL_RCC_ClockConfig+0x240>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e086      	b.n	8004be6 <HAL_RCC_ClockConfig+0x34e>
 8004ad8:	52002000 	.word	0x52002000
 8004adc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d010      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d208      	bcs.n	8004b0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004afc:	4b3c      	ldr	r3, [pc, #240]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	4939      	ldr	r1, [pc, #228]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d010      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695a      	ldr	r2, [r3, #20]
 8004b1e:	4b34      	ldr	r3, [pc, #208]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d208      	bcs.n	8004b3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b2a:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	492e      	ldr	r1, [pc, #184]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d010      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699a      	ldr	r2, [r3, #24]
 8004b4c:	4b28      	ldr	r3, [pc, #160]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d208      	bcs.n	8004b6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b58:	4b25      	ldr	r3, [pc, #148]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	4922      	ldr	r1, [pc, #136]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d010      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69da      	ldr	r2, [r3, #28]
 8004b7a:	4b1d      	ldr	r3, [pc, #116]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d208      	bcs.n	8004b98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b86:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	4917      	ldr	r1, [pc, #92]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b98:	f000 f834 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	0a1b      	lsrs	r3, r3, #8
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	4912      	ldr	r1, [pc, #72]	; (8004bf4 <HAL_RCC_ClockConfig+0x35c>)
 8004baa:	5ccb      	ldrb	r3, [r1, r3]
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bb6:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <HAL_RCC_ClockConfig+0x358>)
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	4a0d      	ldr	r2, [pc, #52]	; (8004bf4 <HAL_RCC_ClockConfig+0x35c>)
 8004bc0:	5cd3      	ldrb	r3, [r2, r3]
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bcc:	4a0a      	ldr	r2, [pc, #40]	; (8004bf8 <HAL_RCC_ClockConfig+0x360>)
 8004bce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bd0:	4a0a      	ldr	r2, [pc, #40]	; (8004bfc <HAL_RCC_ClockConfig+0x364>)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <HAL_RCC_ClockConfig+0x368>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fc fe72 	bl	80018c4 <HAL_InitTick>
 8004be0:	4603      	mov	r3, r0
 8004be2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	58024400 	.word	0x58024400
 8004bf4:	0800b9dc 	.word	0x0800b9dc
 8004bf8:	20000004 	.word	0x20000004
 8004bfc:	20000000 	.word	0x20000000
 8004c00:	20000024 	.word	0x20000024

08004c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b089      	sub	sp, #36	; 0x24
 8004c08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c0a:	4bb3      	ldr	r3, [pc, #716]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c12:	2b18      	cmp	r3, #24
 8004c14:	f200 8155 	bhi.w	8004ec2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c85 	.word	0x08004c85
 8004c24:	08004ec3 	.word	0x08004ec3
 8004c28:	08004ec3 	.word	0x08004ec3
 8004c2c:	08004ec3 	.word	0x08004ec3
 8004c30:	08004ec3 	.word	0x08004ec3
 8004c34:	08004ec3 	.word	0x08004ec3
 8004c38:	08004ec3 	.word	0x08004ec3
 8004c3c:	08004ec3 	.word	0x08004ec3
 8004c40:	08004cab 	.word	0x08004cab
 8004c44:	08004ec3 	.word	0x08004ec3
 8004c48:	08004ec3 	.word	0x08004ec3
 8004c4c:	08004ec3 	.word	0x08004ec3
 8004c50:	08004ec3 	.word	0x08004ec3
 8004c54:	08004ec3 	.word	0x08004ec3
 8004c58:	08004ec3 	.word	0x08004ec3
 8004c5c:	08004ec3 	.word	0x08004ec3
 8004c60:	08004cb1 	.word	0x08004cb1
 8004c64:	08004ec3 	.word	0x08004ec3
 8004c68:	08004ec3 	.word	0x08004ec3
 8004c6c:	08004ec3 	.word	0x08004ec3
 8004c70:	08004ec3 	.word	0x08004ec3
 8004c74:	08004ec3 	.word	0x08004ec3
 8004c78:	08004ec3 	.word	0x08004ec3
 8004c7c:	08004ec3 	.word	0x08004ec3
 8004c80:	08004cb7 	.word	0x08004cb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c84:	4b94      	ldr	r3, [pc, #592]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c90:	4b91      	ldr	r3, [pc, #580]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	08db      	lsrs	r3, r3, #3
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	4a90      	ldr	r2, [pc, #576]	; (8004edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004ca2:	e111      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ca4:	4b8d      	ldr	r3, [pc, #564]	; (8004edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ca6:	61bb      	str	r3, [r7, #24]
      break;
 8004ca8:	e10e      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004caa:	4b8d      	ldr	r3, [pc, #564]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cac:	61bb      	str	r3, [r7, #24]
      break;
 8004cae:	e10b      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004cb0:	4b8c      	ldr	r3, [pc, #560]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004cb2:	61bb      	str	r3, [r7, #24]
      break;
 8004cb4:	e108      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cb6:	4b88      	ldr	r3, [pc, #544]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004cc0:	4b85      	ldr	r3, [pc, #532]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ccc:	4b82      	ldr	r3, [pc, #520]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004cd6:	4b80      	ldr	r3, [pc, #512]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cda:	08db      	lsrs	r3, r3, #3
 8004cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80e1 	beq.w	8004ebc <HAL_RCC_GetSysClockFreq+0x2b8>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	f000 8083 	beq.w	8004e08 <HAL_RCC_GetSysClockFreq+0x204>
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	f200 80a1 	bhi.w	8004e4c <HAL_RCC_GetSysClockFreq+0x248>
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x114>
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d056      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d16:	e099      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d18:	4b6f      	ldr	r3, [pc, #444]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d02d      	beq.n	8004d80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d24:	4b6c      	ldr	r3, [pc, #432]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	08db      	lsrs	r3, r3, #3
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	4a6b      	ldr	r2, [pc, #428]	; (8004edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
 8004d34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	ee07 3a90 	vmov	s15, r3
 8004d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4e:	4b62      	ldr	r3, [pc, #392]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004d7e:	e087      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004eec <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d92:	4b51      	ldr	r3, [pc, #324]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004da6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004dc2:	e065      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004ef0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd6:	4b40      	ldr	r3, [pc, #256]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e06:	e043      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ef4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e4a:	e021      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004ef0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5e:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004e90:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	0a5b      	lsrs	r3, r3, #9
 8004e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	ee07 3a90 	vmov	s15, r3
 8004ea4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eb4:	ee17 3a90 	vmov	r3, s15
 8004eb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004eba:	e005      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61bb      	str	r3, [r7, #24]
      break;
 8004ec0:	e002      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004ec2:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ec4:	61bb      	str	r3, [r7, #24]
      break;
 8004ec6:	bf00      	nop
  }

  return sysclockfreq;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3724      	adds	r7, #36	; 0x24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	58024400 	.word	0x58024400
 8004edc:	03d09000 	.word	0x03d09000
 8004ee0:	003d0900 	.word	0x003d0900
 8004ee4:	016e3600 	.word	0x016e3600
 8004ee8:	46000000 	.word	0x46000000
 8004eec:	4c742400 	.word	0x4c742400
 8004ef0:	4a742400 	.word	0x4a742400
 8004ef4:	4bb71b00 	.word	0x4bb71b00

08004ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004efe:	f7ff fe81 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8004f02:	4602      	mov	r2, r0
 8004f04:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	0a1b      	lsrs	r3, r3, #8
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	490f      	ldr	r1, [pc, #60]	; (8004f4c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f10:	5ccb      	ldrb	r3, [r1, r3]
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f26:	5cd3      	ldrb	r3, [r2, r3]
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f32:	4a07      	ldr	r2, [pc, #28]	; (8004f50 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f36:	4a07      	ldr	r2, [pc, #28]	; (8004f54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f3c:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	0800b9dc 	.word	0x0800b9dc
 8004f50:	20000004 	.word	0x20000004
 8004f54:	20000000 	.word	0x20000000

08004f58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f5c:	b0ca      	sub	sp, #296	; 0x128
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004f7c:	2500      	movs	r5, #0
 8004f7e:	ea54 0305 	orrs.w	r3, r4, r5
 8004f82:	d049      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f8e:	d02f      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004f90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f94:	d828      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f9a:	d01a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fa0:	d822      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004faa:	d007      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fac:	e01c      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fae:	4bb8      	ldr	r3, [pc, #736]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	4ab7      	ldr	r2, [pc, #732]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004fba:	e01a      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f001 f9d1 	bl	800636c <RCCEx_PLL2_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004fd0:	e00f      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd6:	3328      	adds	r3, #40	; 0x28
 8004fd8:	2102      	movs	r1, #2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f001 fa78 	bl	80064d0 <RCCEx_PLL3_Config>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004fe6:	e004      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fee:	e000      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10a      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ffa:	4ba5      	ldr	r3, [pc, #660]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005008:	4aa1      	ldr	r2, [pc, #644]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800500a:	430b      	orrs	r3, r1
 800500c:	6513      	str	r3, [r2, #80]	; 0x50
 800500e:	e003      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005010:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005014:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005024:	f04f 0900 	mov.w	r9, #0
 8005028:	ea58 0309 	orrs.w	r3, r8, r9
 800502c:	d047      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800502e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005034:	2b04      	cmp	r3, #4
 8005036:	d82a      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005055 	.word	0x08005055
 8005044:	08005063 	.word	0x08005063
 8005048:	08005079 	.word	0x08005079
 800504c:	08005097 	.word	0x08005097
 8005050:	08005097 	.word	0x08005097
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005054:	4b8e      	ldr	r3, [pc, #568]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	4a8d      	ldr	r2, [pc, #564]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800505a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800505e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005060:	e01a      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005066:	3308      	adds	r3, #8
 8005068:	2100      	movs	r1, #0
 800506a:	4618      	mov	r0, r3
 800506c:	f001 f97e 	bl	800636c <RCCEx_PLL2_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005076:	e00f      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507c:	3328      	adds	r3, #40	; 0x28
 800507e:	2100      	movs	r1, #0
 8005080:	4618      	mov	r0, r3
 8005082:	f001 fa25 	bl	80064d0 <RCCEx_PLL3_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800508c:	e004      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005094:	e000      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050a0:	4b7b      	ldr	r3, [pc, #492]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a4:	f023 0107 	bic.w	r1, r3, #7
 80050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	4a78      	ldr	r2, [pc, #480]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050b0:	430b      	orrs	r3, r1
 80050b2:	6513      	str	r3, [r2, #80]	; 0x50
 80050b4:	e003      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80050be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80050ca:	f04f 0b00 	mov.w	fp, #0
 80050ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80050d2:	d04c      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050de:	d030      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80050e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e4:	d829      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050e6:	2bc0      	cmp	r3, #192	; 0xc0
 80050e8:	d02d      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80050ea:	2bc0      	cmp	r3, #192	; 0xc0
 80050ec:	d825      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d018      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80050f2:	2b80      	cmp	r3, #128	; 0x80
 80050f4:	d821      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	d007      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80050fe:	e01c      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005100:	4b63      	ldr	r3, [pc, #396]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	4a62      	ldr	r2, [pc, #392]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800510a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800510c:	e01c      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800510e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005112:	3308      	adds	r3, #8
 8005114:	2100      	movs	r1, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f001 f928 	bl	800636c <RCCEx_PLL2_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005122:	e011      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005128:	3328      	adds	r3, #40	; 0x28
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f001 f9cf 	bl	80064d0 <RCCEx_PLL3_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005138:	e006      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005140:	e002      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005150:	4b4f      	ldr	r3, [pc, #316]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005154:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515e:	4a4c      	ldr	r2, [pc, #304]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005160:	430b      	orrs	r3, r1
 8005162:	6513      	str	r3, [r2, #80]	; 0x50
 8005164:	e003      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800516a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800517a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800517e:	2300      	movs	r3, #0
 8005180:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005184:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005188:	460b      	mov	r3, r1
 800518a:	4313      	orrs	r3, r2
 800518c:	d053      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005192:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005196:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800519a:	d035      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800519c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051a0:	d82e      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80051a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051a6:	d031      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80051a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051ac:	d828      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80051ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b2:	d01a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 80051b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b8:	d822      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80051be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051c2:	d007      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80051c4:	e01c      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c6:	4b32      	ldr	r3, [pc, #200]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	4a31      	ldr	r2, [pc, #196]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051d2:	e01c      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d8:	3308      	adds	r3, #8
 80051da:	2100      	movs	r1, #0
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 f8c5 	bl	800636c <RCCEx_PLL2_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80051e8:	e011      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ee:	3328      	adds	r3, #40	; 0x28
 80051f0:	2100      	movs	r1, #0
 80051f2:	4618      	mov	r0, r3
 80051f4:	f001 f96c 	bl	80064d0 <RCCEx_PLL3_Config>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051fe:	e006      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005206:	e002      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005208:	bf00      	nop
 800520a:	e000      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800520c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005216:	4b1e      	ldr	r3, [pc, #120]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005226:	4a1a      	ldr	r2, [pc, #104]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005228:	430b      	orrs	r3, r1
 800522a:	6593      	str	r3, [r2, #88]	; 0x58
 800522c:	e003      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005232:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005242:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005246:	2300      	movs	r3, #0
 8005248:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800524c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005250:	460b      	mov	r3, r1
 8005252:	4313      	orrs	r3, r2
 8005254:	d056      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800525e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005262:	d038      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005268:	d831      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800526a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800526e:	d034      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005270:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005274:	d82b      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800527a:	d01d      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800527c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005280:	d825      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d006      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005286:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800528c:	e01f      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800528e:	bf00      	nop
 8005290:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005294:	4ba2      	ldr	r3, [pc, #648]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	4aa1      	ldr	r2, [pc, #644]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800529a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800529e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052a0:	e01c      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a6:	3308      	adds	r3, #8
 80052a8:	2100      	movs	r1, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	f001 f85e 	bl	800636c <RCCEx_PLL2_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80052b6:	e011      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052bc:	3328      	adds	r3, #40	; 0x28
 80052be:	2100      	movs	r1, #0
 80052c0:	4618      	mov	r0, r3
 80052c2:	f001 f905 	bl	80064d0 <RCCEx_PLL3_Config>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052cc:	e006      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052d4:	e002      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80052d6:	bf00      	nop
 80052d8:	e000      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80052da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10b      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80052e4:	4b8e      	ldr	r3, [pc, #568]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80052ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052f4:	4a8a      	ldr	r2, [pc, #552]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052f6:	430b      	orrs	r3, r1
 80052f8:	6593      	str	r3, [r2, #88]	; 0x58
 80052fa:	e003      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005300:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005310:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005314:	2300      	movs	r3, #0
 8005316:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800531a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800531e:	460b      	mov	r3, r1
 8005320:	4313      	orrs	r3, r2
 8005322:	d03a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532a:	2b30      	cmp	r3, #48	; 0x30
 800532c:	d01f      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800532e:	2b30      	cmp	r3, #48	; 0x30
 8005330:	d819      	bhi.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005332:	2b20      	cmp	r3, #32
 8005334:	d00c      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005336:	2b20      	cmp	r3, #32
 8005338:	d815      	bhi.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d019      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800533e:	2b10      	cmp	r3, #16
 8005340:	d111      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005342:	4b77      	ldr	r3, [pc, #476]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	4a76      	ldr	r2, [pc, #472]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800534e:	e011      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005354:	3308      	adds	r3, #8
 8005356:	2102      	movs	r1, #2
 8005358:	4618      	mov	r0, r3
 800535a:	f001 f807 	bl	800636c <RCCEx_PLL2_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005364:	e006      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800536c:	e002      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800536e:	bf00      	nop
 8005370:	e000      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800537c:	4b68      	ldr	r3, [pc, #416]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800537e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005380:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538a:	4a65      	ldr	r2, [pc, #404]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800538c:	430b      	orrs	r3, r1
 800538e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005390:	e003      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800539a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80053a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053aa:	2300      	movs	r3, #0
 80053ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4313      	orrs	r3, r2
 80053b8:	d051      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c4:	d035      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80053c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ca:	d82e      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80053cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053d0:	d031      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80053d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053d6:	d828      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80053d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053dc:	d01a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80053de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e2:	d822      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80053e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ec:	d007      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80053ee:	e01c      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f0:	4b4b      	ldr	r3, [pc, #300]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	4a4a      	ldr	r2, [pc, #296]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053fc:	e01c      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005402:	3308      	adds	r3, #8
 8005404:	2100      	movs	r1, #0
 8005406:	4618      	mov	r0, r3
 8005408:	f000 ffb0 	bl	800636c <RCCEx_PLL2_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005412:	e011      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005418:	3328      	adds	r3, #40	; 0x28
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f001 f857 	bl	80064d0 <RCCEx_PLL3_Config>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005428:	e006      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005430:	e002      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005432:	bf00      	nop
 8005434:	e000      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005440:	4b37      	ldr	r3, [pc, #220]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005444:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544e:	4a34      	ldr	r2, [pc, #208]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005450:	430b      	orrs	r3, r1
 8005452:	6513      	str	r3, [r2, #80]	; 0x50
 8005454:	e003      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800545a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800546a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800546e:	2300      	movs	r3, #0
 8005470:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005474:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005478:	460b      	mov	r3, r1
 800547a:	4313      	orrs	r3, r2
 800547c:	d056      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800547e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005488:	d033      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800548a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800548e:	d82c      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005490:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005494:	d02f      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005496:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800549a:	d826      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800549c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054a0:	d02b      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80054a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054a6:	d820      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80054a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ac:	d012      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80054ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054b2:	d81a      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d022      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054bc:	d115      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c2:	3308      	adds	r3, #8
 80054c4:	2101      	movs	r1, #1
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 ff50 	bl	800636c <RCCEx_PLL2_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80054d2:	e015      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d8:	3328      	adds	r3, #40	; 0x28
 80054da:	2101      	movs	r1, #1
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fff7 	bl	80064d0 <RCCEx_PLL3_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80054e8:	e00a      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054f0:	e006      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054f2:	bf00      	nop
 80054f4:	e004      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054f6:	bf00      	nop
 80054f8:	e002      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054fa:	bf00      	nop
 80054fc:	e000      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10d      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800550a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005516:	4a02      	ldr	r2, [pc, #8]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005518:	430b      	orrs	r3, r1
 800551a:	6513      	str	r3, [r2, #80]	; 0x50
 800551c:	e006      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800551e:	bf00      	nop
 8005520:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005528:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800552c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800553c:	2300      	movs	r3, #0
 800553e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005542:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005546:	460b      	mov	r3, r1
 8005548:	4313      	orrs	r3, r2
 800554a:	d055      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800554c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005550:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005558:	d033      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800555a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800555e:	d82c      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005564:	d02f      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556a:	d826      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800556c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005570:	d02b      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005572:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005576:	d820      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557c:	d012      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800557e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005582:	d81a      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d022      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005588:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800558c:	d115      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800558e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005592:	3308      	adds	r3, #8
 8005594:	2101      	movs	r1, #1
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fee8 	bl	800636c <RCCEx_PLL2_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80055a2:	e015      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a8:	3328      	adds	r3, #40	; 0x28
 80055aa:	2101      	movs	r1, #1
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 ff8f 	bl	80064d0 <RCCEx_PLL3_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80055b8:	e00a      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055c0:	e006      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80055c2:	bf00      	nop
 80055c4:	e004      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80055c6:	bf00      	nop
 80055c8:	e002      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80055ca:	bf00      	nop
 80055cc:	e000      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80055ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10b      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80055d8:	4ba3      	ldr	r3, [pc, #652]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055dc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80055e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055e8:	4a9f      	ldr	r2, [pc, #636]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ea:	430b      	orrs	r3, r1
 80055ec:	6593      	str	r3, [r2, #88]	; 0x58
 80055ee:	e003      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005608:	2300      	movs	r3, #0
 800560a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800560e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005612:	460b      	mov	r3, r1
 8005614:	4313      	orrs	r3, r2
 8005616:	d037      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005622:	d00e      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005628:	d816      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d018      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800562e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005632:	d111      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005634:	4b8c      	ldr	r3, [pc, #560]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	4a8b      	ldr	r2, [pc, #556]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800563a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800563e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005640:	e00f      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005646:	3308      	adds	r3, #8
 8005648:	2101      	movs	r1, #1
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fe8e 	bl	800636c <RCCEx_PLL2_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005656:	e004      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800565e:	e000      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800566a:	4b7f      	ldr	r3, [pc, #508]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800566c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	4a7b      	ldr	r2, [pc, #492]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800567a:	430b      	orrs	r3, r1
 800567c:	6513      	str	r3, [r2, #80]	; 0x50
 800567e:	e003      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005698:	2300      	movs	r3, #0
 800569a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800569e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4313      	orrs	r3, r2
 80056a6:	d039      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80056a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d81c      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056f5 	.word	0x080056f5
 80056bc:	080056c9 	.word	0x080056c9
 80056c0:	080056d7 	.word	0x080056d7
 80056c4:	080056f5 	.word	0x080056f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c8:	4b67      	ldr	r3, [pc, #412]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	4a66      	ldr	r2, [pc, #408]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80056d4:	e00f      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056da:	3308      	adds	r3, #8
 80056dc:	2102      	movs	r1, #2
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fe44 	bl	800636c <RCCEx_PLL2_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80056ea:	e004      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056f2:	e000      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80056f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80056fe:	4b5a      	ldr	r3, [pc, #360]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005702:	f023 0103 	bic.w	r1, r3, #3
 8005706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800570a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570c:	4a56      	ldr	r2, [pc, #344]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800570e:	430b      	orrs	r3, r1
 8005710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005712:	e003      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005714:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005718:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800571c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005728:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800572c:	2300      	movs	r3, #0
 800572e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005732:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005736:	460b      	mov	r3, r1
 8005738:	4313      	orrs	r3, r2
 800573a:	f000 809f 	beq.w	800587c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800573e:	4b4b      	ldr	r3, [pc, #300]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a4a      	ldr	r2, [pc, #296]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005748:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800574a:	f7fc f905 	bl	8001958 <HAL_GetTick>
 800574e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005752:	e00b      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005754:	f7fc f900 	bl	8001958 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b64      	cmp	r3, #100	; 0x64
 8005762:	d903      	bls.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800576a:	e005      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800576c:	4b3f      	ldr	r3, [pc, #252]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ed      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800577c:	2b00      	cmp	r3, #0
 800577e:	d179      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005780:	4b39      	ldr	r3, [pc, #228]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005782:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005788:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800578c:	4053      	eors	r3, r2
 800578e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005792:	2b00      	cmp	r3, #0
 8005794:	d015      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005796:	4b34      	ldr	r3, [pc, #208]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057a2:	4b31      	ldr	r3, [pc, #196]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a6:	4a30      	ldr	r2, [pc, #192]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057ae:	4b2e      	ldr	r3, [pc, #184]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	4a2d      	ldr	r2, [pc, #180]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80057ba:	4a2b      	ldr	r2, [pc, #172]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80057c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ce:	d118      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d0:	f7fc f8c2 	bl	8001958 <HAL_GetTick>
 80057d4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057d8:	e00d      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057da:	f7fc f8bd 	bl	8001958 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057e4:	1ad2      	subs	r2, r2, r3
 80057e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d903      	bls.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80057f4:	e005      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057f6:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0eb      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005806:	2b00      	cmp	r3, #0
 8005808:	d129      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800580a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800581a:	d10e      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800581c:	4b12      	ldr	r3, [pc, #72]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005828:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800582c:	091a      	lsrs	r2, r3, #4
 800582e:	4b10      	ldr	r3, [pc, #64]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005830:	4013      	ands	r3, r2
 8005832:	4a0d      	ldr	r2, [pc, #52]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005834:	430b      	orrs	r3, r1
 8005836:	6113      	str	r3, [r2, #16]
 8005838:	e005      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005840:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005844:	6113      	str	r3, [r2, #16]
 8005846:	4b08      	ldr	r3, [pc, #32]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005848:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800584a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800584e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005856:	4a04      	ldr	r2, [pc, #16]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005858:	430b      	orrs	r3, r1
 800585a:	6713      	str	r3, [r2, #112]	; 0x70
 800585c:	e00e      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800585e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005862:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005866:	e009      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005868:	58024400 	.word	0x58024400
 800586c:	58024800 	.word	0x58024800
 8005870:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005878:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f002 0301 	and.w	r3, r2, #1
 8005888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800588c:	2300      	movs	r3, #0
 800588e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005892:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005896:	460b      	mov	r3, r1
 8005898:	4313      	orrs	r3, r2
 800589a:	f000 8089 	beq.w	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800589e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058a4:	2b28      	cmp	r3, #40	; 0x28
 80058a6:	d86b      	bhi.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80058a8:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	08005989 	.word	0x08005989
 80058b4:	08005981 	.word	0x08005981
 80058b8:	08005981 	.word	0x08005981
 80058bc:	08005981 	.word	0x08005981
 80058c0:	08005981 	.word	0x08005981
 80058c4:	08005981 	.word	0x08005981
 80058c8:	08005981 	.word	0x08005981
 80058cc:	08005981 	.word	0x08005981
 80058d0:	08005955 	.word	0x08005955
 80058d4:	08005981 	.word	0x08005981
 80058d8:	08005981 	.word	0x08005981
 80058dc:	08005981 	.word	0x08005981
 80058e0:	08005981 	.word	0x08005981
 80058e4:	08005981 	.word	0x08005981
 80058e8:	08005981 	.word	0x08005981
 80058ec:	08005981 	.word	0x08005981
 80058f0:	0800596b 	.word	0x0800596b
 80058f4:	08005981 	.word	0x08005981
 80058f8:	08005981 	.word	0x08005981
 80058fc:	08005981 	.word	0x08005981
 8005900:	08005981 	.word	0x08005981
 8005904:	08005981 	.word	0x08005981
 8005908:	08005981 	.word	0x08005981
 800590c:	08005981 	.word	0x08005981
 8005910:	08005989 	.word	0x08005989
 8005914:	08005981 	.word	0x08005981
 8005918:	08005981 	.word	0x08005981
 800591c:	08005981 	.word	0x08005981
 8005920:	08005981 	.word	0x08005981
 8005924:	08005981 	.word	0x08005981
 8005928:	08005981 	.word	0x08005981
 800592c:	08005981 	.word	0x08005981
 8005930:	08005989 	.word	0x08005989
 8005934:	08005981 	.word	0x08005981
 8005938:	08005981 	.word	0x08005981
 800593c:	08005981 	.word	0x08005981
 8005940:	08005981 	.word	0x08005981
 8005944:	08005981 	.word	0x08005981
 8005948:	08005981 	.word	0x08005981
 800594c:	08005981 	.word	0x08005981
 8005950:	08005989 	.word	0x08005989
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005958:	3308      	adds	r3, #8
 800595a:	2101      	movs	r1, #1
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fd05 	bl	800636c <RCCEx_PLL2_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005968:	e00f      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800596e:	3328      	adds	r3, #40	; 0x28
 8005970:	2101      	movs	r1, #1
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fdac 	bl	80064d0 <RCCEx_PLL3_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800597e:	e004      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005986:	e000      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005992:	4bbf      	ldr	r3, [pc, #764]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800599a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800599e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a0:	4abb      	ldr	r2, [pc, #748]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059a2:	430b      	orrs	r3, r1
 80059a4:	6553      	str	r3, [r2, #84]	; 0x54
 80059a6:	e003      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f002 0302 	and.w	r3, r2, #2
 80059bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059c0:	2300      	movs	r3, #0
 80059c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80059c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80059ca:	460b      	mov	r3, r1
 80059cc:	4313      	orrs	r3, r2
 80059ce:	d041      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80059d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059d6:	2b05      	cmp	r3, #5
 80059d8:	d824      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	08005a2d 	.word	0x08005a2d
 80059e4:	080059f9 	.word	0x080059f9
 80059e8:	08005a0f 	.word	0x08005a0f
 80059ec:	08005a2d 	.word	0x08005a2d
 80059f0:	08005a2d 	.word	0x08005a2d
 80059f4:	08005a2d 	.word	0x08005a2d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fc:	3308      	adds	r3, #8
 80059fe:	2101      	movs	r1, #1
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fcb3 	bl	800636c <RCCEx_PLL2_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a0c:	e00f      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a12:	3328      	adds	r3, #40	; 0x28
 8005a14:	2101      	movs	r1, #1
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fd5a 	bl	80064d0 <RCCEx_PLL3_Config>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a22:	e004      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a2a:	e000      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10a      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a36:	4b96      	ldr	r3, [pc, #600]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3a:	f023 0107 	bic.w	r1, r3, #7
 8005a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a44:	4a92      	ldr	r2, [pc, #584]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a46:	430b      	orrs	r3, r1
 8005a48:	6553      	str	r3, [r2, #84]	; 0x54
 8005a4a:	e003      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f002 0304 	and.w	r3, r2, #4
 8005a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a64:	2300      	movs	r3, #0
 8005a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4313      	orrs	r3, r2
 8005a72:	d044      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a7c:	2b05      	cmp	r3, #5
 8005a7e:	d825      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005a80:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005ad5 	.word	0x08005ad5
 8005a8c:	08005aa1 	.word	0x08005aa1
 8005a90:	08005ab7 	.word	0x08005ab7
 8005a94:	08005ad5 	.word	0x08005ad5
 8005a98:	08005ad5 	.word	0x08005ad5
 8005a9c:	08005ad5 	.word	0x08005ad5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fc5f 	bl	800636c <RCCEx_PLL2_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ab4:	e00f      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aba:	3328      	adds	r3, #40	; 0x28
 8005abc:	2101      	movs	r1, #1
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fd06 	bl	80064d0 <RCCEx_PLL3_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005aca:	e004      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10b      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ade:	4b6c      	ldr	r3, [pc, #432]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae2:	f023 0107 	bic.w	r1, r3, #7
 8005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aee:	4a68      	ldr	r2, [pc, #416]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6593      	str	r3, [r2, #88]	; 0x58
 8005af4:	e003      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005afa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f002 0320 	and.w	r3, r2, #32
 8005b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	d055      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b2a:	d033      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b30:	d82c      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b36:	d02f      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3c:	d826      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b42:	d02b      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005b44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b48:	d820      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b4e:	d012      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b54:	d81a      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d022      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b5e:	d115      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b64:	3308      	adds	r3, #8
 8005b66:	2100      	movs	r1, #0
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fbff 	bl	800636c <RCCEx_PLL2_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b74:	e015      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b7a:	3328      	adds	r3, #40	; 0x28
 8005b7c:	2102      	movs	r1, #2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fca6 	bl	80064d0 <RCCEx_PLL3_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b8a:	e00a      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b92:	e006      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b94:	bf00      	nop
 8005b96:	e004      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b98:	bf00      	nop
 8005b9a:	e002      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005b9c:	bf00      	nop
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005baa:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bba:	4a35      	ldr	r2, [pc, #212]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	6553      	str	r3, [r2, #84]	; 0x54
 8005bc0:	e003      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005be0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4313      	orrs	r3, r2
 8005be8:	d058      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bf2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bf6:	d033      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005bf8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bfc:	d82c      	bhi.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c02:	d02f      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c08:	d826      	bhi.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c0e:	d02b      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005c10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c14:	d820      	bhi.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1a:	d012      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c20:	d81a      	bhi.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d022      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2a:	d115      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c30:	3308      	adds	r3, #8
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fb99 	bl	800636c <RCCEx_PLL2_Config>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c40:	e015      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c46:	3328      	adds	r3, #40	; 0x28
 8005c48:	2102      	movs	r1, #2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fc40 	bl	80064d0 <RCCEx_PLL3_Config>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c56:	e00a      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c5e:	e006      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c60:	bf00      	nop
 8005c62:	e004      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c64:	bf00      	nop
 8005c66:	e002      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c68:	bf00      	nop
 8005c6a:	e000      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10e      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c76:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c86:	4a02      	ldr	r2, [pc, #8]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c8c:	e006      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005c8e:	bf00      	nop
 8005c90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cac:	2300      	movs	r3, #0
 8005cae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cb2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	d055      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005cc4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cc8:	d033      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005cca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cce:	d82c      	bhi.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd4:	d02f      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cda:	d826      	bhi.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005cdc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ce0:	d02b      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005ce2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ce6:	d820      	bhi.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cec:	d012      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cf2:	d81a      	bhi.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d022      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfc:	d115      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d02:	3308      	adds	r3, #8
 8005d04:	2100      	movs	r1, #0
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fb30 	bl	800636c <RCCEx_PLL2_Config>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d12:	e015      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d18:	3328      	adds	r3, #40	; 0x28
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fbd7 	bl	80064d0 <RCCEx_PLL3_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d28:	e00a      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d30:	e006      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d32:	bf00      	nop
 8005d34:	e004      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d36:	bf00      	nop
 8005d38:	e002      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d3a:	bf00      	nop
 8005d3c:	e000      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d48:	4ba1      	ldr	r3, [pc, #644]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d58:	4a9d      	ldr	r2, [pc, #628]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d5e:	e003      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f002 0308 	and.w	r3, r2, #8
 8005d74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005d82:	460b      	mov	r3, r1
 8005d84:	4313      	orrs	r3, r2
 8005d86:	d01e      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d94:	d10c      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d9a:	3328      	adds	r3, #40	; 0x28
 8005d9c:	2102      	movs	r1, #2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fb96 	bl	80064d0 <RCCEx_PLL3_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005db0:	4b87      	ldr	r3, [pc, #540]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc0:	4a83      	ldr	r2, [pc, #524]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f002 0310 	and.w	r3, r2, #16
 8005dd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ddc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005de0:	460b      	mov	r3, r1
 8005de2:	4313      	orrs	r3, r2
 8005de4:	d01e      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df2:	d10c      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df8:	3328      	adds	r3, #40	; 0x28
 8005dfa:	2102      	movs	r1, #2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fb67 	bl	80064d0 <RCCEx_PLL3_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e0e:	4b70      	ldr	r3, [pc, #448]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e1e:	4a6c      	ldr	r2, [pc, #432]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e20:	430b      	orrs	r3, r1
 8005e22:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e34:	2300      	movs	r3, #0
 8005e36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e3a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4313      	orrs	r3, r2
 8005e42:	d03e      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e50:	d022      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e56:	d81b      	bhi.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e60:	d00b      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005e62:	e015      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e68:	3308      	adds	r3, #8
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fa7d 	bl	800636c <RCCEx_PLL2_Config>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e78:	e00f      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7e:	3328      	adds	r3, #40	; 0x28
 8005e80:	2102      	movs	r1, #2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fb24 	bl	80064d0 <RCCEx_PLL3_Config>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e8e:	e004      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10b      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ea2:	4b4b      	ldr	r3, [pc, #300]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005eb2:	4a47      	ldr	r2, [pc, #284]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8005eb8:	e003      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ebe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005ece:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ed4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4313      	orrs	r3, r2
 8005edc:	d03b      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eea:	d01f      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005eec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ef0:	d818      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef6:	d003      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005ef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005efc:	d007      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005efe:	e011      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f00:	4b33      	ldr	r3, [pc, #204]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	4a32      	ldr	r2, [pc, #200]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f0c:	e00f      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f12:	3328      	adds	r3, #40	; 0x28
 8005f14:	2101      	movs	r1, #1
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fada 	bl	80064d0 <RCCEx_PLL3_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f22:	e004      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f2a:	e000      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f36:	4b26      	ldr	r3, [pc, #152]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f46:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6553      	str	r3, [r2, #84]	; 0x54
 8005f4c:	e003      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005f62:	673b      	str	r3, [r7, #112]	; 0x70
 8005f64:	2300      	movs	r3, #0
 8005f66:	677b      	str	r3, [r7, #116]	; 0x74
 8005f68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	d034      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f80:	d007      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005f82:	e011      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f84:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	4a11      	ldr	r2, [pc, #68]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f90:	e00e      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f96:	3308      	adds	r3, #8
 8005f98:	2102      	movs	r1, #2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f9e6 	bl	800636c <RCCEx_PLL2_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005fa6:	e003      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10d      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005fb8:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc6:	4a02      	ldr	r2, [pc, #8]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fcc:	e006      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005fce:	bf00      	nop
 8005fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fea:	2300      	movs	r3, #0
 8005fec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	d00c      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ffc:	3328      	adds	r3, #40	; 0x28
 8005ffe:	2102      	movs	r1, #2
 8006000:	4618      	mov	r0, r3
 8006002:	f000 fa65 	bl	80064d0 <RCCEx_PLL3_Config>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800601e:	663b      	str	r3, [r7, #96]	; 0x60
 8006020:	2300      	movs	r3, #0
 8006022:	667b      	str	r3, [r7, #100]	; 0x64
 8006024:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006028:	460b      	mov	r3, r1
 800602a:	4313      	orrs	r3, r2
 800602c:	d038      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800603a:	d018      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800603c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006040:	d811      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006046:	d014      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604c:	d80b      	bhi.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d011      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006056:	d106      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006058:	4bc3      	ldr	r3, [pc, #780]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	4ac2      	ldr	r2, [pc, #776]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800605e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006064:	e008      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800606c:	e004      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800606e:	bf00      	nop
 8006070:	e002      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006072:	bf00      	nop
 8006074:	e000      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006078:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006080:	4bb9      	ldr	r3, [pc, #740]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006084:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800608c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006090:	4ab5      	ldr	r2, [pc, #724]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006092:	430b      	orrs	r3, r1
 8006094:	6553      	str	r3, [r2, #84]	; 0x54
 8006096:	e003      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800609c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80060ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80060ae:	2300      	movs	r3, #0
 80060b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80060b6:	460b      	mov	r3, r1
 80060b8:	4313      	orrs	r3, r2
 80060ba:	d009      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80060bc:	4baa      	ldr	r3, [pc, #680]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80060c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ca:	4aa7      	ldr	r2, [pc, #668]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060cc:	430b      	orrs	r3, r1
 80060ce:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80060d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80060dc:	653b      	str	r3, [r7, #80]	; 0x50
 80060de:	2300      	movs	r3, #0
 80060e0:	657b      	str	r3, [r7, #84]	; 0x54
 80060e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80060e6:	460b      	mov	r3, r1
 80060e8:	4313      	orrs	r3, r2
 80060ea:	d00a      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80060ec:	4b9e      	ldr	r3, [pc, #632]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80060f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80060fc:	4a9a      	ldr	r2, [pc, #616]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060fe:	430b      	orrs	r3, r1
 8006100:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800610e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006110:	2300      	movs	r3, #0
 8006112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006114:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006118:	460b      	mov	r3, r1
 800611a:	4313      	orrs	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800611e:	4b92      	ldr	r3, [pc, #584]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006122:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800612c:	4a8e      	ldr	r2, [pc, #568]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800612e:	430b      	orrs	r3, r1
 8006130:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800613e:	643b      	str	r3, [r7, #64]	; 0x40
 8006140:	2300      	movs	r3, #0
 8006142:	647b      	str	r3, [r7, #68]	; 0x44
 8006144:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006148:	460b      	mov	r3, r1
 800614a:	4313      	orrs	r3, r2
 800614c:	d00e      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800614e:	4b86      	ldr	r3, [pc, #536]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	4a85      	ldr	r2, [pc, #532]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006154:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006158:	6113      	str	r3, [r2, #16]
 800615a:	4b83      	ldr	r3, [pc, #524]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800615c:	6919      	ldr	r1, [r3, #16]
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006162:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006166:	4a80      	ldr	r2, [pc, #512]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006168:	430b      	orrs	r3, r1
 800616a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800616c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006178:	63bb      	str	r3, [r7, #56]	; 0x38
 800617a:	2300      	movs	r3, #0
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800617e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006182:	460b      	mov	r3, r1
 8006184:	4313      	orrs	r3, r2
 8006186:	d009      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006188:	4b77      	ldr	r3, [pc, #476]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800618a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006196:	4a74      	ldr	r2, [pc, #464]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006198:	430b      	orrs	r3, r1
 800619a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80061a8:	633b      	str	r3, [r7, #48]	; 0x30
 80061aa:	2300      	movs	r3, #0
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
 80061ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80061b2:	460b      	mov	r3, r1
 80061b4:	4313      	orrs	r3, r2
 80061b6:	d00a      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061b8:	4b6b      	ldr	r3, [pc, #428]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061bc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80061c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c8:	4a67      	ldr	r2, [pc, #412]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061ca:	430b      	orrs	r3, r1
 80061cc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80061ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	2100      	movs	r1, #0
 80061d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80061e4:	460b      	mov	r3, r1
 80061e6:	4313      	orrs	r3, r2
 80061e8:	d011      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ee:	3308      	adds	r3, #8
 80061f0:	2100      	movs	r1, #0
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 f8ba 	bl	800636c <RCCEx_PLL2_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80061fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800620a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	2100      	movs	r1, #0
 8006218:	6239      	str	r1, [r7, #32]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
 8006220:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006224:	460b      	mov	r3, r1
 8006226:	4313      	orrs	r3, r2
 8006228:	d011      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622e:	3308      	adds	r3, #8
 8006230:	2101      	movs	r1, #1
 8006232:	4618      	mov	r0, r3
 8006234:	f000 f89a 	bl	800636c <RCCEx_PLL2_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800623e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800624a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	2100      	movs	r1, #0
 8006258:	61b9      	str	r1, [r7, #24]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	61fb      	str	r3, [r7, #28]
 8006260:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006264:	460b      	mov	r3, r1
 8006266:	4313      	orrs	r3, r2
 8006268:	d011      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626e:	3308      	adds	r3, #8
 8006270:	2102      	movs	r1, #2
 8006272:	4618      	mov	r0, r3
 8006274:	f000 f87a 	bl	800636c <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800627e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800628a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800628e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	2100      	movs	r1, #0
 8006298:	6139      	str	r1, [r7, #16]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80062a4:	460b      	mov	r3, r1
 80062a6:	4313      	orrs	r3, r2
 80062a8:	d011      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ae:	3328      	adds	r3, #40	; 0x28
 80062b0:	2100      	movs	r1, #0
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f90c 	bl	80064d0 <RCCEx_PLL3_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80062be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	2100      	movs	r1, #0
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	f003 0310 	and.w	r3, r3, #16
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80062e4:	460b      	mov	r3, r1
 80062e6:	4313      	orrs	r3, r2
 80062e8:	d011      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ee:	3328      	adds	r3, #40	; 0x28
 80062f0:	2101      	movs	r1, #1
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 f8ec 	bl	80064d0 <RCCEx_PLL3_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80062fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800630a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	2100      	movs	r1, #0
 8006318:	6039      	str	r1, [r7, #0]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	607b      	str	r3, [r7, #4]
 8006320:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006324:	460b      	mov	r3, r1
 8006326:	4313      	orrs	r3, r2
 8006328:	d011      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800632a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800632e:	3328      	adds	r3, #40	; 0x28
 8006330:	2102      	movs	r1, #2
 8006332:	4618      	mov	r0, r3
 8006334:	f000 f8cc 	bl	80064d0 <RCCEx_PLL3_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800633e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800634a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800634e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	e000      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
}
 800635c:	4618      	mov	r0, r3
 800635e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006362:	46bd      	mov	sp, r7
 8006364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006368:	58024400 	.word	0x58024400

0800636c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800637a:	4b53      	ldr	r3, [pc, #332]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	2b03      	cmp	r3, #3
 8006384:	d101      	bne.n	800638a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e099      	b.n	80064be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800638a:	4b4f      	ldr	r3, [pc, #316]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a4e      	ldr	r2, [pc, #312]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006390:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006396:	f7fb fadf 	bl	8001958 <HAL_GetTick>
 800639a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800639c:	e008      	b.n	80063b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800639e:	f7fb fadb 	bl	8001958 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e086      	b.n	80064be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063b0:	4b45      	ldr	r3, [pc, #276]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1f0      	bne.n	800639e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80063bc:	4b42      	ldr	r3, [pc, #264]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 80063be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	031b      	lsls	r3, r3, #12
 80063ca:	493f      	ldr	r1, [pc, #252]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	628b      	str	r3, [r1, #40]	; 0x28
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	3b01      	subs	r3, #1
 80063e0:	025b      	lsls	r3, r3, #9
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	041b      	lsls	r3, r3, #16
 80063ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	061b      	lsls	r3, r3, #24
 80063fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006400:	4931      	ldr	r1, [pc, #196]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006402:	4313      	orrs	r3, r2
 8006404:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006406:	4b30      	ldr	r3, [pc, #192]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	492d      	ldr	r1, [pc, #180]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006414:	4313      	orrs	r3, r2
 8006416:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006418:	4b2b      	ldr	r3, [pc, #172]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	f023 0220 	bic.w	r2, r3, #32
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	4928      	ldr	r1, [pc, #160]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006426:	4313      	orrs	r3, r2
 8006428:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800642a:	4b27      	ldr	r3, [pc, #156]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	4a26      	ldr	r2, [pc, #152]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006430:	f023 0310 	bic.w	r3, r3, #16
 8006434:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006436:	4b24      	ldr	r3, [pc, #144]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800643a:	4b24      	ldr	r3, [pc, #144]	; (80064cc <RCCEx_PLL2_Config+0x160>)
 800643c:	4013      	ands	r3, r2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	69d2      	ldr	r2, [r2, #28]
 8006442:	00d2      	lsls	r2, r2, #3
 8006444:	4920      	ldr	r1, [pc, #128]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006446:	4313      	orrs	r3, r2
 8006448:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800644a:	4b1f      	ldr	r3, [pc, #124]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	4a1e      	ldr	r2, [pc, #120]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006450:	f043 0310 	orr.w	r3, r3, #16
 8006454:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d106      	bne.n	800646a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800645c:	4b1a      	ldr	r3, [pc, #104]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	4a19      	ldr	r2, [pc, #100]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006466:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006468:	e00f      	b.n	800648a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d106      	bne.n	800647e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006470:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	4a14      	ldr	r2, [pc, #80]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800647a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800647c:	e005      	b.n	800648a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800647e:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006482:	4a11      	ldr	r2, [pc, #68]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006488:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800648a:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a0e      	ldr	r2, [pc, #56]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 8006490:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006496:	f7fb fa5f 	bl	8001958 <HAL_GetTick>
 800649a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800649c:	e008      	b.n	80064b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800649e:	f7fb fa5b 	bl	8001958 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d901      	bls.n	80064b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e006      	b.n	80064be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064b0:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <RCCEx_PLL2_Config+0x15c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0f0      	beq.n	800649e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	58024400 	.word	0x58024400
 80064cc:	ffff0007 	.word	0xffff0007

080064d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064de:	4b53      	ldr	r3, [pc, #332]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d101      	bne.n	80064ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e099      	b.n	8006622 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80064ee:	4b4f      	ldr	r3, [pc, #316]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a4e      	ldr	r2, [pc, #312]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80064f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064fa:	f7fb fa2d 	bl	8001958 <HAL_GetTick>
 80064fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006500:	e008      	b.n	8006514 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006502:	f7fb fa29 	bl	8001958 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e086      	b.n	8006622 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006514:	4b45      	ldr	r3, [pc, #276]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f0      	bne.n	8006502 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006520:	4b42      	ldr	r3, [pc, #264]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	051b      	lsls	r3, r3, #20
 800652e:	493f      	ldr	r1, [pc, #252]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 8006530:	4313      	orrs	r3, r2
 8006532:	628b      	str	r3, [r1, #40]	; 0x28
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	3b01      	subs	r3, #1
 800653a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	3b01      	subs	r3, #1
 8006544:	025b      	lsls	r3, r3, #9
 8006546:	b29b      	uxth	r3, r3
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	3b01      	subs	r3, #1
 8006550:	041b      	lsls	r3, r3, #16
 8006552:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	3b01      	subs	r3, #1
 800655e:	061b      	lsls	r3, r3, #24
 8006560:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006564:	4931      	ldr	r1, [pc, #196]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 8006566:	4313      	orrs	r3, r2
 8006568:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800656a:	4b30      	ldr	r3, [pc, #192]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	492d      	ldr	r1, [pc, #180]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 8006578:	4313      	orrs	r3, r2
 800657a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800657c:	4b2b      	ldr	r3, [pc, #172]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	4928      	ldr	r1, [pc, #160]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 800658a:	4313      	orrs	r3, r2
 800658c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800658e:	4b27      	ldr	r3, [pc, #156]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	4a26      	ldr	r2, [pc, #152]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 8006594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006598:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800659a:	4b24      	ldr	r3, [pc, #144]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 800659c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <RCCEx_PLL3_Config+0x160>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	69d2      	ldr	r2, [r2, #28]
 80065a6:	00d2      	lsls	r2, r2, #3
 80065a8:	4920      	ldr	r1, [pc, #128]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80065ae:	4b1f      	ldr	r3, [pc, #124]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80065b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b2:	4a1e      	ldr	r2, [pc, #120]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80065b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d106      	bne.n	80065ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80065c0:	4b1a      	ldr	r3, [pc, #104]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	4a19      	ldr	r2, [pc, #100]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80065c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065cc:	e00f      	b.n	80065ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d106      	bne.n	80065e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80065d4:	4b15      	ldr	r3, [pc, #84]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	4a14      	ldr	r2, [pc, #80]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80065da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065e0:	e005      	b.n	80065ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	4a11      	ldr	r2, [pc, #68]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80065e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80065ee:	4b0f      	ldr	r3, [pc, #60]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a0e      	ldr	r2, [pc, #56]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 80065f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065fa:	f7fb f9ad 	bl	8001958 <HAL_GetTick>
 80065fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006600:	e008      	b.n	8006614 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006602:	f7fb f9a9 	bl	8001958 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e006      	b.n	8006622 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <RCCEx_PLL3_Config+0x15c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0f0      	beq.n	8006602 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	58024400 	.word	0x58024400
 8006630:	ffff0007 	.word	0xffff0007

08006634 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006634:	b084      	sub	sp, #16
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	f107 001c 	add.w	r0, r7, #28
 8006642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	2b01      	cmp	r3, #1
 800664a:	d120      	bne.n	800668e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	4b2a      	ldr	r3, [pc, #168]	; (8006708 <USB_CoreInit+0xd4>)
 800665e:	4013      	ands	r3, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d105      	bne.n	8006682 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 fa1c 	bl	8007ac0 <USB_CoreReset>
 8006688:	4603      	mov	r3, r0
 800668a:	73fb      	strb	r3, [r7, #15]
 800668c:	e01a      	b.n	80066c4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 fa10 	bl	8007ac0 <USB_CoreReset>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
 80066b6:	e005      	b.n	80066c4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d116      	bne.n	80066f8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <USB_CoreInit+0xd8>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f043 0206 	orr.w	r2, r3, #6
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f043 0220 	orr.w	r2, r3, #32
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006704:	b004      	add	sp, #16
 8006706:	4770      	bx	lr
 8006708:	ffbdffbf 	.word	0xffbdffbf
 800670c:	03ee0000 	.word	0x03ee0000

08006710 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d165      	bne.n	80067f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4a41      	ldr	r2, [pc, #260]	; (800682c <USB_SetTurnaroundTime+0x11c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d906      	bls.n	800673a <USB_SetTurnaroundTime+0x2a>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4a40      	ldr	r2, [pc, #256]	; (8006830 <USB_SetTurnaroundTime+0x120>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d202      	bcs.n	800673a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006734:	230f      	movs	r3, #15
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e062      	b.n	8006800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4a3c      	ldr	r2, [pc, #240]	; (8006830 <USB_SetTurnaroundTime+0x120>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d306      	bcc.n	8006750 <USB_SetTurnaroundTime+0x40>
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	4a3b      	ldr	r2, [pc, #236]	; (8006834 <USB_SetTurnaroundTime+0x124>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d202      	bcs.n	8006750 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800674a:	230e      	movs	r3, #14
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	e057      	b.n	8006800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4a38      	ldr	r2, [pc, #224]	; (8006834 <USB_SetTurnaroundTime+0x124>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d306      	bcc.n	8006766 <USB_SetTurnaroundTime+0x56>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4a37      	ldr	r2, [pc, #220]	; (8006838 <USB_SetTurnaroundTime+0x128>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d202      	bcs.n	8006766 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006760:	230d      	movs	r3, #13
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	e04c      	b.n	8006800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	4a33      	ldr	r2, [pc, #204]	; (8006838 <USB_SetTurnaroundTime+0x128>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d306      	bcc.n	800677c <USB_SetTurnaroundTime+0x6c>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	4a32      	ldr	r2, [pc, #200]	; (800683c <USB_SetTurnaroundTime+0x12c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d802      	bhi.n	800677c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006776:	230c      	movs	r3, #12
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	e041      	b.n	8006800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4a2f      	ldr	r2, [pc, #188]	; (800683c <USB_SetTurnaroundTime+0x12c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d906      	bls.n	8006792 <USB_SetTurnaroundTime+0x82>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4a2e      	ldr	r2, [pc, #184]	; (8006840 <USB_SetTurnaroundTime+0x130>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d802      	bhi.n	8006792 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800678c:	230b      	movs	r3, #11
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	e036      	b.n	8006800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	4a2a      	ldr	r2, [pc, #168]	; (8006840 <USB_SetTurnaroundTime+0x130>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d906      	bls.n	80067a8 <USB_SetTurnaroundTime+0x98>
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	4a29      	ldr	r2, [pc, #164]	; (8006844 <USB_SetTurnaroundTime+0x134>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d802      	bhi.n	80067a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80067a2:	230a      	movs	r3, #10
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	e02b      	b.n	8006800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4a26      	ldr	r2, [pc, #152]	; (8006844 <USB_SetTurnaroundTime+0x134>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d906      	bls.n	80067be <USB_SetTurnaroundTime+0xae>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	4a25      	ldr	r2, [pc, #148]	; (8006848 <USB_SetTurnaroundTime+0x138>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d202      	bcs.n	80067be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80067b8:	2309      	movs	r3, #9
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	e020      	b.n	8006800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4a21      	ldr	r2, [pc, #132]	; (8006848 <USB_SetTurnaroundTime+0x138>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d306      	bcc.n	80067d4 <USB_SetTurnaroundTime+0xc4>
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	4a20      	ldr	r2, [pc, #128]	; (800684c <USB_SetTurnaroundTime+0x13c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d802      	bhi.n	80067d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80067ce:	2308      	movs	r3, #8
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	e015      	b.n	8006800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4a1d      	ldr	r2, [pc, #116]	; (800684c <USB_SetTurnaroundTime+0x13c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d906      	bls.n	80067ea <USB_SetTurnaroundTime+0xda>
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4a1c      	ldr	r2, [pc, #112]	; (8006850 <USB_SetTurnaroundTime+0x140>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d202      	bcs.n	80067ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80067e4:	2307      	movs	r3, #7
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	e00a      	b.n	8006800 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80067ea:	2306      	movs	r3, #6
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	e007      	b.n	8006800 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80067f6:	2309      	movs	r3, #9
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	e001      	b.n	8006800 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80067fc:	2309      	movs	r3, #9
 80067fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	029b      	lsls	r3, r3, #10
 8006814:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006818:	431a      	orrs	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	00d8acbf 	.word	0x00d8acbf
 8006830:	00e4e1c0 	.word	0x00e4e1c0
 8006834:	00f42400 	.word	0x00f42400
 8006838:	01067380 	.word	0x01067380
 800683c:	011a499f 	.word	0x011a499f
 8006840:	01312cff 	.word	0x01312cff
 8006844:	014ca43f 	.word	0x014ca43f
 8006848:	016e3600 	.word	0x016e3600
 800684c:	01a6ab1f 	.word	0x01a6ab1f
 8006850:	01e84800 	.word	0x01e84800

08006854 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f043 0201 	orr.w	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f023 0201 	bic.w	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d115      	bne.n	80068e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068c6:	2001      	movs	r0, #1
 80068c8:	f7fb f852 	bl	8001970 <HAL_Delay>
      ms++;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3301      	adds	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f001 f863 	bl	800799e <USB_GetMode>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d01e      	beq.n	800691c <USB_SetCurrentMode+0x84>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b31      	cmp	r3, #49	; 0x31
 80068e2:	d9f0      	bls.n	80068c6 <USB_SetCurrentMode+0x2e>
 80068e4:	e01a      	b.n	800691c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068e6:	78fb      	ldrb	r3, [r7, #3]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d115      	bne.n	8006918 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068f8:	2001      	movs	r0, #1
 80068fa:	f7fb f839 	bl	8001970 <HAL_Delay>
      ms++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 f84a 	bl	800799e <USB_GetMode>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d005      	beq.n	800691c <USB_SetCurrentMode+0x84>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b31      	cmp	r3, #49	; 0x31
 8006914:	d9f0      	bls.n	80068f8 <USB_SetCurrentMode+0x60>
 8006916:	e001      	b.n	800691c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e005      	b.n	8006928 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b32      	cmp	r3, #50	; 0x32
 8006920:	d101      	bne.n	8006926 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006930:	b084      	sub	sp, #16
 8006932:	b580      	push	{r7, lr}
 8006934:	b086      	sub	sp, #24
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800693e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800694a:	2300      	movs	r3, #0
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	e009      	b.n	8006964 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	3340      	adds	r3, #64	; 0x40
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	2200      	movs	r2, #0
 800695c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3301      	adds	r3, #1
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b0e      	cmp	r3, #14
 8006968:	d9f2      	bls.n	8006950 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800696a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11c      	bne.n	80069aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800697e:	f043 0302 	orr.w	r3, r3, #2
 8006982:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	e005      	b.n	80069b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069bc:	461a      	mov	r2, r3
 80069be:	2300      	movs	r3, #0
 80069c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c8:	4619      	mov	r1, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d0:	461a      	mov	r2, r3
 80069d2:	680b      	ldr	r3, [r1, #0]
 80069d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d10c      	bne.n	80069f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069e2:	2100      	movs	r1, #0
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f965 	bl	8006cb4 <USB_SetDevSpeed>
 80069ea:	e008      	b.n	80069fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069ec:	2101      	movs	r1, #1
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f960 	bl	8006cb4 <USB_SetDevSpeed>
 80069f4:	e003      	b.n	80069fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069f6:	2103      	movs	r1, #3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f95b 	bl	8006cb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069fe:	2110      	movs	r1, #16
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f8f3 	bl	8006bec <USB_FlushTxFifo>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f91f 	bl	8006c54 <USB_FlushRxFifo>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a26:	461a      	mov	r2, r3
 8006a28:	2300      	movs	r3, #0
 8006a2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a32:	461a      	mov	r2, r3
 8006a34:	2300      	movs	r3, #0
 8006a36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3e:	461a      	mov	r2, r3
 8006a40:	2300      	movs	r3, #0
 8006a42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a44:	2300      	movs	r3, #0
 8006a46:	613b      	str	r3, [r7, #16]
 8006a48:	e043      	b.n	8006ad2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a60:	d118      	bne.n	8006a94 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	461a      	mov	r2, r3
 8006a76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	e013      	b.n	8006aa6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	e008      	b.n	8006aa6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006aca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d3b7      	bcc.n	8006a4a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ada:	2300      	movs	r3, #0
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	e043      	b.n	8006b68 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af6:	d118      	bne.n	8006b2a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	e013      	b.n	8006b3c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b20:	461a      	mov	r2, r3
 8006b22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	e008      	b.n	8006b3c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b36:	461a      	mov	r2, r3
 8006b38:	2300      	movs	r3, #0
 8006b3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b48:	461a      	mov	r2, r3
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	3301      	adds	r3, #1
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d3b7      	bcc.n	8006ae0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d105      	bne.n	8006ba4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	f043 0210 	orr.w	r2, r3, #16
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <USB_DevInit+0x2b4>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d005      	beq.n	8006bc2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	f043 0208 	orr.w	r2, r3, #8
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d105      	bne.n	8006bd4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <USB_DevInit+0x2b8>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006be0:	b004      	add	sp, #16
 8006be2:	4770      	bx	lr
 8006be4:	803c3800 	.word	0x803c3800
 8006be8:	40000004 	.word	0x40000004

08006bec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4a13      	ldr	r2, [pc, #76]	; (8006c50 <USB_FlushTxFifo+0x64>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d901      	bls.n	8006c0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e01b      	b.n	8006c44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	daf2      	bge.n	8006bfa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	019b      	lsls	r3, r3, #6
 8006c1c:	f043 0220 	orr.w	r2, r3, #32
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4a08      	ldr	r2, [pc, #32]	; (8006c50 <USB_FlushTxFifo+0x64>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d901      	bls.n	8006c36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e006      	b.n	8006c44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	2b20      	cmp	r3, #32
 8006c40:	d0f0      	beq.n	8006c24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	00030d40 	.word	0x00030d40

08006c54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a11      	ldr	r2, [pc, #68]	; (8006cb0 <USB_FlushRxFifo+0x5c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d901      	bls.n	8006c72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e018      	b.n	8006ca4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	daf2      	bge.n	8006c60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2210      	movs	r2, #16
 8006c82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3301      	adds	r3, #1
 8006c88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4a08      	ldr	r2, [pc, #32]	; (8006cb0 <USB_FlushRxFifo+0x5c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d901      	bls.n	8006c96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e006      	b.n	8006ca4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d0f0      	beq.n	8006c84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	00030d40 	.word	0x00030d40

08006cb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b087      	sub	sp, #28
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 0306 	and.w	r3, r3, #6
 8006cfe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d102      	bne.n	8006d0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006d06:	2300      	movs	r3, #0
 8006d08:	75fb      	strb	r3, [r7, #23]
 8006d0a:	e00a      	b.n	8006d22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d002      	beq.n	8006d18 <USB_GetDevSpeed+0x32>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b06      	cmp	r3, #6
 8006d16:	d102      	bne.n	8006d1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	75fb      	strb	r3, [r7, #23]
 8006d1c:	e001      	b.n	8006d22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006d1e:	230f      	movs	r3, #15
 8006d20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	785b      	ldrb	r3, [r3, #1]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d139      	bne.n	8006dc0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	68f9      	ldr	r1, [r7, #12]
 8006d66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d153      	bne.n	8006e2c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	791b      	ldrb	r3, [r3, #4]
 8006d9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006da0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	059b      	lsls	r3, r3, #22
 8006da6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006da8:	431a      	orrs	r2, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	0159      	lsls	r1, r3, #5
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	440b      	add	r3, r1
 8006db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db6:	4619      	mov	r1, r3
 8006db8:	4b20      	ldr	r3, [pc, #128]	; (8006e3c <USB_ActivateEndpoint+0x10c>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]
 8006dbe:	e035      	b.n	8006e2c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	f003 030f 	and.w	r3, r3, #15
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd6:	041b      	lsls	r3, r3, #16
 8006dd8:	68f9      	ldr	r1, [r7, #12]
 8006dda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dde:	4313      	orrs	r3, r2
 8006de0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d119      	bne.n	8006e2c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	791b      	ldrb	r3, [r3, #4]
 8006e12:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e14:	430b      	orrs	r3, r1
 8006e16:	431a      	orrs	r2, r3
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	0159      	lsls	r1, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	440b      	add	r3, r1
 8006e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e24:	4619      	mov	r1, r3
 8006e26:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <USB_ActivateEndpoint+0x10c>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	10008000 	.word	0x10008000

08006e40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	; 0x28
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	f040 8181 	bne.w	8007164 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d132      	bne.n	8006ed0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	0159      	lsls	r1, r3, #5
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	440b      	add	r3, r1
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	4619      	mov	r1, r3
 8006e86:	4ba5      	ldr	r3, [pc, #660]	; (800711c <USB_EPStartXfer+0x2dc>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006eaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb8:	691a      	ldr	r2, [r3, #16]
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	0159      	lsls	r1, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	440b      	add	r3, r1
 8006ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4b95      	ldr	r3, [pc, #596]	; (8007120 <USB_EPStartXfer+0x2e0>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	610b      	str	r3, [r1, #16]
 8006ece:	e092      	b.n	8006ff6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006edc:	691a      	ldr	r2, [r3, #16]
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	0159      	lsls	r1, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	440b      	add	r3, r1
 8006ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eea:	4619      	mov	r1, r3
 8006eec:	4b8c      	ldr	r3, [pc, #560]	; (8007120 <USB_EPStartXfer+0x2e0>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	0159      	lsls	r1, r3, #5
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	440b      	add	r3, r1
 8006f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4b83      	ldr	r3, [pc, #524]	; (800711c <USB_EPStartXfer+0x2dc>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d11a      	bne.n	8006f50 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d903      	bls.n	8006f2e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	0151      	lsls	r1, r2, #5
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	440a      	add	r2, r1
 8006f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f4c:	6113      	str	r3, [r2, #16]
 8006f4e:	e01b      	b.n	8006f88 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6919      	ldr	r1, [r3, #16]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	440b      	add	r3, r1
 8006f68:	1e59      	subs	r1, r3, #1
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f72:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f74:	4b6b      	ldr	r3, [pc, #428]	; (8007124 <USB_EPStartXfer+0x2e4>)
 8006f76:	400b      	ands	r3, r1
 8006f78:	69b9      	ldr	r1, [r7, #24]
 8006f7a:	0148      	lsls	r0, r1, #5
 8006f7c:	69f9      	ldr	r1, [r7, #28]
 8006f7e:	4401      	add	r1, r0
 8006f80:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f84:	4313      	orrs	r3, r2
 8006f86:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f94:	691a      	ldr	r2, [r3, #16]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f9e:	69b9      	ldr	r1, [r7, #24]
 8006fa0:	0148      	lsls	r0, r1, #5
 8006fa2:	69f9      	ldr	r1, [r7, #28]
 8006fa4:	4401      	add	r1, r0
 8006fa6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006faa:	4313      	orrs	r3, r2
 8006fac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	791b      	ldrb	r3, [r3, #4]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d11f      	bne.n	8006ff6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	69fa      	ldr	r2, [r7, #28]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006fd4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	0151      	lsls	r1, r2, #5
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	440a      	add	r2, r1
 8006fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ff4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d14b      	bne.n	8007094 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d009      	beq.n	8007018 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007010:	461a      	mov	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	791b      	ldrb	r3, [r3, #4]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d128      	bne.n	8007072 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d110      	bne.n	8007052 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	0151      	lsls	r1, r2, #5
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	440a      	add	r2, r1
 8007046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800704a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	e00f      	b.n	8007072 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	0151      	lsls	r1, r2, #5
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	440a      	add	r2, r1
 8007068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007070:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	0151      	lsls	r1, r2, #5
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	440a      	add	r2, r1
 8007088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	e16a      	b.n	800736a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	0151      	lsls	r1, r2, #5
 80070a6:	69fa      	ldr	r2, [r7, #28]
 80070a8:	440a      	add	r2, r1
 80070aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	791b      	ldrb	r3, [r3, #4]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d015      	beq.n	80070e8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8152 	beq.w	800736a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	2101      	movs	r1, #1
 80070d8:	fa01 f303 	lsl.w	r3, r1, r3
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070e2:	4313      	orrs	r3, r2
 80070e4:	634b      	str	r3, [r1, #52]	; 0x34
 80070e6:	e140      	b.n	800736a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d117      	bne.n	8007128 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	440a      	add	r2, r1
 800710e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007112:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	e016      	b.n	8007148 <USB_EPStartXfer+0x308>
 800711a:	bf00      	nop
 800711c:	e007ffff 	.word	0xe007ffff
 8007120:	fff80000 	.word	0xfff80000
 8007124:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007146:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	68d9      	ldr	r1, [r3, #12]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	781a      	ldrb	r2, [r3, #0]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	b298      	uxth	r0, r3
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	4603      	mov	r3, r0
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f9b9 	bl	80074d4 <USB_WritePacket>
 8007162:	e102      	b.n	800736a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	0159      	lsls	r1, r3, #5
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	440b      	add	r3, r1
 800717a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717e:	4619      	mov	r1, r3
 8007180:	4b7c      	ldr	r3, [pc, #496]	; (8007374 <USB_EPStartXfer+0x534>)
 8007182:	4013      	ands	r3, r2
 8007184:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007192:	691a      	ldr	r2, [r3, #16]
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	0159      	lsls	r1, r3, #5
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	440b      	add	r3, r1
 800719c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a0:	4619      	mov	r1, r3
 80071a2:	4b75      	ldr	r3, [pc, #468]	; (8007378 <USB_EPStartXfer+0x538>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d12f      	bne.n	800720e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071dc:	69b9      	ldr	r1, [r7, #24]
 80071de:	0148      	lsls	r0, r1, #5
 80071e0:	69f9      	ldr	r1, [r7, #28]
 80071e2:	4401      	add	r1, r0
 80071e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071e8:	4313      	orrs	r3, r2
 80071ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	0151      	lsls	r1, r2, #5
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	440a      	add	r2, r1
 8007202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007206:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800720a:	6113      	str	r3, [r2, #16]
 800720c:	e05f      	b.n	80072ce <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d123      	bne.n	800725e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800722c:	69b9      	ldr	r1, [r7, #24]
 800722e:	0148      	lsls	r0, r1, #5
 8007230:	69f9      	ldr	r1, [r7, #28]
 8007232:	4401      	add	r1, r0
 8007234:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007238:	4313      	orrs	r3, r2
 800723a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800725a:	6113      	str	r3, [r2, #16]
 800725c:	e037      	b.n	80072ce <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691a      	ldr	r2, [r3, #16]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	4413      	add	r3, r2
 8007268:	1e5a      	subs	r2, r3, #1
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007272:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	8afa      	ldrh	r2, [r7, #22]
 800727a:	fb03 f202 	mul.w	r2, r3, r2
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	8afb      	ldrh	r3, [r7, #22]
 8007292:	04d9      	lsls	r1, r3, #19
 8007294:	4b39      	ldr	r3, [pc, #228]	; (800737c <USB_EPStartXfer+0x53c>)
 8007296:	400b      	ands	r3, r1
 8007298:	69b9      	ldr	r1, [r7, #24]
 800729a:	0148      	lsls	r0, r1, #5
 800729c:	69f9      	ldr	r1, [r7, #28]
 800729e:	4401      	add	r1, r0
 80072a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072a4:	4313      	orrs	r3, r2
 80072a6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b4:	691a      	ldr	r2, [r3, #16]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072be:	69b9      	ldr	r1, [r7, #24]
 80072c0:	0148      	lsls	r0, r1, #5
 80072c2:	69f9      	ldr	r1, [r7, #28]
 80072c4:	4401      	add	r1, r0
 80072c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072ca:	4313      	orrs	r3, r2
 80072cc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d10d      	bne.n	80072f0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d009      	beq.n	80072f0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	68d9      	ldr	r1, [r3, #12]
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ec:	460a      	mov	r2, r1
 80072ee:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	791b      	ldrb	r3, [r3, #4]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d128      	bne.n	800734a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007304:	2b00      	cmp	r3, #0
 8007306:	d110      	bne.n	800732a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	0151      	lsls	r1, r2, #5
 800731a:	69fa      	ldr	r2, [r7, #28]
 800731c:	440a      	add	r2, r1
 800731e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007322:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	e00f      	b.n	800734a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	0151      	lsls	r1, r2, #5
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	440a      	add	r2, r1
 8007340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007348:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	0151      	lsls	r1, r2, #5
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	440a      	add	r2, r1
 8007360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007364:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007368:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3720      	adds	r7, #32
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	fff80000 	.word	0xfff80000
 8007378:	e007ffff 	.word	0xe007ffff
 800737c:	1ff80000 	.word	0x1ff80000

08007380 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	785b      	ldrb	r3, [r3, #1]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d14a      	bne.n	8007434 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073b6:	f040 8086 	bne.w	80074c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	7812      	ldrb	r2, [r2, #0]
 80073f2:	0151      	lsls	r1, r2, #5
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	440a      	add	r2, r1
 80073f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007400:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3301      	adds	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f242 7210 	movw	r2, #10000	; 0x2710
 800740e:	4293      	cmp	r3, r2
 8007410:	d902      	bls.n	8007418 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	75fb      	strb	r3, [r7, #23]
          break;
 8007416:	e056      	b.n	80074c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800742c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007430:	d0e7      	beq.n	8007402 <USB_EPStopXfer+0x82>
 8007432:	e048      	b.n	80074c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800744c:	d13b      	bne.n	80074c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	7812      	ldrb	r2, [r2, #0]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800746c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007470:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	7812      	ldrb	r2, [r2, #0]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007490:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007494:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3301      	adds	r3, #1
 800749a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f242 7210 	movw	r2, #10000	; 0x2710
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d902      	bls.n	80074ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	75fb      	strb	r3, [r7, #23]
          break;
 80074aa:	e00c      	b.n	80074c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074c4:	d0e7      	beq.n	8007496 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b089      	sub	sp, #36	; 0x24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	4611      	mov	r1, r2
 80074e0:	461a      	mov	r2, r3
 80074e2:	460b      	mov	r3, r1
 80074e4:	71fb      	strb	r3, [r7, #7]
 80074e6:	4613      	mov	r3, r2
 80074e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d123      	bne.n	8007542 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074fa:	88bb      	ldrh	r3, [r7, #4]
 80074fc:	3303      	adds	r3, #3
 80074fe:	089b      	lsrs	r3, r3, #2
 8007500:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007502:	2300      	movs	r3, #0
 8007504:	61bb      	str	r3, [r7, #24]
 8007506:	e018      	b.n	800753a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	031a      	lsls	r2, r3, #12
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	4413      	add	r3, r2
 8007510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007514:	461a      	mov	r2, r3
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	3301      	adds	r3, #1
 8007520:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	3301      	adds	r3, #1
 8007526:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	3301      	adds	r3, #1
 800752c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	3301      	adds	r3, #1
 8007532:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	3301      	adds	r3, #1
 8007538:	61bb      	str	r3, [r7, #24]
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	429a      	cmp	r2, r3
 8007540:	d3e2      	bcc.n	8007508 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3724      	adds	r7, #36	; 0x24
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007550:	b480      	push	{r7}
 8007552:	b08b      	sub	sp, #44	; 0x2c
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007566:	88fb      	ldrh	r3, [r7, #6]
 8007568:	089b      	lsrs	r3, r3, #2
 800756a:	b29b      	uxth	r3, r3
 800756c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800756e:	88fb      	ldrh	r3, [r7, #6]
 8007570:	f003 0303 	and.w	r3, r3, #3
 8007574:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007576:	2300      	movs	r3, #0
 8007578:	623b      	str	r3, [r7, #32]
 800757a:	e014      	b.n	80075a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	601a      	str	r2, [r3, #0]
    pDest++;
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	3301      	adds	r3, #1
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	3301      	adds	r3, #1
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	3301      	adds	r3, #1
 8007598:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	3301      	adds	r3, #1
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	3301      	adds	r3, #1
 80075a4:	623b      	str	r3, [r7, #32]
 80075a6:	6a3a      	ldr	r2, [r7, #32]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d3e6      	bcc.n	800757c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075ae:	8bfb      	ldrh	r3, [r7, #30]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01e      	beq.n	80075f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075be:	461a      	mov	r2, r3
 80075c0:	f107 0310 	add.w	r3, r7, #16
 80075c4:	6812      	ldr	r2, [r2, #0]
 80075c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	fa22 f303 	lsr.w	r3, r2, r3
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	701a      	strb	r2, [r3, #0]
      i++;
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	3301      	adds	r3, #1
 80075de:	623b      	str	r3, [r7, #32]
      pDest++;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	3301      	adds	r3, #1
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80075e6:	8bfb      	ldrh	r3, [r7, #30]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075ec:	8bfb      	ldrh	r3, [r7, #30]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1ea      	bne.n	80075c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	372c      	adds	r7, #44	; 0x2c
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d12c      	bne.n	8007676 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	db12      	blt.n	8007654 <USB_EPSetStall+0x54>
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00f      	beq.n	8007654 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	440a      	add	r2, r1
 800764a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800764e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007652:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	440a      	add	r2, r1
 800766a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800766e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	e02b      	b.n	80076ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	db12      	blt.n	80076ae <USB_EPSetStall+0xae>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00f      	beq.n	80076ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	0151      	lsls	r1, r2, #5
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	440a      	add	r2, r1
 80076a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	0151      	lsls	r1, r2, #5
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	440a      	add	r2, r1
 80076c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	785b      	ldrb	r3, [r3, #1]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d128      	bne.n	800774a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	0151      	lsls	r1, r2, #5
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	440a      	add	r2, r1
 800770e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007712:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007716:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	791b      	ldrb	r3, [r3, #4]
 800771c:	2b03      	cmp	r3, #3
 800771e:	d003      	beq.n	8007728 <USB_EPClearStall+0x4c>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	791b      	ldrb	r3, [r3, #4]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d138      	bne.n	800779a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	440a      	add	r2, r1
 800773e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	e027      	b.n	800779a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	0151      	lsls	r1, r2, #5
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	440a      	add	r2, r1
 8007760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007764:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007768:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	791b      	ldrb	r3, [r3, #4]
 800776e:	2b03      	cmp	r3, #3
 8007770:	d003      	beq.n	800777a <USB_EPClearStall+0x9e>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	791b      	ldrb	r3, [r3, #4]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d10f      	bne.n	800779a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	0151      	lsls	r1, r2, #5
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	440a      	add	r2, r1
 8007790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007798:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80077ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80077dc:	68f9      	ldr	r1, [r7, #12]
 80077de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077e2:	4313      	orrs	r3, r2
 80077e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800780e:	f023 0303 	bic.w	r3, r3, #3
 8007812:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007822:	f023 0302 	bic.w	r3, r3, #2
 8007826:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007850:	f023 0303 	bic.w	r3, r3, #3
 8007854:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007864:	f043 0302 	orr.w	r3, r3, #2
 8007868:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4013      	ands	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007890:	68fb      	ldr	r3, [r7, #12]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	4013      	ands	r3, r2
 80078c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	0c1b      	lsrs	r3, r3, #16
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b085      	sub	sp, #20
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	4013      	ands	r3, r2
 80078f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	b29b      	uxth	r3, r3
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007906:	b480      	push	{r7}
 8007908:	b085      	sub	sp, #20
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007916:	78fb      	ldrb	r3, [r7, #3]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	4013      	ands	r3, r2
 8007932:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007934:	68bb      	ldr	r3, [r7, #8]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007942:	b480      	push	{r7}
 8007944:	b087      	sub	sp, #28
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007964:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007966:	78fb      	ldrb	r3, [r7, #3]
 8007968:	f003 030f 	and.w	r3, r3, #15
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	fa22 f303 	lsr.w	r3, r2, r3
 8007972:	01db      	lsls	r3, r3, #7
 8007974:	b2db      	uxtb	r3, r3
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	4313      	orrs	r3, r2
 800797a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800797c:	78fb      	ldrb	r3, [r7, #3]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4013      	ands	r3, r2
 800798e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007990:	68bb      	ldr	r3, [r7, #8]
}
 8007992:	4618      	mov	r0, r3
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f003 0301 	and.w	r3, r3, #1
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
	...

080079bc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d6:	4619      	mov	r1, r3
 80079d8:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <USB_ActivateSetup+0x44>)
 80079da:	4013      	ands	r3, r2
 80079dc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	fffff800 	.word	0xfffff800

08007a04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	333c      	adds	r3, #60	; 0x3c
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	4a26      	ldr	r2, [pc, #152]	; (8007abc <USB_EP0_OutStart+0xb8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d90a      	bls.n	8007a3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a38:	d101      	bne.n	8007a3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	e037      	b.n	8007aae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a44:	461a      	mov	r2, r3
 8007a46:	2300      	movs	r3, #0
 8007a48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a6c:	f043 0318 	orr.w	r3, r3, #24
 8007a70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a86:	7afb      	ldrb	r3, [r7, #11]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d10f      	bne.n	8007aac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a92:	461a      	mov	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007aaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	4f54300a 	.word	0x4f54300a

08007ac0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4a13      	ldr	r2, [pc, #76]	; (8007b24 <USB_CoreReset+0x64>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d901      	bls.n	8007ade <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e01b      	b.n	8007b16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	daf2      	bge.n	8007acc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f043 0201 	orr.w	r2, r3, #1
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3301      	adds	r3, #1
 8007afa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <USB_CoreReset+0x64>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d901      	bls.n	8007b08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e006      	b.n	8007b16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d0f0      	beq.n	8007af6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	00030d40 	.word	0x00030d40

08007b28 <__NVIC_SystemReset>:
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007b2c:	f3bf 8f4f 	dsb	sy
}
 8007b30:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007b32:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <__NVIC_SystemReset+0x24>)
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007b3a:	4904      	ldr	r1, [pc, #16]	; (8007b4c <__NVIC_SystemReset+0x24>)
 8007b3c:	4b04      	ldr	r3, [pc, #16]	; (8007b50 <__NVIC_SystemReset+0x28>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007b42:	f3bf 8f4f 	dsb	sy
}
 8007b46:	bf00      	nop
    __NOP();
 8007b48:	bf00      	nop
 8007b4a:	e7fd      	b.n	8007b48 <__NVIC_SystemReset+0x20>
 8007b4c:	e000ed00 	.word	0xe000ed00
 8007b50:	05fa0004 	.word	0x05fa0004

08007b54 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8007b60:	f240 401c 	movw	r0, #1052	; 0x41c
 8007b64:	f002 fe2c 	bl	800a7c0 <USBD_static_malloc>
 8007b68:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d109      	bne.n	8007b84 <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	32b0      	adds	r2, #176	; 0xb0
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b80:	2302      	movs	r3, #2
 8007b82:	e052      	b.n	8007c2a <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32b0      	adds	r2, #176	; 0xb0
 8007b8e:	68f9      	ldr	r1, [r7, #12]
 8007b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	32b0      	adds	r2, #176	; 0xb0
 8007b9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007bb6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	33b0      	adds	r3, #176	; 0xb0
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	4798      	blx	r3
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e000      	b.n	8007c2a <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	32b0      	adds	r2, #176	; 0xb0
 8007c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 8007c50:	2302      	movs	r3, #2
 8007c52:	e03c      	b.n	8007cce <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	32b0      	adds	r2, #176	; 0xb0
 8007c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c62:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2202      	movs	r2, #2
 8007c88:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	33b0      	adds	r3, #176	; 0xb0
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	32b0      	adds	r2, #176	; 0xb0
 8007caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f002 fd94 	bl	800a7dc <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	32b0      	adds	r2, #176	; 0xb0
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	32b0      	adds	r2, #176	; 0xb0
 8007cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e0e8      	b.n	8007ed6 <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d03e      	beq.n	8007d8e <USBD_DFU_Setup+0xb6>
 8007d10:	2b20      	cmp	r3, #32
 8007d12:	f040 80d8 	bne.w	8007ec6 <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	785b      	ldrb	r3, [r3, #1]
 8007d1a:	2b06      	cmp	r3, #6
 8007d1c:	d82f      	bhi.n	8007d7e <USBD_DFU_Setup+0xa6>
 8007d1e:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <USBD_DFU_Setup+0x4c>)
 8007d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d24:	08007d75 	.word	0x08007d75
 8007d28:	08007d41 	.word	0x08007d41
 8007d2c:	08007d4b 	.word	0x08007d4b
 8007d30:	08007d55 	.word	0x08007d55
 8007d34:	08007d5d 	.word	0x08007d5d
 8007d38:	08007d65 	.word	0x08007d65
 8007d3c:	08007d6d 	.word	0x08007d6d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 faa0 	bl	8008288 <DFU_Download>
          break;
 8007d48:	e020      	b.n	8007d8c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fb11 	bl	8008374 <DFU_Upload>
          break;
 8007d52:	e01b      	b.n	8007d8c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fbf5 	bl	8008544 <DFU_GetStatus>
          break;
 8007d5a:	e017      	b.n	8007d8c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fcbd 	bl	80086dc <DFU_ClearStatus>
          break;
 8007d62:	e013      	b.n	8007d8c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fd11 	bl	800878c <DFU_GetState>
          break;
 8007d6a:	e00f      	b.n	8007d8c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fd29 	bl	80087c4 <DFU_Abort>
          break;
 8007d72:	e00b      	b.n	8007d8c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa16 	bl	80081a8 <DFU_Detach>
          break;
 8007d7c:	e006      	b.n	8007d8c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f002 f80c 	bl	8009d9e <USBD_CtlError>
          ret = USBD_FAIL;
 8007d86:	2303      	movs	r3, #3
 8007d88:	75fb      	strb	r3, [r7, #23]
          break;
 8007d8a:	bf00      	nop
      }
      break;
 8007d8c:	e0a2      	b.n	8007ed4 <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	785b      	ldrb	r3, [r3, #1]
 8007d92:	2b0b      	cmp	r3, #11
 8007d94:	f200 808c 	bhi.w	8007eb0 <USBD_DFU_Setup+0x1d8>
 8007d98:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <USBD_DFU_Setup+0xc8>)
 8007d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9e:	bf00      	nop
 8007da0:	08007dd1 	.word	0x08007dd1
 8007da4:	08007ebf 	.word	0x08007ebf
 8007da8:	08007eb1 	.word	0x08007eb1
 8007dac:	08007eb1 	.word	0x08007eb1
 8007db0:	08007eb1 	.word	0x08007eb1
 8007db4:	08007eb1 	.word	0x08007eb1
 8007db8:	08007dfb 	.word	0x08007dfb
 8007dbc:	08007eb1 	.word	0x08007eb1
 8007dc0:	08007eb1 	.word	0x08007eb1
 8007dc4:	08007eb1 	.word	0x08007eb1
 8007dc8:	08007e43 	.word	0x08007e43
 8007dcc:	08007e6f 	.word	0x08007e6f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d107      	bne.n	8007dec <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ddc:	f107 0308 	add.w	r3, r7, #8
 8007de0:	2202      	movs	r2, #2
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f002 f84b 	bl	8009e80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dea:	e06b      	b.n	8007ec4 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 ffd5 	bl	8009d9e <USBD_CtlError>
            ret = USBD_FAIL;
 8007df4:	2303      	movs	r3, #3
 8007df6:	75fb      	strb	r3, [r7, #23]
          break;
 8007df8:	e064      	b.n	8007ec4 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	885b      	ldrh	r3, [r3, #2]
 8007dfe:	0a1b      	lsrs	r3, r3, #8
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	2b21      	cmp	r3, #33	; 0x21
 8007e04:	d15d      	bne.n	8007ec2 <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fd87 	bl	8008920 <USBD_DFU_GetDfuFuncDesc>
 8007e12:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00c      	beq.n	8007e34 <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88db      	ldrh	r3, [r3, #6]
 8007e1e:	2b09      	cmp	r3, #9
 8007e20:	bf28      	it	cs
 8007e22:	2309      	movcs	r3, #9
 8007e24:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e26:	897b      	ldrh	r3, [r7, #10]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	68f9      	ldr	r1, [r7, #12]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f002 f827 	bl	8009e80 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8007e32:	e046      	b.n	8007ec2 <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 ffb1 	bl	8009d9e <USBD_CtlError>
              ret = USBD_FAIL;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	75fb      	strb	r3, [r7, #23]
          break;
 8007e40:	e03f      	b.n	8007ec2 <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d108      	bne.n	8007e60 <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e54:	2201      	movs	r2, #1
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f002 f811 	bl	8009e80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e5e:	e031      	b.n	8007ec4 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 ff9b 	bl	8009d9e <USBD_CtlError>
            ret = USBD_FAIL;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	75fb      	strb	r3, [r7, #23]
          break;
 8007e6c:	e02a      	b.n	8007ec4 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	885b      	ldrh	r3, [r3, #2]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d114      	bne.n	8007ea2 <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d107      	bne.n	8007e94 <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	885b      	ldrh	r3, [r3, #2]
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e92:	e017      	b.n	8007ec4 <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 ff81 	bl	8009d9e <USBD_CtlError>
              ret = USBD_FAIL;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	75fb      	strb	r3, [r7, #23]
          break;
 8007ea0:	e010      	b.n	8007ec4 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 ff7a 	bl	8009d9e <USBD_CtlError>
            ret = USBD_FAIL;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	75fb      	strb	r3, [r7, #23]
          break;
 8007eae:	e009      	b.n	8007ec4 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 ff73 	bl	8009d9e <USBD_CtlError>
          ret = USBD_FAIL;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	75fb      	strb	r3, [r7, #23]
          break;
 8007ebc:	e002      	b.n	8007ec4 <USBD_DFU_Setup+0x1ec>
          break;
 8007ebe:	bf00      	nop
 8007ec0:	e008      	b.n	8007ed4 <USBD_DFU_Setup+0x1fc>
          break;
 8007ec2:	bf00      	nop
      }
      break;
 8007ec4:	e006      	b.n	8007ed4 <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 ff68 	bl	8009d9e <USBD_CtlError>
      ret = USBD_FAIL;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed2:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop

08007ee0 <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	221b      	movs	r2, #27
 8007eec:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8007eee:	4b03      	ldr	r3, [pc, #12]	; (8007efc <USBD_DFU_GetCfgDesc+0x1c>)
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	20000068 	.word	0x20000068

08007f00 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b088      	sub	sp, #32
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	32b0      	adds	r2, #176	; 0xb0
 8007f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2c:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	33b0      	adds	r3, #176	; 0xb0
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e0ce      	b.n	80080e8 <USBD_DFU_EP0_TxReady+0x1d2>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	f040 80bd 	bne.w	80080d0 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d17c      	bne.n	800805a <USBD_DFU_EP0_TxReady+0x144>
    {
      if (hdfu->wlength == 1U)
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	f000 8093 	beq.w	8008092 <USBD_DFU_EP0_TxReady+0x17c>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	d15e      	bne.n	8008034 <USBD_DFU_EP0_TxReady+0x11e>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	2b21      	cmp	r3, #33	; 0x21
 8007f7c:	d124      	bne.n	8007fc8 <USBD_DFU_EP0_TxReady+0xb2>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	785b      	ldrb	r3, [r3, #1]
 8007f82:	461a      	mov	r2, r3
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	789b      	ldrb	r3, [r3, #2]
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	441a      	add	r2, r3
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	78db      	ldrb	r3, [r3, #3]
 8007fa8:	041b      	lsls	r3, r3, #16
 8007faa:	441a      	add	r2, r3
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	791b      	ldrb	r3, [r3, #4]
 8007fbc:	061b      	lsls	r3, r3, #24
 8007fbe:	441a      	add	r2, r3
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8007fc6:	e064      	b.n	8008092 <USBD_DFU_EP0_TxReady+0x17c>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b41      	cmp	r3, #65	; 0x41
 8007fce:	d12f      	bne.n	8008030 <USBD_DFU_EP0_TxReady+0x11a>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	785b      	ldrb	r3, [r3, #1]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	789b      	ldrb	r3, [r3, #2]
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	441a      	add	r2, r3
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	78db      	ldrb	r3, [r3, #3]
 8007ffa:	041b      	lsls	r3, r3, #16
 8007ffc:	441a      	add	r2, r3
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	791b      	ldrb	r3, [r3, #4]
 800800e:	061b      	lsls	r3, r3, #24
 8008010:	441a      	add	r2, r3
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	69fa      	ldr	r2, [r7, #28]
 800801e:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8008022:	4610      	mov	r0, r2
 8008024:	4798      	blx	r3
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d032      	beq.n	8008092 <USBD_DFU_EP0_TxReady+0x17c>
          {
            return (uint8_t)USBD_FAIL;
 800802c:	2303      	movs	r3, #3
 800802e:	e05b      	b.n	80080e8 <USBD_DFU_EP0_TxReady+0x1d2>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8008030:	2303      	movs	r3, #3
 8008032:	e059      	b.n	80080e8 <USBD_DFU_EP0_TxReady+0x1d2>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	2200      	movs	r2, #0
 8008038:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	2200      	movs	r2, #0
 8008040:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8008048:	2301      	movs	r3, #1
 800804a:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800804c:	f107 030c 	add.w	r3, r7, #12
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fea3 	bl	8009d9e <USBD_CtlError>
 8008058:	e01b      	b.n	8008092 <USBD_DFU_EP0_TxReady+0x17c>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008060:	2b01      	cmp	r3, #1
 8008062:	d916      	bls.n	8008092 <USBD_DFU_EP0_TxReady+0x17c>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800806a:	3b02      	subs	r3, #2
 800806c:	029a      	lsls	r2, r3, #10
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008074:	4413      	add	r3, r2
 8008076:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	69f8      	ldr	r0, [r7, #28]
 800807e:	6979      	ldr	r1, [r7, #20]
 8008080:	69fa      	ldr	r2, [r7, #28]
 8008082:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8008086:	4798      	blx	r3
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <USBD_DFU_EP0_TxReady+0x17c>
        {
          return (uint8_t)USBD_FAIL;
 800808e:	2303      	movs	r3, #3
 8008090:	e02a      	b.n	80080e8 <USBD_DFU_EP0_TxReady+0x1d2>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	2200      	movs	r2, #0
 8008096:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	2200      	movs	r2, #0
 800809e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	2203      	movs	r2, #3
 80080a6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80080ce:	e00a      	b.n	80080e6 <USBD_DFU_EP0_TxReady+0x1d0>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80080d6:	2b07      	cmp	r3, #7
 80080d8:	d103      	bne.n	80080e2 <USBD_DFU_EP0_TxReady+0x1cc>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fbc7 	bl	800886e <DFU_Leave>
 80080e0:	e001      	b.n	80080e6 <USBD_DFU_EP0_TxReady+0x1d0>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e000      	b.n	80080e8 <USBD_DFU_EP0_TxReady+0x1d2>
  }

  return (uint8_t)USBD_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3720      	adds	r7, #32
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
	...

08008108 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	220a      	movs	r2, #10
 8008114:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8008116:	4b03      	ldr	r3, [pc, #12]	; (8008124 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	20000084 	.word	0x20000084

08008128 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	460b      	mov	r3, r1
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	33b0      	adds	r3, #176	; 0xb0
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8008148:	7afb      	ldrb	r3, [r7, #11]
 800814a:	2b06      	cmp	r3, #6
 800814c:	d808      	bhi.n	8008160 <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	4906      	ldr	r1, [pc, #24]	; (8008170 <USBD_DFU_GetUsrStringDesc+0x48>)
 8008156:	4618      	mov	r0, r3
 8008158:	f001 fe32 	bl	8009dc0 <USBD_GetString>
    return USBD_StrDesc;
 800815c:	4b04      	ldr	r3, [pc, #16]	; (8008170 <USBD_DFU_GetUsrStringDesc+0x48>)
 800815e:	e002      	b.n	8008166 <USBD_DFU_GetUsrStringDesc+0x3e>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    length = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	607b      	str	r3, [r7, #4]
    return NULL;
 8008164:	2300      	movs	r3, #0
  }
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	200001c4 	.word	0x200001c4

08008174 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008184:	2303      	movs	r3, #3
 8008186:	e009      	b.n	800819c <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	33b0      	adds	r3, #176	; 0xb0
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	32b0      	adds	r2, #176	; 0xb0
 80081bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c0:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fba9 	bl	8008920 <USBD_DFU_GetDfuFuncDesc>
 80081ce:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d054      	beq.n	8008280 <DFU_Detach+0xd8>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d051      	beq.n	8008280 <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d013      	beq.n	800820e <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d00e      	beq.n	800820e <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80081f6:	2b05      	cmp	r3, #5
 80081f8:	d009      	beq.n	800820e <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008200:	2b06      	cmp	r3, #6
 8008202:	d004      	beq.n	800820e <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800820a:	2b09      	cmp	r3, #9
 800820c:	d125      	bne.n	800825a <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2202      	movs	r2, #2
 8008212:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	789b      	ldrb	r3, [r3, #2]
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d006      	beq.n	8008274 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fbfc 	bl	8008a64 <USBD_Stop>
    (void)USBD_Start(pdev);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fbed 	bl	8008a4c <USBD_Start>
 8008272:	e006      	b.n	8008282 <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	885b      	ldrh	r3, [r3, #2]
 8008278:	4618      	mov	r0, r3
 800827a:	f7f9 fb79 	bl	8001970 <HAL_Delay>
 800827e:	e000      	b.n	8008282 <DFU_Detach+0xda>
    return;
 8008280:	bf00      	nop
  }
}
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	32b0      	adds	r2, #176	; 0xb0
 800829c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a0:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d061      	beq.n	800836c <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	88db      	ldrh	r3, [r3, #6]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d033      	beq.n	8008318 <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d004      	beq.n	80082c4 <DFU_Download+0x3c>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80082c0:	2b05      	cmp	r3, #5
 80082c2:	d124      	bne.n	800830e <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	885b      	ldrh	r3, [r3, #2]
 80082c8:	461a      	mov	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	88db      	ldrh	r3, [r3, #6]
 80082d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d8:	bf28      	it	cs
 80082da:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 80082de:	b29b      	uxth	r3, r3
 80082e0:	461a      	mov	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2203      	movs	r2, #3
 80082ec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 80082fc:	68f9      	ldr	r1, [r7, #12]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008304:	461a      	mov	r2, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 fde6 	bl	8009ed8 <USBD_CtlPrepareRx>
 800830c:	e02f      	b.n	800836e <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f001 fd44 	bl	8009d9e <USBD_CtlError>
 8008316:	e02a      	b.n	800836e <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800831e:	2b05      	cmp	r3, #5
 8008320:	d004      	beq.n	800832c <DFU_Download+0xa4>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008328:	2b02      	cmp	r3, #2
 800832a:	d11a      	bne.n	8008362 <DFU_Download+0xda>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2206      	movs	r2, #6
 8008338:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8008360:	e005      	b.n	800836e <DFU_Download+0xe6>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 fd1a 	bl	8009d9e <USBD_CtlError>
 800836a:	e000      	b.n	800836e <DFU_Download+0xe6>
    return;
 800836c:	bf00      	nop
    }
  }
}
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	32b0      	adds	r2, #176	; 0xb0
 8008388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838c:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	33b0      	adds	r3, #176	; 0xb0
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 80ca 	beq.w	800853c <DFU_Upload+0x1c8>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	88db      	ldrh	r3, [r3, #6]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 80ae 	beq.w	800850e <DFU_Upload+0x19a>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d005      	beq.n	80083c8 <DFU_Upload+0x54>
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80083c2:	2b09      	cmp	r3, #9
 80083c4:	f040 8096 	bne.w	80084f4 <DFU_Upload+0x180>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	885b      	ldrh	r3, [r3, #2]
 80083cc:	461a      	mov	r2, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	88db      	ldrh	r3, [r3, #6]
 80083d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083dc:	bf28      	it	cs
 80083de:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d12c      	bne.n	8008450 <DFU_Upload+0xdc>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d901      	bls.n	8008404 <DFU_Upload+0x90>
 8008400:	2202      	movs	r2, #2
 8008402:	e000      	b.n	8008406 <DFU_Upload+0x92>
 8008404:	2209      	movs	r2, #9
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2200      	movs	r2, #0
 8008434:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2221      	movs	r2, #33	; 0x21
 800843a:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2241      	movs	r2, #65	; 0x41
 8008440:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2203      	movs	r2, #3
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 fd19 	bl	8009e80 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800844e:	e076      	b.n	800853e <DFU_Upload+0x1ca>
      }
      else if (hdfu->wblock_num > 1U)
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008456:	2b01      	cmp	r3, #1
 8008458:	d931      	bls.n	80084be <DFU_Upload+0x14a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2209      	movs	r2, #9
 800845e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800848c:	3b02      	subs	r3, #2
 800848e:	029a      	lsls	r2, r3, #10
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008496:	4413      	add	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	6979      	ldr	r1, [r7, #20]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80084a8:	4798      	blx	r3
 80084aa:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084b2:	461a      	mov	r2, r3
 80084b4:	68b9      	ldr	r1, [r7, #8]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 fce2 	bl	8009e80 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80084bc:	e03f      	b.n	800853e <DFU_Upload+0x1ca>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	220f      	movs	r2, #15
 80084c2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f001 fc56 	bl	8009d9e <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80084f2:	e024      	b.n	800853e <DFU_Upload+0x1ca>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2200      	movs	r2, #0
 8008500:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 fc49 	bl	8009d9e <USBD_CtlError>
 800850c:	e017      	b.n	800853e <DFU_Upload+0x1ca>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2202      	movs	r2, #2
 8008512:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800853a:	e000      	b.n	800853e <DFU_Upload+0x1ca>
    return;
 800853c:	bf00      	nop
  }
}
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	32b0      	adds	r2, #176	; 0xb0
 8008556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855a:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	33b0      	adds	r3, #176	; 0xb0
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008574:	4618      	mov	r0, r3
 8008576:	f000 f9d3 	bl	8008920 <USBD_DFU_GetDfuFuncDesc>
 800857a:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 80a8 	beq.w	80086d4 <DFU_GetStatus+0x190>
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 80a4 	beq.w	80086d4 <DFU_GetStatus+0x190>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 80a0 	beq.w	80086d4 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800859a:	2b03      	cmp	r3, #3
 800859c:	d002      	beq.n	80085a4 <DFU_GetStatus+0x60>
 800859e:	2b06      	cmp	r3, #6
 80085a0:	d051      	beq.n	8008646 <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 80085a2:	e08e      	b.n	80086c2 <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d034      	beq.n	8008618 <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2204      	movs	r2, #4
 80085b2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10e      	bne.n	8008602 <DFU_GetStatus+0xbe>
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b41      	cmp	r3, #65	; 0x41
 80085ea:	d10a      	bne.n	8008602 <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80085fc:	2100      	movs	r1, #0
 80085fe:	4798      	blx	r3
      break;
 8008600:	e05f      	b.n	80086c2 <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8008612:	2101      	movs	r1, #1
 8008614:	4798      	blx	r3
      break;
 8008616:	e054      	b.n	80086c2 <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	2205      	movs	r2, #5
 800861c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8008644:	e03d      	b.n	80086c2 <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800864c:	2b01      	cmp	r3, #1
 800864e:	d116      	bne.n	800867e <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2207      	movs	r2, #7
 8008654:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800867c:	e020      	b.n	80086c0 <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8008684:	2b00      	cmp	r3, #0
 8008686:	d11b      	bne.n	80086c0 <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	789b      	ldrb	r3, [r3, #2]
 800868c:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008690:	2b00      	cmp	r3, #0
 8008692:	d015      	beq.n	80086c0 <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80086c0:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80086c8:	2206      	movs	r2, #6
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f001 fbd7 	bl	8009e80 <USBD_CtlSendData>
 80086d2:	e000      	b.n	80086d6 <DFU_GetStatus+0x192>
    return;
 80086d4:	bf00      	nop
}
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	32b0      	adds	r2, #176	; 0xb0
 80086ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d042      	beq.n	8008780 <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008700:	2b0a      	cmp	r3, #10
 8008702:	d11e      	bne.n	8008742 <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2202      	movs	r2, #2
 8008708:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8008740:	e01f      	b.n	8008782 <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	220a      	movs	r2, #10
 8008746:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	220e      	movs	r2, #14
 800874e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 800877e:	e000      	b.n	8008782 <DFU_ClearStatus+0xa6>
    return;
 8008780:	bf00      	nop
  }
}
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	32b0      	adds	r2, #176	; 0xb0
 800879e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d008      	beq.n	80087bc <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80087b0:	2201      	movs	r2, #1
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 fb63 	bl	8009e80 <USBD_CtlSendData>
 80087ba:	e000      	b.n	80087be <DFU_GetState+0x32>
    return;
 80087bc:	bf00      	nop
}
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	32b0      	adds	r2, #176	; 0xb0
 80087d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087da:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d03f      	beq.n	8008862 <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d013      	beq.n	8008814 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d00e      	beq.n	8008814 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80087fc:	2b05      	cmp	r3, #5
 80087fe:	d009      	beq.n	8008814 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008806:	2b06      	cmp	r3, #6
 8008808:	d004      	beq.n	8008814 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008810:	2b09      	cmp	r3, #9
 8008812:	d127      	bne.n	8008864 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8008860:	e000      	b.n	8008864 <DFU_Abort+0xa0>
    return;
 8008862:	bf00      	nop
  }
}
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	32b0      	adds	r2, #176	; 0xb0
 8008880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008884:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800888c:	4618      	mov	r0, r3
 800888e:	f000 f847 	bl	8008920 <USBD_DFU_GetDfuFuncDesc>
 8008892:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d03e      	beq.n	8008918 <DFU_Leave+0xaa>
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d03b      	beq.n	8008918 <DFU_Leave+0xaa>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	789b      	ldrb	r3, [r3, #2]
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d016      	beq.n	80088e2 <DFU_Leave+0x74>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2206      	movs	r2, #6
 80088b8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 80088e0:	e01b      	b.n	800891a <DFU_Leave+0xac>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2208      	movs	r2, #8
 80088e6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f8a8 	bl	8008a64 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8008914:	f7ff f908 	bl	8007b28 <__NVIC_SystemReset>
    return;
 8008918:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 8008930:	2300      	movs	r3, #0
 8008932:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	885b      	ldrh	r3, [r3, #2]
 8008938:	b29a      	uxth	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	429a      	cmp	r2, r3
 8008942:	d918      	bls.n	8008976 <USBD_DFU_GetDfuFuncDesc+0x56>
  {
    ptr = desc->bLength;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	b29b      	uxth	r3, r3
 800894a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800894c:	e00d      	b.n	800896a <USBD_DFU_GetDfuFuncDesc+0x4a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800894e:	f107 030a 	add.w	r3, r7, #10
 8008952:	4619      	mov	r1, r3
 8008954:	6978      	ldr	r0, [r7, #20]
 8008956:	f000 fbfd 	bl	8009154 <USBD_GetNextDesc>
 800895a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	785b      	ldrb	r3, [r3, #1]
 8008960:	2b21      	cmp	r3, #33	; 0x21
 8008962:	d102      	bne.n	800896a <USBD_DFU_GetDfuFuncDesc+0x4a>
      {
        pDfuDesc = (uint8_t *)pdesc;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	613b      	str	r3, [r7, #16]
        break;
 8008968:	e005      	b.n	8008976 <USBD_DFU_GetDfuFuncDesc+0x56>
    while (ptr < desc->wTotalLength)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	885b      	ldrh	r3, [r3, #2]
 800896e:	b29a      	uxth	r2, r3
 8008970:	897b      	ldrh	r3, [r7, #10]
 8008972:	429a      	cmp	r2, r3
 8008974:	d8eb      	bhi.n	800894e <USBD_DFU_GetDfuFuncDesc+0x2e>
      }
    }
  }
  return pDfuDesc;
 8008976:	693b      	ldr	r3, [r7, #16]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	4613      	mov	r3, r2
 800898c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008994:	2303      	movs	r3, #3
 8008996:	e01f      	b.n	80089d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	79fa      	ldrb	r2, [r7, #7]
 80089ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f001 fd7f 	bl	800a4d0 <USBD_LL_Init>
 80089d2:	4603      	mov	r3, r0
 80089d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e025      	b.n	8008a44 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	32ae      	adds	r2, #174	; 0xae
 8008a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00f      	beq.n	8008a34 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	32ae      	adds	r2, #174	; 0xae
 8008a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	f107 020e 	add.w	r2, r7, #14
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4798      	blx	r3
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f001 fd8b 	bl	800a570 <USBD_LL_Start>
 8008a5a:	4603      	mov	r3, r0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 fd9a 	bl	800a5a6 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6852      	ldr	r2, [r2, #4]
 8008a88:	b2d2      	uxtb	r2, r2
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008aa2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d009      	beq.n	8008ade <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	78fa      	ldrb	r2, [r7, #3]
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	4798      	blx	r3
 8008ada:	4603      	mov	r3, r0
 8008adc:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	78fa      	ldrb	r2, [r7, #3]
 8008b02:	4611      	mov	r1, r2
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	4798      	blx	r3
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 f8fb 	bl	8009d2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008b42:	461a      	mov	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b50:	f003 031f 	and.w	r3, r3, #31
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d01a      	beq.n	8008b8e <USBD_LL_SetupStage+0x72>
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d822      	bhi.n	8008ba2 <USBD_LL_SetupStage+0x86>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <USBD_LL_SetupStage+0x4a>
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d00a      	beq.n	8008b7a <USBD_LL_SetupStage+0x5e>
 8008b64:	e01d      	b.n	8008ba2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fb2c 	bl	80091cc <USBD_StdDevReq>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]
      break;
 8008b78:	e020      	b.n	8008bbc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fb94 	bl	80092b0 <USBD_StdItfReq>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b8c:	e016      	b.n	8008bbc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fbf6 	bl	8009388 <USBD_StdEPReq>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba0:	e00c      	b.n	8008bbc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ba8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f001 fd39 	bl	800a628 <USBD_LL_StallEP>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8008bba:	bf00      	nop
  }

  return ret;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b086      	sub	sp, #24
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	607a      	str	r2, [r7, #4]
 8008bd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008bd8:	7afb      	ldrb	r3, [r7, #11]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d16e      	bne.n	8008cbc <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008be4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	f040 8098 	bne.w	8008d22 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	689a      	ldr	r2, [r3, #8]
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d913      	bls.n	8008c26 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	1ad2      	subs	r2, r2, r3
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	4293      	cmp	r3, r2
 8008c16:	bf28      	it	cs
 8008c18:	4613      	movcs	r3, r2
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f001 f977 	bl	8009f12 <USBD_CtlContinueRx>
 8008c24:	e07d      	b.n	8008d22 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c2c:	f003 031f 	and.w	r3, r3, #31
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d014      	beq.n	8008c5e <USBD_LL_DataOutStage+0x98>
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d81d      	bhi.n	8008c74 <USBD_LL_DataOutStage+0xae>
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <USBD_LL_DataOutStage+0x7c>
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d003      	beq.n	8008c48 <USBD_LL_DataOutStage+0x82>
 8008c40:	e018      	b.n	8008c74 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	75bb      	strb	r3, [r7, #22]
            break;
 8008c46:	e018      	b.n	8008c7a <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	4619      	mov	r1, r3
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 fa64 	bl	8009120 <USBD_CoreFindIF>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	75bb      	strb	r3, [r7, #22]
            break;
 8008c5c:	e00d      	b.n	8008c7a <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	4619      	mov	r1, r3
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 fa66 	bl	800913a <USBD_CoreFindEP>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	75bb      	strb	r3, [r7, #22]
            break;
 8008c72:	e002      	b.n	8008c7a <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	75bb      	strb	r3, [r7, #22]
            break;
 8008c78:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008c7a:	7dbb      	ldrb	r3, [r7, #22]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d119      	bne.n	8008cb4 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d113      	bne.n	8008cb4 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008c8c:	7dba      	ldrb	r2, [r7, #22]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	32ae      	adds	r2, #174	; 0xae
 8008c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008c9c:	7dba      	ldrb	r2, [r7, #22]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ca4:	7dba      	ldrb	r2, [r7, #22]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	32ae      	adds	r2, #174	; 0xae
 8008caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f001 f93d 	bl	8009f34 <USBD_CtlSendStatus>
 8008cba:	e032      	b.n	8008d22 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008cbc:	7afb      	ldrb	r3, [r7, #11]
 8008cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 fa37 	bl	800913a <USBD_CoreFindEP>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cd0:	7dbb      	ldrb	r3, [r7, #22]
 8008cd2:	2bff      	cmp	r3, #255	; 0xff
 8008cd4:	d025      	beq.n	8008d22 <USBD_LL_DataOutStage+0x15c>
 8008cd6:	7dbb      	ldrb	r3, [r7, #22]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d122      	bne.n	8008d22 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d117      	bne.n	8008d18 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ce8:	7dba      	ldrb	r2, [r7, #22]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	32ae      	adds	r2, #174	; 0xae
 8008cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00f      	beq.n	8008d18 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008cf8:	7dba      	ldrb	r2, [r7, #22]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008d00:	7dba      	ldrb	r2, [r7, #22]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	32ae      	adds	r2, #174	; 0xae
 8008d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	7afa      	ldrb	r2, [r7, #11]
 8008d0e:	4611      	mov	r1, r2
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	4798      	blx	r3
 8008d14:	4603      	mov	r3, r0
 8008d16:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
 8008d20:	e000      	b.n	8008d24 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	460b      	mov	r3, r1
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008d3a:	7afb      	ldrb	r3, [r7, #11]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d16f      	bne.n	8008e20 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3314      	adds	r3, #20
 8008d44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d15a      	bne.n	8008e06 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d914      	bls.n	8008d86 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	689a      	ldr	r2, [r3, #8]
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	1ad2      	subs	r2, r2, r3
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	6879      	ldr	r1, [r7, #4]
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f001 f89f 	bl	8009eb6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d78:	2300      	movs	r3, #0
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f001 fcfc 	bl	800a77c <USBD_LL_PrepareReceive>
 8008d84:	e03f      	b.n	8008e06 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d11c      	bne.n	8008dcc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d316      	bcc.n	8008dcc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d20f      	bcs.n	8008dcc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008dac:	2200      	movs	r2, #0
 8008dae:	2100      	movs	r1, #0
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f001 f880 	bl	8009eb6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f001 fcd9 	bl	800a77c <USBD_LL_PrepareReceive>
 8008dca:	e01c      	b.n	8008e06 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d10f      	bne.n	8008df8 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d009      	beq.n	8008df8 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008df8:	2180      	movs	r1, #128	; 0x80
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f001 fc14 	bl	800a628 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f001 f8aa 	bl	8009f5a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d03a      	beq.n	8008e86 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f7ff fe42 	bl	8008a9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e1e:	e032      	b.n	8008e86 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008e20:	7afb      	ldrb	r3, [r7, #11]
 8008e22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	4619      	mov	r1, r3
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 f985 	bl	800913a <USBD_CoreFindEP>
 8008e30:	4603      	mov	r3, r0
 8008e32:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	2bff      	cmp	r3, #255	; 0xff
 8008e38:	d025      	beq.n	8008e86 <USBD_LL_DataInStage+0x15a>
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d122      	bne.n	8008e86 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d11c      	bne.n	8008e86 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008e4c:	7dfa      	ldrb	r2, [r7, #23]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	32ae      	adds	r2, #174	; 0xae
 8008e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d014      	beq.n	8008e86 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008e5c:	7dfa      	ldrb	r2, [r7, #23]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008e64:	7dfa      	ldrb	r2, [r7, #23]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	32ae      	adds	r2, #174	; 0xae
 8008e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	7afa      	ldrb	r2, [r7, #11]
 8008e72:	4611      	mov	r1, r2
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	4798      	blx	r3
 8008e78:	4603      	mov	r3, r0
 8008e7a:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008e7c:	7dbb      	ldrb	r3, [r7, #22]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008e82:	7dbb      	ldrb	r3, [r7, #22]
 8008e84:	e000      	b.n	8008e88 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d014      	beq.n	8008ef6 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00e      	beq.n	8008ef6 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6852      	ldr	r2, [r2, #4]
 8008ee4:	b2d2      	uxtb	r2, r2
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	4798      	blx	r3
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ef6:	2340      	movs	r3, #64	; 0x40
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2100      	movs	r1, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 fb6d 	bl	800a5dc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2240      	movs	r2, #64	; 0x40
 8008f0e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f12:	2340      	movs	r3, #64	; 0x40
 8008f14:	2200      	movs	r2, #0
 8008f16:	2180      	movs	r1, #128	; 0x80
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 fb5f 	bl	800a5dc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2240      	movs	r2, #64	; 0x40
 8008f28:	621a      	str	r2, [r3, #32]

  return ret;
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d006      	beq.n	8008f76 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2204      	movs	r2, #4
 8008f7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d106      	bne.n	8008fae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b03      	cmp	r3, #3
 8008fce:	d110      	bne.n	8008ff2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00b      	beq.n	8008ff2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d005      	beq.n	8008ff2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	32ae      	adds	r2, #174	; 0xae
 8009012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800901a:	2303      	movs	r3, #3
 800901c:	e01c      	b.n	8009058 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b03      	cmp	r3, #3
 8009028:	d115      	bne.n	8009056 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	32ae      	adds	r2, #174	; 0xae
 8009034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00b      	beq.n	8009056 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	32ae      	adds	r2, #174	; 0xae
 8009048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	4611      	mov	r1, r2
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	460b      	mov	r3, r1
 800906a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	32ae      	adds	r2, #174	; 0xae
 8009076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800907e:	2303      	movs	r3, #3
 8009080:	e01c      	b.n	80090bc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b03      	cmp	r3, #3
 800908c:	d115      	bne.n	80090ba <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	32ae      	adds	r2, #174	; 0xae
 8009098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00b      	beq.n	80090ba <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	32ae      	adds	r2, #174	; 0xae
 80090ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b2:	78fa      	ldrb	r2, [r7, #3]
 80090b4:	4611      	mov	r1, r2
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00e      	beq.n	8009116 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	6852      	ldr	r2, [r2, #4]
 8009104:	b2d2      	uxtb	r2, r2
 8009106:	4611      	mov	r1, r2
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	4798      	blx	r3
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009112:	2303      	movs	r3, #3
 8009114:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009116:	7bfb      	ldrb	r3, [r7, #15]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800912c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800912e:	4618      	mov	r0, r3
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009146:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009148:	4618      	mov	r0, r3
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	881a      	ldrh	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	b29b      	uxth	r3, r3
 800916c:	4413      	add	r3, r2
 800916e:	b29a      	uxth	r2, r3
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4413      	add	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009180:	68fb      	ldr	r3, [r7, #12]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800918e:	b480      	push	{r7}
 8009190:	b087      	sub	sp, #28
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	3301      	adds	r3, #1
 80091a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80091ac:	8a3b      	ldrh	r3, [r7, #16]
 80091ae:	021b      	lsls	r3, r3, #8
 80091b0:	b21a      	sxth	r2, r3
 80091b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	b21b      	sxth	r3, r3
 80091ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80091bc:	89fb      	ldrh	r3, [r7, #14]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	371c      	adds	r7, #28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
	...

080091cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091e2:	2b40      	cmp	r3, #64	; 0x40
 80091e4:	d005      	beq.n	80091f2 <USBD_StdDevReq+0x26>
 80091e6:	2b40      	cmp	r3, #64	; 0x40
 80091e8:	d857      	bhi.n	800929a <USBD_StdDevReq+0xce>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00f      	beq.n	800920e <USBD_StdDevReq+0x42>
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	d153      	bne.n	800929a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	32ae      	adds	r2, #174	; 0xae
 80091fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	4798      	blx	r3
 8009208:	4603      	mov	r3, r0
 800920a:	73fb      	strb	r3, [r7, #15]
      break;
 800920c:	e04a      	b.n	80092a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	785b      	ldrb	r3, [r3, #1]
 8009212:	2b09      	cmp	r3, #9
 8009214:	d83b      	bhi.n	800928e <USBD_StdDevReq+0xc2>
 8009216:	a201      	add	r2, pc, #4	; (adr r2, 800921c <USBD_StdDevReq+0x50>)
 8009218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921c:	08009271 	.word	0x08009271
 8009220:	08009285 	.word	0x08009285
 8009224:	0800928f 	.word	0x0800928f
 8009228:	0800927b 	.word	0x0800927b
 800922c:	0800928f 	.word	0x0800928f
 8009230:	0800924f 	.word	0x0800924f
 8009234:	08009245 	.word	0x08009245
 8009238:	0800928f 	.word	0x0800928f
 800923c:	08009267 	.word	0x08009267
 8009240:	08009259 	.word	0x08009259
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa3c 	bl	80096c4 <USBD_GetDescriptor>
          break;
 800924c:	e024      	b.n	8009298 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fbc7 	bl	80099e4 <USBD_SetAddress>
          break;
 8009256:	e01f      	b.n	8009298 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fc06 	bl	8009a6c <USBD_SetConfig>
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]
          break;
 8009264:	e018      	b.n	8009298 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fca9 	bl	8009bc0 <USBD_GetConfig>
          break;
 800926e:	e013      	b.n	8009298 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fcda 	bl	8009c2c <USBD_GetStatus>
          break;
 8009278:	e00e      	b.n	8009298 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fd09 	bl	8009c94 <USBD_SetFeature>
          break;
 8009282:	e009      	b.n	8009298 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fd2d 	bl	8009ce6 <USBD_ClrFeature>
          break;
 800928c:	e004      	b.n	8009298 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fd84 	bl	8009d9e <USBD_CtlError>
          break;
 8009296:	bf00      	nop
      }
      break;
 8009298:	e004      	b.n	80092a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fd7e 	bl	8009d9e <USBD_CtlError>
      break;
 80092a2:	bf00      	nop
  }

  return ret;
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop

080092b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092c6:	2b40      	cmp	r3, #64	; 0x40
 80092c8:	d005      	beq.n	80092d6 <USBD_StdItfReq+0x26>
 80092ca:	2b40      	cmp	r3, #64	; 0x40
 80092cc:	d852      	bhi.n	8009374 <USBD_StdItfReq+0xc4>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <USBD_StdItfReq+0x26>
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d14e      	bne.n	8009374 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	3b01      	subs	r3, #1
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d840      	bhi.n	8009366 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	889b      	ldrh	r3, [r3, #4]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d836      	bhi.n	800935c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	889b      	ldrh	r3, [r3, #4]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7ff ff12 	bl	8009120 <USBD_CoreFindIF>
 80092fc:	4603      	mov	r3, r0
 80092fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009300:	7bbb      	ldrb	r3, [r7, #14]
 8009302:	2bff      	cmp	r3, #255	; 0xff
 8009304:	d01d      	beq.n	8009342 <USBD_StdItfReq+0x92>
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d11a      	bne.n	8009342 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800930c:	7bba      	ldrb	r2, [r7, #14]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	32ae      	adds	r2, #174	; 0xae
 8009312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00f      	beq.n	800933c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800931c:	7bba      	ldrb	r2, [r7, #14]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009324:	7bba      	ldrb	r2, [r7, #14]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	32ae      	adds	r2, #174	; 0xae
 800932a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	4798      	blx	r3
 8009336:	4603      	mov	r3, r0
 8009338:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800933a:	e004      	b.n	8009346 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800933c:	2303      	movs	r3, #3
 800933e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009340:	e001      	b.n	8009346 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009342:	2303      	movs	r3, #3
 8009344:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	88db      	ldrh	r3, [r3, #6]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d110      	bne.n	8009370 <USBD_StdItfReq+0xc0>
 800934e:	7bfb      	ldrb	r3, [r7, #15]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10d      	bne.n	8009370 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fded 	bl	8009f34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800935a:	e009      	b.n	8009370 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fd1d 	bl	8009d9e <USBD_CtlError>
          break;
 8009364:	e004      	b.n	8009370 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fd18 	bl	8009d9e <USBD_CtlError>
          break;
 800936e:	e000      	b.n	8009372 <USBD_StdItfReq+0xc2>
          break;
 8009370:	bf00      	nop
      }
      break;
 8009372:	e004      	b.n	800937e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fd11 	bl	8009d9e <USBD_CtlError>
      break;
 800937c:	bf00      	nop
  }

  return ret;
 800937e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	889b      	ldrh	r3, [r3, #4]
 800939a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093a4:	2b40      	cmp	r3, #64	; 0x40
 80093a6:	d007      	beq.n	80093b8 <USBD_StdEPReq+0x30>
 80093a8:	2b40      	cmp	r3, #64	; 0x40
 80093aa:	f200 817f 	bhi.w	80096ac <USBD_StdEPReq+0x324>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d02a      	beq.n	8009408 <USBD_StdEPReq+0x80>
 80093b2:	2b20      	cmp	r3, #32
 80093b4:	f040 817a 	bne.w	80096ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7ff febc 	bl	800913a <USBD_CoreFindEP>
 80093c2:	4603      	mov	r3, r0
 80093c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093c6:	7b7b      	ldrb	r3, [r7, #13]
 80093c8:	2bff      	cmp	r3, #255	; 0xff
 80093ca:	f000 8174 	beq.w	80096b6 <USBD_StdEPReq+0x32e>
 80093ce:	7b7b      	ldrb	r3, [r7, #13]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f040 8170 	bne.w	80096b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80093d6:	7b7a      	ldrb	r2, [r7, #13]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80093de:	7b7a      	ldrb	r2, [r7, #13]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	32ae      	adds	r2, #174	; 0xae
 80093e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 8163 	beq.w	80096b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80093f0:	7b7a      	ldrb	r2, [r7, #13]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	32ae      	adds	r2, #174	; 0xae
 80093f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	4798      	blx	r3
 8009402:	4603      	mov	r3, r0
 8009404:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009406:	e156      	b.n	80096b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	785b      	ldrb	r3, [r3, #1]
 800940c:	2b03      	cmp	r3, #3
 800940e:	d008      	beq.n	8009422 <USBD_StdEPReq+0x9a>
 8009410:	2b03      	cmp	r3, #3
 8009412:	f300 8145 	bgt.w	80096a0 <USBD_StdEPReq+0x318>
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 809b 	beq.w	8009552 <USBD_StdEPReq+0x1ca>
 800941c:	2b01      	cmp	r3, #1
 800941e:	d03c      	beq.n	800949a <USBD_StdEPReq+0x112>
 8009420:	e13e      	b.n	80096a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b02      	cmp	r3, #2
 800942c:	d002      	beq.n	8009434 <USBD_StdEPReq+0xac>
 800942e:	2b03      	cmp	r3, #3
 8009430:	d016      	beq.n	8009460 <USBD_StdEPReq+0xd8>
 8009432:	e02c      	b.n	800948e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009434:	7bbb      	ldrb	r3, [r7, #14]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00d      	beq.n	8009456 <USBD_StdEPReq+0xce>
 800943a:	7bbb      	ldrb	r3, [r7, #14]
 800943c:	2b80      	cmp	r3, #128	; 0x80
 800943e:	d00a      	beq.n	8009456 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009440:	7bbb      	ldrb	r3, [r7, #14]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f001 f8ef 	bl	800a628 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800944a:	2180      	movs	r1, #128	; 0x80
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f001 f8eb 	bl	800a628 <USBD_LL_StallEP>
 8009452:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009454:	e020      	b.n	8009498 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fca0 	bl	8009d9e <USBD_CtlError>
              break;
 800945e:	e01b      	b.n	8009498 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	885b      	ldrh	r3, [r3, #2]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10e      	bne.n	8009486 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00b      	beq.n	8009486 <USBD_StdEPReq+0xfe>
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	2b80      	cmp	r3, #128	; 0x80
 8009472:	d008      	beq.n	8009486 <USBD_StdEPReq+0xfe>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	88db      	ldrh	r3, [r3, #6]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d104      	bne.n	8009486 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f001 f8d1 	bl	800a628 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fd54 	bl	8009f34 <USBD_CtlSendStatus>

              break;
 800948c:	e004      	b.n	8009498 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fc84 	bl	8009d9e <USBD_CtlError>
              break;
 8009496:	bf00      	nop
          }
          break;
 8009498:	e107      	b.n	80096aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d002      	beq.n	80094ac <USBD_StdEPReq+0x124>
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d016      	beq.n	80094d8 <USBD_StdEPReq+0x150>
 80094aa:	e04b      	b.n	8009544 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00d      	beq.n	80094ce <USBD_StdEPReq+0x146>
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	2b80      	cmp	r3, #128	; 0x80
 80094b6:	d00a      	beq.n	80094ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 f8b3 	bl	800a628 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094c2:	2180      	movs	r1, #128	; 0x80
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 f8af 	bl	800a628 <USBD_LL_StallEP>
 80094ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094cc:	e040      	b.n	8009550 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fc64 	bl	8009d9e <USBD_CtlError>
              break;
 80094d6:	e03b      	b.n	8009550 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	885b      	ldrh	r3, [r3, #2]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d136      	bne.n	800954e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d004      	beq.n	80094f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f001 f8b9 	bl	800a666 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fd1d 	bl	8009f34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7ff fe1b 	bl	800913a <USBD_CoreFindEP>
 8009504:	4603      	mov	r3, r0
 8009506:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009508:	7b7b      	ldrb	r3, [r7, #13]
 800950a:	2bff      	cmp	r3, #255	; 0xff
 800950c:	d01f      	beq.n	800954e <USBD_StdEPReq+0x1c6>
 800950e:	7b7b      	ldrb	r3, [r7, #13]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d11c      	bne.n	800954e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009514:	7b7a      	ldrb	r2, [r7, #13]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800951c:	7b7a      	ldrb	r2, [r7, #13]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	32ae      	adds	r2, #174	; 0xae
 8009522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d010      	beq.n	800954e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800952c:	7b7a      	ldrb	r2, [r7, #13]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	32ae      	adds	r2, #174	; 0xae
 8009532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	4798      	blx	r3
 800953e:	4603      	mov	r3, r0
 8009540:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009542:	e004      	b.n	800954e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fc29 	bl	8009d9e <USBD_CtlError>
              break;
 800954c:	e000      	b.n	8009550 <USBD_StdEPReq+0x1c8>
              break;
 800954e:	bf00      	nop
          }
          break;
 8009550:	e0ab      	b.n	80096aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b02      	cmp	r3, #2
 800955c:	d002      	beq.n	8009564 <USBD_StdEPReq+0x1dc>
 800955e:	2b03      	cmp	r3, #3
 8009560:	d032      	beq.n	80095c8 <USBD_StdEPReq+0x240>
 8009562:	e097      	b.n	8009694 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d007      	beq.n	800957a <USBD_StdEPReq+0x1f2>
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	2b80      	cmp	r3, #128	; 0x80
 800956e:	d004      	beq.n	800957a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fc13 	bl	8009d9e <USBD_CtlError>
                break;
 8009578:	e091      	b.n	800969e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800957a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800957e:	2b00      	cmp	r3, #0
 8009580:	da0b      	bge.n	800959a <USBD_StdEPReq+0x212>
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009588:	4613      	mov	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	3310      	adds	r3, #16
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	4413      	add	r3, r2
 8009596:	3304      	adds	r3, #4
 8009598:	e00b      	b.n	80095b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800959a:	7bbb      	ldrb	r3, [r7, #14]
 800959c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095a0:	4613      	mov	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	4413      	add	r3, r2
 80095b0:	3304      	adds	r3, #4
 80095b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2202      	movs	r2, #2
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fc5d 	bl	8009e80 <USBD_CtlSendData>
              break;
 80095c6:	e06a      	b.n	800969e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	da11      	bge.n	80095f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	f003 020f 	and.w	r2, r3, #15
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	4613      	mov	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	3324      	adds	r3, #36	; 0x24
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d117      	bne.n	800961a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095ea:	6839      	ldr	r1, [r7, #0]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 fbd6 	bl	8009d9e <USBD_CtlError>
                  break;
 80095f2:	e054      	b.n	800969e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	f003 020f 	and.w	r2, r3, #15
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d104      	bne.n	800961a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fbc3 	bl	8009d9e <USBD_CtlError>
                  break;
 8009618:	e041      	b.n	800969e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800961a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800961e:	2b00      	cmp	r3, #0
 8009620:	da0b      	bge.n	800963a <USBD_StdEPReq+0x2b2>
 8009622:	7bbb      	ldrb	r3, [r7, #14]
 8009624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009628:	4613      	mov	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	3310      	adds	r3, #16
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	4413      	add	r3, r2
 8009636:	3304      	adds	r3, #4
 8009638:	e00b      	b.n	8009652 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800963a:	7bbb      	ldrb	r3, [r7, #14]
 800963c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009640:	4613      	mov	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	4413      	add	r3, r2
 8009650:	3304      	adds	r3, #4
 8009652:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <USBD_StdEPReq+0x2d8>
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	2b80      	cmp	r3, #128	; 0x80
 800965e:	d103      	bne.n	8009668 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2200      	movs	r2, #0
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	e00e      	b.n	8009686 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009668:	7bbb      	ldrb	r3, [r7, #14]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 f819 	bl	800a6a4 <USBD_LL_IsStallEP>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d003      	beq.n	8009680 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2201      	movs	r2, #1
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	e002      	b.n	8009686 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	2202      	movs	r2, #2
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fbf7 	bl	8009e80 <USBD_CtlSendData>
              break;
 8009692:	e004      	b.n	800969e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fb81 	bl	8009d9e <USBD_CtlError>
              break;
 800969c:	bf00      	nop
          }
          break;
 800969e:	e004      	b.n	80096aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fb7b 	bl	8009d9e <USBD_CtlError>
          break;
 80096a8:	bf00      	nop
      }
      break;
 80096aa:	e005      	b.n	80096b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fb75 	bl	8009d9e <USBD_CtlError>
      break;
 80096b4:	e000      	b.n	80096b8 <USBD_StdEPReq+0x330>
      break;
 80096b6:	bf00      	nop
  }

  return ret;
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	885b      	ldrh	r3, [r3, #2]
 80096de:	0a1b      	lsrs	r3, r3, #8
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	2b06      	cmp	r3, #6
 80096e6:	f200 814f 	bhi.w	8009988 <USBD_GetDescriptor+0x2c4>
 80096ea:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <USBD_GetDescriptor+0x2c>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	0800970d 	.word	0x0800970d
 80096f4:	08009725 	.word	0x08009725
 80096f8:	08009765 	.word	0x08009765
 80096fc:	08009989 	.word	0x08009989
 8009700:	08009989 	.word	0x08009989
 8009704:	08009929 	.word	0x08009929
 8009708:	08009955 	.word	0x08009955
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	7c12      	ldrb	r2, [r2, #16]
 8009718:	f107 010a 	add.w	r1, r7, #10
 800971c:	4610      	mov	r0, r2
 800971e:	4798      	blx	r3
 8009720:	6178      	str	r0, [r7, #20]
      break;
 8009722:	e139      	b.n	8009998 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	7c1b      	ldrb	r3, [r3, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10d      	bne.n	8009748 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009734:	f107 020a 	add.w	r2, r7, #10
 8009738:	4610      	mov	r0, r2
 800973a:	4798      	blx	r3
 800973c:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	3301      	adds	r3, #1
 8009742:	2202      	movs	r2, #2
 8009744:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009746:	e127      	b.n	8009998 <USBD_GetDescriptor+0x2d4>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009750:	f107 020a 	add.w	r2, r7, #10
 8009754:	4610      	mov	r0, r2
 8009756:	4798      	blx	r3
 8009758:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	3301      	adds	r3, #1
 800975e:	2202      	movs	r2, #2
 8009760:	701a      	strb	r2, [r3, #0]
      break;
 8009762:	e119      	b.n	8009998 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	885b      	ldrh	r3, [r3, #2]
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b05      	cmp	r3, #5
 800976c:	f200 80ac 	bhi.w	80098c8 <USBD_GetDescriptor+0x204>
 8009770:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <USBD_GetDescriptor+0xb4>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	08009791 	.word	0x08009791
 800977c:	080097c5 	.word	0x080097c5
 8009780:	080097f9 	.word	0x080097f9
 8009784:	0800982d 	.word	0x0800982d
 8009788:	08009861 	.word	0x08009861
 800978c:	08009895 	.word	0x08009895
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00b      	beq.n	80097b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	7c12      	ldrb	r2, [r2, #16]
 80097a8:	f107 010a 	add.w	r1, r7, #10
 80097ac:	4610      	mov	r0, r2
 80097ae:	4798      	blx	r3
 80097b0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097b2:	e0b8      	b.n	8009926 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 faf1 	bl	8009d9e <USBD_CtlError>
            err++;
 80097bc:	7cfb      	ldrb	r3, [r7, #19]
 80097be:	3301      	adds	r3, #1
 80097c0:	74fb      	strb	r3, [r7, #19]
          break;
 80097c2:	e0b0      	b.n	8009926 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00b      	beq.n	80097e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	7c12      	ldrb	r2, [r2, #16]
 80097dc:	f107 010a 	add.w	r1, r7, #10
 80097e0:	4610      	mov	r0, r2
 80097e2:	4798      	blx	r3
 80097e4:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097e6:	e09e      	b.n	8009926 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fad7 	bl	8009d9e <USBD_CtlError>
            err++;
 80097f0:	7cfb      	ldrb	r3, [r7, #19]
 80097f2:	3301      	adds	r3, #1
 80097f4:	74fb      	strb	r3, [r7, #19]
          break;
 80097f6:	e096      	b.n	8009926 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00b      	beq.n	800981c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	7c12      	ldrb	r2, [r2, #16]
 8009810:	f107 010a 	add.w	r1, r7, #10
 8009814:	4610      	mov	r0, r2
 8009816:	4798      	blx	r3
 8009818:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800981a:	e084      	b.n	8009926 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fabd 	bl	8009d9e <USBD_CtlError>
            err++;
 8009824:	7cfb      	ldrb	r3, [r7, #19]
 8009826:	3301      	adds	r3, #1
 8009828:	74fb      	strb	r3, [r7, #19]
          break;
 800982a:	e07c      	b.n	8009926 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00b      	beq.n	8009850 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	7c12      	ldrb	r2, [r2, #16]
 8009844:	f107 010a 	add.w	r1, r7, #10
 8009848:	4610      	mov	r0, r2
 800984a:	4798      	blx	r3
 800984c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800984e:	e06a      	b.n	8009926 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 faa3 	bl	8009d9e <USBD_CtlError>
            err++;
 8009858:	7cfb      	ldrb	r3, [r7, #19]
 800985a:	3301      	adds	r3, #1
 800985c:	74fb      	strb	r3, [r7, #19]
          break;
 800985e:	e062      	b.n	8009926 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00b      	beq.n	8009884 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	7c12      	ldrb	r2, [r2, #16]
 8009878:	f107 010a 	add.w	r1, r7, #10
 800987c:	4610      	mov	r0, r2
 800987e:	4798      	blx	r3
 8009880:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009882:	e050      	b.n	8009926 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fa89 	bl	8009d9e <USBD_CtlError>
            err++;
 800988c:	7cfb      	ldrb	r3, [r7, #19]
 800988e:	3301      	adds	r3, #1
 8009890:	74fb      	strb	r3, [r7, #19]
          break;
 8009892:	e048      	b.n	8009926 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	7c12      	ldrb	r2, [r2, #16]
 80098ac:	f107 010a 	add.w	r1, r7, #10
 80098b0:	4610      	mov	r0, r2
 80098b2:	4798      	blx	r3
 80098b4:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098b6:	e036      	b.n	8009926 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fa6f 	bl	8009d9e <USBD_CtlError>
            err++;
 80098c0:	7cfb      	ldrb	r3, [r7, #19]
 80098c2:	3301      	adds	r3, #1
 80098c4:	74fb      	strb	r3, [r7, #19]
          break;
 80098c6:	e02e      	b.n	8009926 <USBD_GetDescriptor+0x262>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 80098c8:	2300      	movs	r3, #0
 80098ca:	617b      	str	r3, [r7, #20]


          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 80098cc:	2300      	movs	r3, #0
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	e020      	b.n	8009914 <USBD_GetDescriptor+0x250>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	32ae      	adds	r2, #174	; 0xae
 80098d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d015      	beq.n	800990e <USBD_GetDescriptor+0x24a>
            {
              pdev->classId = idx;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	32ae      	adds	r2, #174	; 0xae
 80098f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	8852      	ldrh	r2, [r2, #2]
 80098fa:	b2d1      	uxtb	r1, r2
 80098fc:	f107 020a 	add.w	r2, r7, #10
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	4798      	blx	r3
 8009904:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <USBD_GetDescriptor+0x25e>
              {
                continue;
 800990c:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3301      	adds	r3, #1
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	429a      	cmp	r2, r3
 800991e:	d3d8      	bcc.n	80098d2 <USBD_GetDescriptor+0x20e>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009920:	e000      	b.n	8009924 <USBD_GetDescriptor+0x260>
                break;
 8009922:	bf00      	nop
          break;
 8009924:	bf00      	nop
      }
      break;
 8009926:	e037      	b.n	8009998 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	7c1b      	ldrb	r3, [r3, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d109      	bne.n	8009944 <USBD_GetDescriptor+0x280>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009938:	f107 020a 	add.w	r2, r7, #10
 800993c:	4610      	mov	r0, r2
 800993e:	4798      	blx	r3
 8009940:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009942:	e029      	b.n	8009998 <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 8009944:	6839      	ldr	r1, [r7, #0]
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fa29 	bl	8009d9e <USBD_CtlError>
        err++;
 800994c:	7cfb      	ldrb	r3, [r7, #19]
 800994e:	3301      	adds	r3, #1
 8009950:	74fb      	strb	r3, [r7, #19]
      break;
 8009952:	e021      	b.n	8009998 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	7c1b      	ldrb	r3, [r3, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10d      	bne.n	8009978 <USBD_GetDescriptor+0x2b4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009964:	f107 020a 	add.w	r2, r7, #10
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
 800996c:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	3301      	adds	r3, #1
 8009972:	2207      	movs	r2, #7
 8009974:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009976:	e00f      	b.n	8009998 <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fa0f 	bl	8009d9e <USBD_CtlError>
        err++;
 8009980:	7cfb      	ldrb	r3, [r7, #19]
 8009982:	3301      	adds	r3, #1
 8009984:	74fb      	strb	r3, [r7, #19]
      break;
 8009986:	e007      	b.n	8009998 <USBD_GetDescriptor+0x2d4>

    default:
      USBD_CtlError(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fa07 	bl	8009d9e <USBD_CtlError>
      err++;
 8009990:	7cfb      	ldrb	r3, [r7, #19]
 8009992:	3301      	adds	r3, #1
 8009994:	74fb      	strb	r3, [r7, #19]
      break;
 8009996:	bf00      	nop
  }

  if (err != 0U)
 8009998:	7cfb      	ldrb	r3, [r7, #19]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d11e      	bne.n	80099dc <USBD_GetDescriptor+0x318>
  {
    return;
  }

  if (req->wLength != 0U)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	88db      	ldrh	r3, [r3, #6]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d016      	beq.n	80099d4 <USBD_GetDescriptor+0x310>
  {
    if (len != 0U)
 80099a6:	897b      	ldrh	r3, [r7, #10]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00e      	beq.n	80099ca <USBD_GetDescriptor+0x306>
    {
      len = MIN(len, req->wLength);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	88da      	ldrh	r2, [r3, #6]
 80099b0:	897b      	ldrh	r3, [r7, #10]
 80099b2:	4293      	cmp	r3, r2
 80099b4:	bf28      	it	cs
 80099b6:	4613      	movcs	r3, r2
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099bc:	897b      	ldrh	r3, [r7, #10]
 80099be:	461a      	mov	r2, r3
 80099c0:	6979      	ldr	r1, [r7, #20]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fa5c 	bl	8009e80 <USBD_CtlSendData>
 80099c8:	e009      	b.n	80099de <USBD_GetDescriptor+0x31a>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f9e6 	bl	8009d9e <USBD_CtlError>
 80099d2:	e004      	b.n	80099de <USBD_GetDescriptor+0x31a>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 faad 	bl	8009f34 <USBD_CtlSendStatus>
 80099da:	e000      	b.n	80099de <USBD_GetDescriptor+0x31a>
    return;
 80099dc:	bf00      	nop
  }
}
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	889b      	ldrh	r3, [r3, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d131      	bne.n	8009a5a <USBD_SetAddress+0x76>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	88db      	ldrh	r3, [r3, #6]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d12d      	bne.n	8009a5a <USBD_SetAddress+0x76>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	885b      	ldrh	r3, [r3, #2]
 8009a02:	2b7f      	cmp	r3, #127	; 0x7f
 8009a04:	d829      	bhi.n	8009a5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	885b      	ldrh	r3, [r3, #2]
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d104      	bne.n	8009a28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f9bc 	bl	8009d9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a26:	e01d      	b.n	8009a64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	7bfa      	ldrb	r2, [r7, #15]
 8009a2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fe61 	bl	800a6fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa7a 	bl	8009f34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d004      	beq.n	8009a50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2202      	movs	r2, #2
 8009a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a4e:	e009      	b.n	8009a64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a58:	e004      	b.n	8009a64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f99e 	bl	8009d9e <USBD_CtlError>
  }
}
 8009a62:	bf00      	nop
 8009a64:	bf00      	nop
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	885b      	ldrh	r3, [r3, #2]
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	4b4e      	ldr	r3, [pc, #312]	; (8009bbc <USBD_SetConfig+0x150>)
 8009a82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a84:	4b4d      	ldr	r3, [pc, #308]	; (8009bbc <USBD_SetConfig+0x150>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d905      	bls.n	8009a98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f985 	bl	8009d9e <USBD_CtlError>
    return USBD_FAIL;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e08c      	b.n	8009bb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d002      	beq.n	8009aaa <USBD_SetConfig+0x3e>
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d029      	beq.n	8009afc <USBD_SetConfig+0x90>
 8009aa8:	e075      	b.n	8009b96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009aaa:	4b44      	ldr	r3, [pc, #272]	; (8009bbc <USBD_SetConfig+0x150>)
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d020      	beq.n	8009af4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009ab2:	4b42      	ldr	r3, [pc, #264]	; (8009bbc <USBD_SetConfig+0x150>)
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009abc:	4b3f      	ldr	r3, [pc, #252]	; (8009bbc <USBD_SetConfig+0x150>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7fe fff4 	bl	8008ab0 <USBD_SetClassConfig>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d008      	beq.n	8009ae4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f962 	bl	8009d9e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2202      	movs	r2, #2
 8009ade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ae2:	e065      	b.n	8009bb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fa25 	bl	8009f34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2203      	movs	r2, #3
 8009aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009af2:	e05d      	b.n	8009bb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fa1d 	bl	8009f34 <USBD_CtlSendStatus>
      break;
 8009afa:	e059      	b.n	8009bb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009afc:	4b2f      	ldr	r3, [pc, #188]	; (8009bbc <USBD_SetConfig+0x150>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d112      	bne.n	8009b2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2202      	movs	r2, #2
 8009b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009b0c:	4b2b      	ldr	r3, [pc, #172]	; (8009bbc <USBD_SetConfig+0x150>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	461a      	mov	r2, r3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b16:	4b29      	ldr	r3, [pc, #164]	; (8009bbc <USBD_SetConfig+0x150>)
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7fe ffe3 	bl	8008ae8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fa06 	bl	8009f34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b28:	e042      	b.n	8009bb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009b2a:	4b24      	ldr	r3, [pc, #144]	; (8009bbc <USBD_SetConfig+0x150>)
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d02a      	beq.n	8009b8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7fe ffd1 	bl	8008ae8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b46:	4b1d      	ldr	r3, [pc, #116]	; (8009bbc <USBD_SetConfig+0x150>)
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b50:	4b1a      	ldr	r3, [pc, #104]	; (8009bbc <USBD_SetConfig+0x150>)
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7fe ffaa 	bl	8008ab0 <USBD_SetClassConfig>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00f      	beq.n	8009b86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f918 	bl	8009d9e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7fe ffb6 	bl	8008ae8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b84:	e014      	b.n	8009bb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f9d4 	bl	8009f34 <USBD_CtlSendStatus>
      break;
 8009b8c:	e010      	b.n	8009bb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f9d0 	bl	8009f34 <USBD_CtlSendStatus>
      break;
 8009b94:	e00c      	b.n	8009bb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f900 	bl	8009d9e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b9e:	4b07      	ldr	r3, [pc, #28]	; (8009bbc <USBD_SetConfig+0x150>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7fe ff9f 	bl	8008ae8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009baa:	2303      	movs	r3, #3
 8009bac:	73fb      	strb	r3, [r7, #15]
      break;
 8009bae:	bf00      	nop
  }

  return ret;
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	200002c3 	.word	0x200002c3

08009bc0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	88db      	ldrh	r3, [r3, #6]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d004      	beq.n	8009bdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f8e2 	bl	8009d9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bda:	e023      	b.n	8009c24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	dc02      	bgt.n	8009bee <USBD_GetConfig+0x2e>
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	dc03      	bgt.n	8009bf4 <USBD_GetConfig+0x34>
 8009bec:	e015      	b.n	8009c1a <USBD_GetConfig+0x5a>
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d00b      	beq.n	8009c0a <USBD_GetConfig+0x4a>
 8009bf2:	e012      	b.n	8009c1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	2201      	movs	r2, #1
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f93c 	bl	8009e80 <USBD_CtlSendData>
        break;
 8009c08:	e00c      	b.n	8009c24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	2201      	movs	r2, #1
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f934 	bl	8009e80 <USBD_CtlSendData>
        break;
 8009c18:	e004      	b.n	8009c24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f8be 	bl	8009d9e <USBD_CtlError>
        break;
 8009c22:	bf00      	nop
}
 8009c24:	bf00      	nop
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d81e      	bhi.n	8009c82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	88db      	ldrh	r3, [r3, #6]
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d004      	beq.n	8009c56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f8a5 	bl	8009d9e <USBD_CtlError>
        break;
 8009c54:	e01a      	b.n	8009c8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d005      	beq.n	8009c72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	f043 0202 	orr.w	r2, r3, #2
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	330c      	adds	r3, #12
 8009c76:	2202      	movs	r2, #2
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f900 	bl	8009e80 <USBD_CtlSendData>
      break;
 8009c80:	e004      	b.n	8009c8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f88a 	bl	8009d9e <USBD_CtlError>
      break;
 8009c8a:	bf00      	nop
  }
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	885b      	ldrh	r3, [r3, #2]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d107      	bne.n	8009cb6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f940 	bl	8009f34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009cb4:	e013      	b.n	8009cde <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	885b      	ldrh	r3, [r3, #2]
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d10b      	bne.n	8009cd6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	889b      	ldrh	r3, [r3, #4]
 8009cc2:	0a1b      	lsrs	r3, r3, #8
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f930 	bl	8009f34 <USBD_CtlSendStatus>
}
 8009cd4:	e003      	b.n	8009cde <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f860 	bl	8009d9e <USBD_CtlError>
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b082      	sub	sp, #8
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d80b      	bhi.n	8009d16 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	885b      	ldrh	r3, [r3, #2]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d10c      	bne.n	8009d20 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f910 	bl	8009f34 <USBD_CtlSendStatus>
      }
      break;
 8009d14:	e004      	b.n	8009d20 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f840 	bl	8009d9e <USBD_CtlError>
      break;
 8009d1e:	e000      	b.n	8009d22 <USBD_ClrFeature+0x3c>
      break;
 8009d20:	bf00      	nop
  }
}
 8009d22:	bf00      	nop
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	781a      	ldrb	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	3301      	adds	r3, #1
 8009d44:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	781a      	ldrb	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3301      	adds	r3, #1
 8009d52:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f7ff fa1a 	bl	800918e <SWAPBYTE>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3301      	adds	r3, #1
 8009d66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f7ff fa0d 	bl	800918e <SWAPBYTE>
 8009d74:	4603      	mov	r3, r0
 8009d76:	461a      	mov	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3301      	adds	r3, #1
 8009d86:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f7ff fa00 	bl	800918e <SWAPBYTE>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	461a      	mov	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	80da      	strh	r2, [r3, #6]
}
 8009d96:	bf00      	nop
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009da8:	2180      	movs	r1, #128	; 0x80
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fc3c 	bl	800a628 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009db0:	2100      	movs	r1, #0
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fc38 	bl	800a628 <USBD_LL_StallEP>
}
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d036      	beq.n	8009e44 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009dda:	6938      	ldr	r0, [r7, #16]
 8009ddc:	f000 f836 	bl	8009e4c <USBD_GetLen>
 8009de0:	4603      	mov	r3, r0
 8009de2:	3301      	adds	r3, #1
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	005b      	lsls	r3, r3, #1
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	4413      	add	r3, r2
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	7812      	ldrb	r2, [r2, #0]
 8009df8:	701a      	strb	r2, [r3, #0]
  idx++;
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	4413      	add	r3, r2
 8009e06:	2203      	movs	r2, #3
 8009e08:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e0a:	7dfb      	ldrb	r3, [r7, #23]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e10:	e013      	b.n	8009e3a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	4413      	add	r3, r2
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	7812      	ldrb	r2, [r2, #0]
 8009e1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	3301      	adds	r3, #1
 8009e22:	613b      	str	r3, [r7, #16]
    idx++;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	3301      	adds	r3, #1
 8009e28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	4413      	add	r3, r2
 8009e30:	2200      	movs	r2, #0
 8009e32:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
 8009e36:	3301      	adds	r3, #1
 8009e38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1e7      	bne.n	8009e12 <USBD_GetString+0x52>
 8009e42:	e000      	b.n	8009e46 <USBD_GetString+0x86>
    return;
 8009e44:	bf00      	nop
  }
}
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e5c:	e005      	b.n	8009e6a <USBD_GetLen+0x1e>
  {
    len++;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	3301      	adds	r3, #1
 8009e62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	3301      	adds	r3, #1
 8009e68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1f5      	bne.n	8009e5e <USBD_GetLen+0x12>
  }

  return len;
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f000 fc47 	bl	800a73a <USBD_LL_Transmit>

  return USBD_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	60b9      	str	r1, [r7, #8]
 8009ec0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 fc36 	bl	800a73a <USBD_LL_Transmit>

  return USBD_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2203      	movs	r2, #3
 8009ee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	2100      	movs	r1, #0
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f000 fc3a 	bl	800a77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	60f8      	str	r0, [r7, #12]
 8009f1a:	60b9      	str	r1, [r7, #8]
 8009f1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	2100      	movs	r1, #0
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 fc29 	bl	800a77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2204      	movs	r2, #4
 8009f40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f44:	2300      	movs	r3, #0
 8009f46:	2200      	movs	r2, #0
 8009f48:	2100      	movs	r1, #0
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fbf5 	bl	800a73a <USBD_LL_Transmit>

  return USBD_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b082      	sub	sp, #8
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2205      	movs	r2, #5
 8009f66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	2100      	movs	r1, #0
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fc03 	bl	800a77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f84:	2200      	movs	r2, #0
 8009f86:	4913      	ldr	r1, [pc, #76]	; (8009fd4 <MX_USB_DEVICE_Init+0x54>)
 8009f88:	4813      	ldr	r0, [pc, #76]	; (8009fd8 <MX_USB_DEVICE_Init+0x58>)
 8009f8a:	f7fe fcf9 	bl	8008980 <USBD_Init>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f94:	f7f6 fcca 	bl	800092c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8009f98:	4910      	ldr	r1, [pc, #64]	; (8009fdc <MX_USB_DEVICE_Init+0x5c>)
 8009f9a:	480f      	ldr	r0, [pc, #60]	; (8009fd8 <MX_USB_DEVICE_Init+0x58>)
 8009f9c:	f7fe fd20 	bl	80089e0 <USBD_RegisterClass>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009fa6:	f7f6 fcc1 	bl	800092c <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_QSPI_FLASH_fops_FS) != USBD_OK)
 8009faa:	490d      	ldr	r1, [pc, #52]	; (8009fe0 <MX_USB_DEVICE_Init+0x60>)
 8009fac:	480a      	ldr	r0, [pc, #40]	; (8009fd8 <MX_USB_DEVICE_Init+0x58>)
 8009fae:	f7fe f8e1 	bl	8008174 <USBD_DFU_RegisterMedia>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009fb8:	f7f6 fcb8 	bl	800092c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009fbc:	4806      	ldr	r0, [pc, #24]	; (8009fd8 <MX_USB_DEVICE_Init+0x58>)
 8009fbe:	f7fe fd45 	bl	8008a4c <USBD_Start>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009fc8:	f7f6 fcb0 	bl	800092c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009fcc:	f7f9 fb54 	bl	8003678 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009fd0:	bf00      	nop
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20000090 	.word	0x20000090
 8009fd8:	200002c4 	.word	0x200002c4
 8009fdc:	2000002c 	.word	0x2000002c
 8009fe0:	20000008 	.word	0x20000008

08009fe4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	4603      	mov	r3, r0
 8009fec:	6039      	str	r1, [r7, #0]
 8009fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	2212      	movs	r2, #18
 8009ff4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ff6:	4b03      	ldr	r3, [pc, #12]	; (800a004 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	200000ac 	.word	0x200000ac

0800a008 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4603      	mov	r3, r0
 800a010:	6039      	str	r1, [r7, #0]
 800a012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	2204      	movs	r2, #4
 800a018:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a01a:	4b03      	ldr	r3, [pc, #12]	; (800a028 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	200000c0 	.word	0x200000c0

0800a02c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	6039      	str	r1, [r7, #0]
 800a036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a038:	79fb      	ldrb	r3, [r7, #7]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d105      	bne.n	800a04a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	4907      	ldr	r1, [pc, #28]	; (800a060 <USBD_FS_ProductStrDescriptor+0x34>)
 800a042:	4808      	ldr	r0, [pc, #32]	; (800a064 <USBD_FS_ProductStrDescriptor+0x38>)
 800a044:	f7ff febc 	bl	8009dc0 <USBD_GetString>
 800a048:	e004      	b.n	800a054 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	4904      	ldr	r1, [pc, #16]	; (800a060 <USBD_FS_ProductStrDescriptor+0x34>)
 800a04e:	4805      	ldr	r0, [pc, #20]	; (800a064 <USBD_FS_ProductStrDescriptor+0x38>)
 800a050:	f7ff feb6 	bl	8009dc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a054:	4b02      	ldr	r3, [pc, #8]	; (800a060 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	200005a0 	.word	0x200005a0
 800a064:	0800b98c 	.word	0x0800b98c

0800a068 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	4603      	mov	r3, r0
 800a070:	6039      	str	r1, [r7, #0]
 800a072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	4904      	ldr	r1, [pc, #16]	; (800a088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a078:	4804      	ldr	r0, [pc, #16]	; (800a08c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a07a:	f7ff fea1 	bl	8009dc0 <USBD_GetString>
  return USBD_StrDesc;
 800a07e:	4b02      	ldr	r3, [pc, #8]	; (800a088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a080:	4618      	mov	r0, r3
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	200005a0 	.word	0x200005a0
 800a08c:	0800b9ac 	.word	0x0800b9ac

0800a090 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	6039      	str	r1, [r7, #0]
 800a09a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	221a      	movs	r2, #26
 800a0a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0a2:	f000 f843 	bl	800a12c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a0a6:	4b02      	ldr	r3, [pc, #8]	; (800a0b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	200000c4 	.word	0x200000c4

0800a0b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	6039      	str	r1, [r7, #0]
 800a0be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d105      	bne.n	800a0d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	4907      	ldr	r1, [pc, #28]	; (800a0e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0ca:	4808      	ldr	r0, [pc, #32]	; (800a0ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0cc:	f7ff fe78 	bl	8009dc0 <USBD_GetString>
 800a0d0:	e004      	b.n	800a0dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	4904      	ldr	r1, [pc, #16]	; (800a0e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0d6:	4805      	ldr	r0, [pc, #20]	; (800a0ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0d8:	f7ff fe72 	bl	8009dc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0dc:	4b02      	ldr	r3, [pc, #8]	; (800a0e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	200005a0 	.word	0x200005a0
 800a0ec:	0800b9c0 	.word	0x0800b9c0

0800a0f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	6039      	str	r1, [r7, #0]
 800a0fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d105      	bne.n	800a10e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	4907      	ldr	r1, [pc, #28]	; (800a124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a106:	4808      	ldr	r0, [pc, #32]	; (800a128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a108:	f7ff fe5a 	bl	8009dc0 <USBD_GetString>
 800a10c:	e004      	b.n	800a118 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	4904      	ldr	r1, [pc, #16]	; (800a124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a112:	4805      	ldr	r0, [pc, #20]	; (800a128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a114:	f7ff fe54 	bl	8009dc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a118:	4b02      	ldr	r3, [pc, #8]	; (800a124 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	200005a0 	.word	0x200005a0
 800a128:	0800b9cc 	.word	0x0800b9cc

0800a12c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a132:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <Get_SerialNum+0x44>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a138:	4b0e      	ldr	r3, [pc, #56]	; (800a174 <Get_SerialNum+0x48>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a13e:	4b0e      	ldr	r3, [pc, #56]	; (800a178 <Get_SerialNum+0x4c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4413      	add	r3, r2
 800a14a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d009      	beq.n	800a166 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a152:	2208      	movs	r2, #8
 800a154:	4909      	ldr	r1, [pc, #36]	; (800a17c <Get_SerialNum+0x50>)
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f000 f814 	bl	800a184 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a15c:	2204      	movs	r2, #4
 800a15e:	4908      	ldr	r1, [pc, #32]	; (800a180 <Get_SerialNum+0x54>)
 800a160:	68b8      	ldr	r0, [r7, #8]
 800a162:	f000 f80f 	bl	800a184 <IntToUnicode>
  }
}
 800a166:	bf00      	nop
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	1ff1e800 	.word	0x1ff1e800
 800a174:	1ff1e804 	.word	0x1ff1e804
 800a178:	1ff1e808 	.word	0x1ff1e808
 800a17c:	200000c6 	.word	0x200000c6
 800a180:	200000d6 	.word	0x200000d6

0800a184 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	4613      	mov	r3, r2
 800a190:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a196:	2300      	movs	r3, #0
 800a198:	75fb      	strb	r3, [r7, #23]
 800a19a:	e027      	b.n	800a1ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	0f1b      	lsrs	r3, r3, #28
 800a1a0:	2b09      	cmp	r3, #9
 800a1a2:	d80b      	bhi.n	800a1bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	0f1b      	lsrs	r3, r3, #28
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	7dfb      	ldrb	r3, [r7, #23]
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	440b      	add	r3, r1
 800a1b4:	3230      	adds	r2, #48	; 0x30
 800a1b6:	b2d2      	uxtb	r2, r2
 800a1b8:	701a      	strb	r2, [r3, #0]
 800a1ba:	e00a      	b.n	800a1d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	0f1b      	lsrs	r3, r3, #28
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	440b      	add	r3, r1
 800a1cc:	3237      	adds	r2, #55	; 0x37
 800a1ce:	b2d2      	uxtb	r2, r2
 800a1d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	3301      	adds	r3, #1
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1e6:	7dfb      	ldrb	r3, [r7, #23]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	75fb      	strb	r3, [r7, #23]
 800a1ec:	7dfa      	ldrb	r2, [r7, #23]
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d3d3      	bcc.n	800a19c <IntToUnicode+0x18>
  }
}
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop
 800a1f8:	371c      	adds	r7, #28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
	...

0800a204 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b0ba      	sub	sp, #232	; 0xe8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a20c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a210:	2200      	movs	r2, #0
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	605a      	str	r2, [r3, #4]
 800a216:	609a      	str	r2, [r3, #8]
 800a218:	60da      	str	r2, [r3, #12]
 800a21a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a21c:	f107 0310 	add.w	r3, r7, #16
 800a220:	22c0      	movs	r2, #192	; 0xc0
 800a222:	2100      	movs	r1, #0
 800a224:	4618      	mov	r0, r3
 800a226:	f000 fb39 	bl	800a89c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a2c      	ldr	r2, [pc, #176]	; (800a2e0 <HAL_PCD_MspInit+0xdc>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d151      	bne.n	800a2d8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a234:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a238:	f04f 0300 	mov.w	r3, #0
 800a23c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800a240:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a248:	f107 0310 	add.w	r3, r7, #16
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fa fe83 	bl	8004f58 <HAL_RCCEx_PeriphCLKConfig>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800a258:	f7f6 fb68 	bl	800092c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a25c:	f7f9 fa0c 	bl	8003678 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a260:	4b20      	ldr	r3, [pc, #128]	; (800a2e4 <HAL_PCD_MspInit+0xe0>)
 800a262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a266:	4a1f      	ldr	r2, [pc, #124]	; (800a2e4 <HAL_PCD_MspInit+0xe0>)
 800a268:	f043 0301 	orr.w	r3, r3, #1
 800a26c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a270:	4b1c      	ldr	r3, [pc, #112]	; (800a2e4 <HAL_PCD_MspInit+0xe0>)
 800a272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800a27e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a286:	2302      	movs	r3, #2
 800a288:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a28c:	2300      	movs	r3, #0
 800a28e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a292:	2300      	movs	r3, #0
 800a294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800a298:	230a      	movs	r3, #10
 800a29a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a29e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	4810      	ldr	r0, [pc, #64]	; (800a2e8 <HAL_PCD_MspInit+0xe4>)
 800a2a6:	f7f7 fd1f 	bl	8001ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a2aa:	4b0e      	ldr	r3, [pc, #56]	; (800a2e4 <HAL_PCD_MspInit+0xe0>)
 800a2ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a2b0:	4a0c      	ldr	r2, [pc, #48]	; (800a2e4 <HAL_PCD_MspInit+0xe0>)
 800a2b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a2ba:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <HAL_PCD_MspInit+0xe0>)
 800a2bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a2c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2c4:	60bb      	str	r3, [r7, #8]
 800a2c6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	2065      	movs	r0, #101	; 0x65
 800a2ce:	f7f7 fc5a 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a2d2:	2065      	movs	r0, #101	; 0x65
 800a2d4:	f7f7 fc71 	bl	8001bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2d8:	bf00      	nop
 800a2da:	37e8      	adds	r7, #232	; 0xe8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	40080000 	.word	0x40080000
 800a2e4:	58024400 	.word	0x58024400
 800a2e8:	58020000 	.word	0x58020000

0800a2ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a300:	4619      	mov	r1, r3
 800a302:	4610      	mov	r0, r2
 800a304:	f7fe fc0a 	bl	8008b1c <USBD_LL_SetupStage>
}
 800a308:	bf00      	nop
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a322:	78fa      	ldrb	r2, [r7, #3]
 800a324:	6879      	ldr	r1, [r7, #4]
 800a326:	4613      	mov	r3, r2
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	4413      	add	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	440b      	add	r3, r1
 800a330:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	78fb      	ldrb	r3, [r7, #3]
 800a338:	4619      	mov	r1, r3
 800a33a:	f7fe fc44 	bl	8008bc6 <USBD_LL_DataOutStage>
}
 800a33e:	bf00      	nop
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b082      	sub	sp, #8
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	460b      	mov	r3, r1
 800a350:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a358:	78fa      	ldrb	r2, [r7, #3]
 800a35a:	6879      	ldr	r1, [r7, #4]
 800a35c:	4613      	mov	r3, r2
 800a35e:	00db      	lsls	r3, r3, #3
 800a360:	4413      	add	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	440b      	add	r3, r1
 800a366:	3348      	adds	r3, #72	; 0x48
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	78fb      	ldrb	r3, [r7, #3]
 800a36c:	4619      	mov	r1, r3
 800a36e:	f7fe fcdd 	bl	8008d2c <USBD_LL_DataInStage>
}
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe fe17 	bl	8008fbc <USBD_LL_SOF>
}
 800a38e:	bf00      	nop
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b084      	sub	sp, #16
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d102      	bne.n	800a3b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]
 800a3ae:	e008      	b.n	800a3c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d102      	bne.n	800a3be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	73fb      	strb	r3, [r7, #15]
 800a3bc:	e001      	b.n	800a3c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a3be:	f7f6 fab5 	bl	800092c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3c8:	7bfa      	ldrb	r2, [r7, #15]
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fe fdb1 	bl	8008f34 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe fd59 	bl	8008e90 <USBD_LL_Reset>
}
 800a3de:	bf00      	nop
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
	...

0800a3e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe fdac 	bl	8008f54 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	6812      	ldr	r2, [r2, #0]
 800a40a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a40e:	f043 0301 	orr.w	r3, r3, #1
 800a412:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a1b      	ldr	r3, [r3, #32]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d005      	beq.n	800a428 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a41c:	4b04      	ldr	r3, [pc, #16]	; (800a430 <HAL_PCD_SuspendCallback+0x48>)
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	4a03      	ldr	r2, [pc, #12]	; (800a430 <HAL_PCD_SuspendCallback+0x48>)
 800a422:	f043 0306 	orr.w	r3, r3, #6
 800a426:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a428:	bf00      	nop
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	e000ed00 	.word	0xe000ed00

0800a434 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe fda2 	bl	8008f8c <USBD_LL_Resume>
}
 800a448:	bf00      	nop
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a462:	78fa      	ldrb	r2, [r7, #3]
 800a464:	4611      	mov	r1, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe fdfa 	bl	8009060 <USBD_LL_IsoOUTIncomplete>
}
 800a46c:	bf00      	nop
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a486:	78fa      	ldrb	r2, [r7, #3]
 800a488:	4611      	mov	r1, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fe fdb6 	bl	8008ffc <USBD_LL_IsoINIncomplete>
}
 800a490:	bf00      	nop
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fe fe0c 	bl	80090c4 <USBD_LL_DevConnected>
}
 800a4ac:	bf00      	nop
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe fe09 	bl	80090da <USBD_LL_DevDisconnected>
}
 800a4c8:	bf00      	nop
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d13e      	bne.n	800a55e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a4e0:	4a21      	ldr	r2, [pc, #132]	; (800a568 <USBD_LL_Init+0x98>)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a1f      	ldr	r2, [pc, #124]	; (800a568 <USBD_LL_Init+0x98>)
 800a4ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4f0:	4b1d      	ldr	r3, [pc, #116]	; (800a568 <USBD_LL_Init+0x98>)
 800a4f2:	4a1e      	ldr	r2, [pc, #120]	; (800a56c <USBD_LL_Init+0x9c>)
 800a4f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800a4f6:	4b1c      	ldr	r3, [pc, #112]	; (800a568 <USBD_LL_Init+0x98>)
 800a4f8:	2209      	movs	r2, #9
 800a4fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a4fc:	4b1a      	ldr	r3, [pc, #104]	; (800a568 <USBD_LL_Init+0x98>)
 800a4fe:	2202      	movs	r2, #2
 800a500:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a502:	4b19      	ldr	r3, [pc, #100]	; (800a568 <USBD_LL_Init+0x98>)
 800a504:	2200      	movs	r2, #0
 800a506:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a508:	4b17      	ldr	r3, [pc, #92]	; (800a568 <USBD_LL_Init+0x98>)
 800a50a:	2202      	movs	r2, #2
 800a50c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a50e:	4b16      	ldr	r3, [pc, #88]	; (800a568 <USBD_LL_Init+0x98>)
 800a510:	2200      	movs	r2, #0
 800a512:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a514:	4b14      	ldr	r3, [pc, #80]	; (800a568 <USBD_LL_Init+0x98>)
 800a516:	2200      	movs	r2, #0
 800a518:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a51a:	4b13      	ldr	r3, [pc, #76]	; (800a568 <USBD_LL_Init+0x98>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a520:	4b11      	ldr	r3, [pc, #68]	; (800a568 <USBD_LL_Init+0x98>)
 800a522:	2200      	movs	r2, #0
 800a524:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a526:	4b10      	ldr	r3, [pc, #64]	; (800a568 <USBD_LL_Init+0x98>)
 800a528:	2200      	movs	r2, #0
 800a52a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a52c:	4b0e      	ldr	r3, [pc, #56]	; (800a568 <USBD_LL_Init+0x98>)
 800a52e:	2200      	movs	r2, #0
 800a530:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a532:	480d      	ldr	r0, [pc, #52]	; (800a568 <USBD_LL_Init+0x98>)
 800a534:	f7f7 fdd3 	bl	80020de <HAL_PCD_Init>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a53e:	f7f6 f9f5 	bl	800092c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a542:	2180      	movs	r1, #128	; 0x80
 800a544:	4808      	ldr	r0, [pc, #32]	; (800a568 <USBD_LL_Init+0x98>)
 800a546:	f7f9 f81c 	bl	8003582 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a54a:	2240      	movs	r2, #64	; 0x40
 800a54c:	2100      	movs	r1, #0
 800a54e:	4806      	ldr	r0, [pc, #24]	; (800a568 <USBD_LL_Init+0x98>)
 800a550:	f7f8 ffd0 	bl	80034f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a554:	2280      	movs	r2, #128	; 0x80
 800a556:	2101      	movs	r1, #1
 800a558:	4803      	ldr	r0, [pc, #12]	; (800a568 <USBD_LL_Init+0x98>)
 800a55a:	f7f8 ffcb 	bl	80034f4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	200007a0 	.word	0x200007a0
 800a56c:	40080000 	.word	0x40080000

0800a570 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a586:	4618      	mov	r0, r3
 800a588:	f7f7 fecd 	bl	8002326 <HAL_PCD_Start>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a590:	7bfb      	ldrb	r3, [r7, #15]
 800a592:	4618      	mov	r0, r3
 800a594:	f000 f92c 	bl	800a7f0 <USBD_Get_USB_Status>
 800a598:	4603      	mov	r3, r0
 800a59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7f7 fee7 	bl	8002390 <HAL_PCD_Stop>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5c6:	7bfb      	ldrb	r3, [r7, #15]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 f911 	bl	800a7f0 <USBD_Get_USB_Status>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	4608      	mov	r0, r1
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	70fb      	strb	r3, [r7, #3]
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	70bb      	strb	r3, [r7, #2]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a604:	78bb      	ldrb	r3, [r7, #2]
 800a606:	883a      	ldrh	r2, [r7, #0]
 800a608:	78f9      	ldrb	r1, [r7, #3]
 800a60a:	f7f8 fbed 	bl	8002de8 <HAL_PCD_EP_Open>
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	4618      	mov	r0, r3
 800a616:	f000 f8eb 	bl	800a7f0 <USBD_Get_USB_Status>
 800a61a:	4603      	mov	r3, r0
 800a61c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a61e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a642:	78fa      	ldrb	r2, [r7, #3]
 800a644:	4611      	mov	r1, r2
 800a646:	4618      	mov	r0, r3
 800a648:	f7f8 fcad 	bl	8002fa6 <HAL_PCD_EP_SetStall>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a650:	7bfb      	ldrb	r3, [r7, #15]
 800a652:	4618      	mov	r0, r3
 800a654:	f000 f8cc 	bl	800a7f0 <USBD_Get_USB_Status>
 800a658:	4603      	mov	r3, r0
 800a65a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a65c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b084      	sub	sp, #16
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	460b      	mov	r3, r1
 800a670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a680:	78fa      	ldrb	r2, [r7, #3]
 800a682:	4611      	mov	r1, r2
 800a684:	4618      	mov	r0, r3
 800a686:	f7f8 fcf2 	bl	800306e <HAL_PCD_EP_ClrStall>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	4618      	mov	r0, r3
 800a692:	f000 f8ad 	bl	800a7f0 <USBD_Get_USB_Status>
 800a696:	4603      	mov	r3, r0
 800a698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a6b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	da0b      	bge.n	800a6d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6c6:	68f9      	ldr	r1, [r7, #12]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	4413      	add	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	440b      	add	r3, r1
 800a6d2:	333e      	adds	r3, #62	; 0x3e
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	e00b      	b.n	800a6f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6d8:	78fb      	ldrb	r3, [r7, #3]
 800a6da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6de:	68f9      	ldr	r1, [r7, #12]
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	00db      	lsls	r3, r3, #3
 800a6e4:	4413      	add	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	440b      	add	r3, r1
 800a6ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a6ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a716:	78fa      	ldrb	r2, [r7, #3]
 800a718:	4611      	mov	r1, r2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7f8 fb3f 	bl	8002d9e <HAL_PCD_SetAddress>
 800a720:	4603      	mov	r3, r0
 800a722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a724:	7bfb      	ldrb	r3, [r7, #15]
 800a726:	4618      	mov	r0, r3
 800a728:	f000 f862 	bl	800a7f0 <USBD_Get_USB_Status>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a730:	7bbb      	ldrb	r3, [r7, #14]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b086      	sub	sp, #24
 800a73e:	af00      	add	r7, sp, #0
 800a740:	60f8      	str	r0, [r7, #12]
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	603b      	str	r3, [r7, #0]
 800a746:	460b      	mov	r3, r1
 800a748:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a758:	7af9      	ldrb	r1, [r7, #11]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	f7f8 fbe7 	bl	8002f30 <HAL_PCD_EP_Transmit>
 800a762:	4603      	mov	r3, r0
 800a764:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a766:	7dfb      	ldrb	r3, [r7, #23]
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f841 	bl	800a7f0 <USBD_Get_USB_Status>
 800a76e:	4603      	mov	r3, r0
 800a770:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a772:	7dbb      	ldrb	r3, [r7, #22]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3718      	adds	r7, #24
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	607a      	str	r2, [r7, #4]
 800a786:	603b      	str	r3, [r7, #0]
 800a788:	460b      	mov	r3, r1
 800a78a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a79a:	7af9      	ldrb	r1, [r7, #11]
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	f7f8 fb8a 	bl	8002eb8 <HAL_PCD_EP_Receive>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7a8:	7dfb      	ldrb	r3, [r7, #23]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f000 f820 	bl	800a7f0 <USBD_Get_USB_Status>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7c8:	4b03      	ldr	r3, [pc, #12]	; (800a7d8 <USBD_static_malloc+0x18>)
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	20000cac 	.word	0x20000cac

0800a7dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	2b03      	cmp	r3, #3
 800a802:	d817      	bhi.n	800a834 <USBD_Get_USB_Status+0x44>
 800a804:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <USBD_Get_USB_Status+0x1c>)
 800a806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80a:	bf00      	nop
 800a80c:	0800a81d 	.word	0x0800a81d
 800a810:	0800a823 	.word	0x0800a823
 800a814:	0800a829 	.word	0x0800a829
 800a818:	0800a82f 	.word	0x0800a82f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73fb      	strb	r3, [r7, #15]
    break;
 800a820:	e00b      	b.n	800a83a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a822:	2303      	movs	r3, #3
 800a824:	73fb      	strb	r3, [r7, #15]
    break;
 800a826:	e008      	b.n	800a83a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a828:	2301      	movs	r3, #1
 800a82a:	73fb      	strb	r3, [r7, #15]
    break;
 800a82c:	e005      	b.n	800a83a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a82e:	2303      	movs	r3, #3
 800a830:	73fb      	strb	r3, [r7, #15]
    break;
 800a832:	e002      	b.n	800a83a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a834:	2303      	movs	r3, #3
 800a836:	73fb      	strb	r3, [r7, #15]
    break;
 800a838:	bf00      	nop
  }
  return usb_status;
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <__errno>:
 800a848:	4b01      	ldr	r3, [pc, #4]	; (800a850 <__errno+0x8>)
 800a84a:	6818      	ldr	r0, [r3, #0]
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	200000e0 	.word	0x200000e0

0800a854 <__libc_init_array>:
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	4d0d      	ldr	r5, [pc, #52]	; (800a88c <__libc_init_array+0x38>)
 800a858:	4c0d      	ldr	r4, [pc, #52]	; (800a890 <__libc_init_array+0x3c>)
 800a85a:	1b64      	subs	r4, r4, r5
 800a85c:	10a4      	asrs	r4, r4, #2
 800a85e:	2600      	movs	r6, #0
 800a860:	42a6      	cmp	r6, r4
 800a862:	d109      	bne.n	800a878 <__libc_init_array+0x24>
 800a864:	4d0b      	ldr	r5, [pc, #44]	; (800a894 <__libc_init_array+0x40>)
 800a866:	4c0c      	ldr	r4, [pc, #48]	; (800a898 <__libc_init_array+0x44>)
 800a868:	f001 f824 	bl	800b8b4 <_init>
 800a86c:	1b64      	subs	r4, r4, r5
 800a86e:	10a4      	asrs	r4, r4, #2
 800a870:	2600      	movs	r6, #0
 800a872:	42a6      	cmp	r6, r4
 800a874:	d105      	bne.n	800a882 <__libc_init_array+0x2e>
 800a876:	bd70      	pop	{r4, r5, r6, pc}
 800a878:	f855 3b04 	ldr.w	r3, [r5], #4
 800a87c:	4798      	blx	r3
 800a87e:	3601      	adds	r6, #1
 800a880:	e7ee      	b.n	800a860 <__libc_init_array+0xc>
 800a882:	f855 3b04 	ldr.w	r3, [r5], #4
 800a886:	4798      	blx	r3
 800a888:	3601      	adds	r6, #1
 800a88a:	e7f2      	b.n	800a872 <__libc_init_array+0x1e>
 800a88c:	0800ba84 	.word	0x0800ba84
 800a890:	0800ba84 	.word	0x0800ba84
 800a894:	0800ba84 	.word	0x0800ba84
 800a898:	0800ba88 	.word	0x0800ba88

0800a89c <memset>:
 800a89c:	4402      	add	r2, r0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d100      	bne.n	800a8a6 <memset+0xa>
 800a8a4:	4770      	bx	lr
 800a8a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8aa:	e7f9      	b.n	800a8a0 <memset+0x4>

0800a8ac <iprintf>:
 800a8ac:	b40f      	push	{r0, r1, r2, r3}
 800a8ae:	4b0a      	ldr	r3, [pc, #40]	; (800a8d8 <iprintf+0x2c>)
 800a8b0:	b513      	push	{r0, r1, r4, lr}
 800a8b2:	681c      	ldr	r4, [r3, #0]
 800a8b4:	b124      	cbz	r4, 800a8c0 <iprintf+0x14>
 800a8b6:	69a3      	ldr	r3, [r4, #24]
 800a8b8:	b913      	cbnz	r3, 800a8c0 <iprintf+0x14>
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 fa5e 	bl	800ad7c <__sinit>
 800a8c0:	ab05      	add	r3, sp, #20
 800a8c2:	9a04      	ldr	r2, [sp, #16]
 800a8c4:	68a1      	ldr	r1, [r4, #8]
 800a8c6:	9301      	str	r3, [sp, #4]
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f000 fc67 	bl	800b19c <_vfiprintf_r>
 800a8ce:	b002      	add	sp, #8
 800a8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d4:	b004      	add	sp, #16
 800a8d6:	4770      	bx	lr
 800a8d8:	200000e0 	.word	0x200000e0

0800a8dc <_puts_r>:
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	460e      	mov	r6, r1
 800a8e0:	4605      	mov	r5, r0
 800a8e2:	b118      	cbz	r0, 800a8ec <_puts_r+0x10>
 800a8e4:	6983      	ldr	r3, [r0, #24]
 800a8e6:	b90b      	cbnz	r3, 800a8ec <_puts_r+0x10>
 800a8e8:	f000 fa48 	bl	800ad7c <__sinit>
 800a8ec:	69ab      	ldr	r3, [r5, #24]
 800a8ee:	68ac      	ldr	r4, [r5, #8]
 800a8f0:	b913      	cbnz	r3, 800a8f8 <_puts_r+0x1c>
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f000 fa42 	bl	800ad7c <__sinit>
 800a8f8:	4b2c      	ldr	r3, [pc, #176]	; (800a9ac <_puts_r+0xd0>)
 800a8fa:	429c      	cmp	r4, r3
 800a8fc:	d120      	bne.n	800a940 <_puts_r+0x64>
 800a8fe:	686c      	ldr	r4, [r5, #4]
 800a900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a902:	07db      	lsls	r3, r3, #31
 800a904:	d405      	bmi.n	800a912 <_puts_r+0x36>
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	0598      	lsls	r0, r3, #22
 800a90a:	d402      	bmi.n	800a912 <_puts_r+0x36>
 800a90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a90e:	f000 fad3 	bl	800aeb8 <__retarget_lock_acquire_recursive>
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	0719      	lsls	r1, r3, #28
 800a916:	d51d      	bpl.n	800a954 <_puts_r+0x78>
 800a918:	6923      	ldr	r3, [r4, #16]
 800a91a:	b1db      	cbz	r3, 800a954 <_puts_r+0x78>
 800a91c:	3e01      	subs	r6, #1
 800a91e:	68a3      	ldr	r3, [r4, #8]
 800a920:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a924:	3b01      	subs	r3, #1
 800a926:	60a3      	str	r3, [r4, #8]
 800a928:	bb39      	cbnz	r1, 800a97a <_puts_r+0x9e>
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	da38      	bge.n	800a9a0 <_puts_r+0xc4>
 800a92e:	4622      	mov	r2, r4
 800a930:	210a      	movs	r1, #10
 800a932:	4628      	mov	r0, r5
 800a934:	f000 f848 	bl	800a9c8 <__swbuf_r>
 800a938:	3001      	adds	r0, #1
 800a93a:	d011      	beq.n	800a960 <_puts_r+0x84>
 800a93c:	250a      	movs	r5, #10
 800a93e:	e011      	b.n	800a964 <_puts_r+0x88>
 800a940:	4b1b      	ldr	r3, [pc, #108]	; (800a9b0 <_puts_r+0xd4>)
 800a942:	429c      	cmp	r4, r3
 800a944:	d101      	bne.n	800a94a <_puts_r+0x6e>
 800a946:	68ac      	ldr	r4, [r5, #8]
 800a948:	e7da      	b.n	800a900 <_puts_r+0x24>
 800a94a:	4b1a      	ldr	r3, [pc, #104]	; (800a9b4 <_puts_r+0xd8>)
 800a94c:	429c      	cmp	r4, r3
 800a94e:	bf08      	it	eq
 800a950:	68ec      	ldreq	r4, [r5, #12]
 800a952:	e7d5      	b.n	800a900 <_puts_r+0x24>
 800a954:	4621      	mov	r1, r4
 800a956:	4628      	mov	r0, r5
 800a958:	f000 f888 	bl	800aa6c <__swsetup_r>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d0dd      	beq.n	800a91c <_puts_r+0x40>
 800a960:	f04f 35ff 	mov.w	r5, #4294967295
 800a964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a966:	07da      	lsls	r2, r3, #31
 800a968:	d405      	bmi.n	800a976 <_puts_r+0x9a>
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	059b      	lsls	r3, r3, #22
 800a96e:	d402      	bmi.n	800a976 <_puts_r+0x9a>
 800a970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a972:	f000 faa2 	bl	800aeba <__retarget_lock_release_recursive>
 800a976:	4628      	mov	r0, r5
 800a978:	bd70      	pop	{r4, r5, r6, pc}
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	da04      	bge.n	800a988 <_puts_r+0xac>
 800a97e:	69a2      	ldr	r2, [r4, #24]
 800a980:	429a      	cmp	r2, r3
 800a982:	dc06      	bgt.n	800a992 <_puts_r+0xb6>
 800a984:	290a      	cmp	r1, #10
 800a986:	d004      	beq.n	800a992 <_puts_r+0xb6>
 800a988:	6823      	ldr	r3, [r4, #0]
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	6022      	str	r2, [r4, #0]
 800a98e:	7019      	strb	r1, [r3, #0]
 800a990:	e7c5      	b.n	800a91e <_puts_r+0x42>
 800a992:	4622      	mov	r2, r4
 800a994:	4628      	mov	r0, r5
 800a996:	f000 f817 	bl	800a9c8 <__swbuf_r>
 800a99a:	3001      	adds	r0, #1
 800a99c:	d1bf      	bne.n	800a91e <_puts_r+0x42>
 800a99e:	e7df      	b.n	800a960 <_puts_r+0x84>
 800a9a0:	6823      	ldr	r3, [r4, #0]
 800a9a2:	250a      	movs	r5, #10
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	6022      	str	r2, [r4, #0]
 800a9a8:	701d      	strb	r5, [r3, #0]
 800a9aa:	e7db      	b.n	800a964 <_puts_r+0x88>
 800a9ac:	0800ba10 	.word	0x0800ba10
 800a9b0:	0800ba30 	.word	0x0800ba30
 800a9b4:	0800b9f0 	.word	0x0800b9f0

0800a9b8 <puts>:
 800a9b8:	4b02      	ldr	r3, [pc, #8]	; (800a9c4 <puts+0xc>)
 800a9ba:	4601      	mov	r1, r0
 800a9bc:	6818      	ldr	r0, [r3, #0]
 800a9be:	f7ff bf8d 	b.w	800a8dc <_puts_r>
 800a9c2:	bf00      	nop
 800a9c4:	200000e0 	.word	0x200000e0

0800a9c8 <__swbuf_r>:
 800a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ca:	460e      	mov	r6, r1
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	b118      	cbz	r0, 800a9da <__swbuf_r+0x12>
 800a9d2:	6983      	ldr	r3, [r0, #24]
 800a9d4:	b90b      	cbnz	r3, 800a9da <__swbuf_r+0x12>
 800a9d6:	f000 f9d1 	bl	800ad7c <__sinit>
 800a9da:	4b21      	ldr	r3, [pc, #132]	; (800aa60 <__swbuf_r+0x98>)
 800a9dc:	429c      	cmp	r4, r3
 800a9de:	d12b      	bne.n	800aa38 <__swbuf_r+0x70>
 800a9e0:	686c      	ldr	r4, [r5, #4]
 800a9e2:	69a3      	ldr	r3, [r4, #24]
 800a9e4:	60a3      	str	r3, [r4, #8]
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	071a      	lsls	r2, r3, #28
 800a9ea:	d52f      	bpl.n	800aa4c <__swbuf_r+0x84>
 800a9ec:	6923      	ldr	r3, [r4, #16]
 800a9ee:	b36b      	cbz	r3, 800aa4c <__swbuf_r+0x84>
 800a9f0:	6923      	ldr	r3, [r4, #16]
 800a9f2:	6820      	ldr	r0, [r4, #0]
 800a9f4:	1ac0      	subs	r0, r0, r3
 800a9f6:	6963      	ldr	r3, [r4, #20]
 800a9f8:	b2f6      	uxtb	r6, r6
 800a9fa:	4283      	cmp	r3, r0
 800a9fc:	4637      	mov	r7, r6
 800a9fe:	dc04      	bgt.n	800aa0a <__swbuf_r+0x42>
 800aa00:	4621      	mov	r1, r4
 800aa02:	4628      	mov	r0, r5
 800aa04:	f000 f926 	bl	800ac54 <_fflush_r>
 800aa08:	bb30      	cbnz	r0, 800aa58 <__swbuf_r+0x90>
 800aa0a:	68a3      	ldr	r3, [r4, #8]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	60a3      	str	r3, [r4, #8]
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	6022      	str	r2, [r4, #0]
 800aa16:	701e      	strb	r6, [r3, #0]
 800aa18:	6963      	ldr	r3, [r4, #20]
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	4283      	cmp	r3, r0
 800aa1e:	d004      	beq.n	800aa2a <__swbuf_r+0x62>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	07db      	lsls	r3, r3, #31
 800aa24:	d506      	bpl.n	800aa34 <__swbuf_r+0x6c>
 800aa26:	2e0a      	cmp	r6, #10
 800aa28:	d104      	bne.n	800aa34 <__swbuf_r+0x6c>
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	f000 f911 	bl	800ac54 <_fflush_r>
 800aa32:	b988      	cbnz	r0, 800aa58 <__swbuf_r+0x90>
 800aa34:	4638      	mov	r0, r7
 800aa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa38:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <__swbuf_r+0x9c>)
 800aa3a:	429c      	cmp	r4, r3
 800aa3c:	d101      	bne.n	800aa42 <__swbuf_r+0x7a>
 800aa3e:	68ac      	ldr	r4, [r5, #8]
 800aa40:	e7cf      	b.n	800a9e2 <__swbuf_r+0x1a>
 800aa42:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <__swbuf_r+0xa0>)
 800aa44:	429c      	cmp	r4, r3
 800aa46:	bf08      	it	eq
 800aa48:	68ec      	ldreq	r4, [r5, #12]
 800aa4a:	e7ca      	b.n	800a9e2 <__swbuf_r+0x1a>
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 f80c 	bl	800aa6c <__swsetup_r>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d0cb      	beq.n	800a9f0 <__swbuf_r+0x28>
 800aa58:	f04f 37ff 	mov.w	r7, #4294967295
 800aa5c:	e7ea      	b.n	800aa34 <__swbuf_r+0x6c>
 800aa5e:	bf00      	nop
 800aa60:	0800ba10 	.word	0x0800ba10
 800aa64:	0800ba30 	.word	0x0800ba30
 800aa68:	0800b9f0 	.word	0x0800b9f0

0800aa6c <__swsetup_r>:
 800aa6c:	4b32      	ldr	r3, [pc, #200]	; (800ab38 <__swsetup_r+0xcc>)
 800aa6e:	b570      	push	{r4, r5, r6, lr}
 800aa70:	681d      	ldr	r5, [r3, #0]
 800aa72:	4606      	mov	r6, r0
 800aa74:	460c      	mov	r4, r1
 800aa76:	b125      	cbz	r5, 800aa82 <__swsetup_r+0x16>
 800aa78:	69ab      	ldr	r3, [r5, #24]
 800aa7a:	b913      	cbnz	r3, 800aa82 <__swsetup_r+0x16>
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	f000 f97d 	bl	800ad7c <__sinit>
 800aa82:	4b2e      	ldr	r3, [pc, #184]	; (800ab3c <__swsetup_r+0xd0>)
 800aa84:	429c      	cmp	r4, r3
 800aa86:	d10f      	bne.n	800aaa8 <__swsetup_r+0x3c>
 800aa88:	686c      	ldr	r4, [r5, #4]
 800aa8a:	89a3      	ldrh	r3, [r4, #12]
 800aa8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa90:	0719      	lsls	r1, r3, #28
 800aa92:	d42c      	bmi.n	800aaee <__swsetup_r+0x82>
 800aa94:	06dd      	lsls	r5, r3, #27
 800aa96:	d411      	bmi.n	800aabc <__swsetup_r+0x50>
 800aa98:	2309      	movs	r3, #9
 800aa9a:	6033      	str	r3, [r6, #0]
 800aa9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aaa0:	81a3      	strh	r3, [r4, #12]
 800aaa2:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa6:	e03e      	b.n	800ab26 <__swsetup_r+0xba>
 800aaa8:	4b25      	ldr	r3, [pc, #148]	; (800ab40 <__swsetup_r+0xd4>)
 800aaaa:	429c      	cmp	r4, r3
 800aaac:	d101      	bne.n	800aab2 <__swsetup_r+0x46>
 800aaae:	68ac      	ldr	r4, [r5, #8]
 800aab0:	e7eb      	b.n	800aa8a <__swsetup_r+0x1e>
 800aab2:	4b24      	ldr	r3, [pc, #144]	; (800ab44 <__swsetup_r+0xd8>)
 800aab4:	429c      	cmp	r4, r3
 800aab6:	bf08      	it	eq
 800aab8:	68ec      	ldreq	r4, [r5, #12]
 800aaba:	e7e6      	b.n	800aa8a <__swsetup_r+0x1e>
 800aabc:	0758      	lsls	r0, r3, #29
 800aabe:	d512      	bpl.n	800aae6 <__swsetup_r+0x7a>
 800aac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aac2:	b141      	cbz	r1, 800aad6 <__swsetup_r+0x6a>
 800aac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aac8:	4299      	cmp	r1, r3
 800aaca:	d002      	beq.n	800aad2 <__swsetup_r+0x66>
 800aacc:	4630      	mov	r0, r6
 800aace:	f000 fa5b 	bl	800af88 <_free_r>
 800aad2:	2300      	movs	r3, #0
 800aad4:	6363      	str	r3, [r4, #52]	; 0x34
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aadc:	81a3      	strh	r3, [r4, #12]
 800aade:	2300      	movs	r3, #0
 800aae0:	6063      	str	r3, [r4, #4]
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	f043 0308 	orr.w	r3, r3, #8
 800aaec:	81a3      	strh	r3, [r4, #12]
 800aaee:	6923      	ldr	r3, [r4, #16]
 800aaf0:	b94b      	cbnz	r3, 800ab06 <__swsetup_r+0x9a>
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aaf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aafc:	d003      	beq.n	800ab06 <__swsetup_r+0x9a>
 800aafe:	4621      	mov	r1, r4
 800ab00:	4630      	mov	r0, r6
 800ab02:	f000 fa01 	bl	800af08 <__smakebuf_r>
 800ab06:	89a0      	ldrh	r0, [r4, #12]
 800ab08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab0c:	f010 0301 	ands.w	r3, r0, #1
 800ab10:	d00a      	beq.n	800ab28 <__swsetup_r+0xbc>
 800ab12:	2300      	movs	r3, #0
 800ab14:	60a3      	str	r3, [r4, #8]
 800ab16:	6963      	ldr	r3, [r4, #20]
 800ab18:	425b      	negs	r3, r3
 800ab1a:	61a3      	str	r3, [r4, #24]
 800ab1c:	6923      	ldr	r3, [r4, #16]
 800ab1e:	b943      	cbnz	r3, 800ab32 <__swsetup_r+0xc6>
 800ab20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab24:	d1ba      	bne.n	800aa9c <__swsetup_r+0x30>
 800ab26:	bd70      	pop	{r4, r5, r6, pc}
 800ab28:	0781      	lsls	r1, r0, #30
 800ab2a:	bf58      	it	pl
 800ab2c:	6963      	ldrpl	r3, [r4, #20]
 800ab2e:	60a3      	str	r3, [r4, #8]
 800ab30:	e7f4      	b.n	800ab1c <__swsetup_r+0xb0>
 800ab32:	2000      	movs	r0, #0
 800ab34:	e7f7      	b.n	800ab26 <__swsetup_r+0xba>
 800ab36:	bf00      	nop
 800ab38:	200000e0 	.word	0x200000e0
 800ab3c:	0800ba10 	.word	0x0800ba10
 800ab40:	0800ba30 	.word	0x0800ba30
 800ab44:	0800b9f0 	.word	0x0800b9f0

0800ab48 <__sflush_r>:
 800ab48:	898a      	ldrh	r2, [r1, #12]
 800ab4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4e:	4605      	mov	r5, r0
 800ab50:	0710      	lsls	r0, r2, #28
 800ab52:	460c      	mov	r4, r1
 800ab54:	d458      	bmi.n	800ac08 <__sflush_r+0xc0>
 800ab56:	684b      	ldr	r3, [r1, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	dc05      	bgt.n	800ab68 <__sflush_r+0x20>
 800ab5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dc02      	bgt.n	800ab68 <__sflush_r+0x20>
 800ab62:	2000      	movs	r0, #0
 800ab64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab6a:	2e00      	cmp	r6, #0
 800ab6c:	d0f9      	beq.n	800ab62 <__sflush_r+0x1a>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab74:	682f      	ldr	r7, [r5, #0]
 800ab76:	602b      	str	r3, [r5, #0]
 800ab78:	d032      	beq.n	800abe0 <__sflush_r+0x98>
 800ab7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	075a      	lsls	r2, r3, #29
 800ab80:	d505      	bpl.n	800ab8e <__sflush_r+0x46>
 800ab82:	6863      	ldr	r3, [r4, #4]
 800ab84:	1ac0      	subs	r0, r0, r3
 800ab86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab88:	b10b      	cbz	r3, 800ab8e <__sflush_r+0x46>
 800ab8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab8c:	1ac0      	subs	r0, r0, r3
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4602      	mov	r2, r0
 800ab92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab94:	6a21      	ldr	r1, [r4, #32]
 800ab96:	4628      	mov	r0, r5
 800ab98:	47b0      	blx	r6
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	d106      	bne.n	800abae <__sflush_r+0x66>
 800aba0:	6829      	ldr	r1, [r5, #0]
 800aba2:	291d      	cmp	r1, #29
 800aba4:	d82c      	bhi.n	800ac00 <__sflush_r+0xb8>
 800aba6:	4a2a      	ldr	r2, [pc, #168]	; (800ac50 <__sflush_r+0x108>)
 800aba8:	40ca      	lsrs	r2, r1
 800abaa:	07d6      	lsls	r6, r2, #31
 800abac:	d528      	bpl.n	800ac00 <__sflush_r+0xb8>
 800abae:	2200      	movs	r2, #0
 800abb0:	6062      	str	r2, [r4, #4]
 800abb2:	04d9      	lsls	r1, r3, #19
 800abb4:	6922      	ldr	r2, [r4, #16]
 800abb6:	6022      	str	r2, [r4, #0]
 800abb8:	d504      	bpl.n	800abc4 <__sflush_r+0x7c>
 800abba:	1c42      	adds	r2, r0, #1
 800abbc:	d101      	bne.n	800abc2 <__sflush_r+0x7a>
 800abbe:	682b      	ldr	r3, [r5, #0]
 800abc0:	b903      	cbnz	r3, 800abc4 <__sflush_r+0x7c>
 800abc2:	6560      	str	r0, [r4, #84]	; 0x54
 800abc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abc6:	602f      	str	r7, [r5, #0]
 800abc8:	2900      	cmp	r1, #0
 800abca:	d0ca      	beq.n	800ab62 <__sflush_r+0x1a>
 800abcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abd0:	4299      	cmp	r1, r3
 800abd2:	d002      	beq.n	800abda <__sflush_r+0x92>
 800abd4:	4628      	mov	r0, r5
 800abd6:	f000 f9d7 	bl	800af88 <_free_r>
 800abda:	2000      	movs	r0, #0
 800abdc:	6360      	str	r0, [r4, #52]	; 0x34
 800abde:	e7c1      	b.n	800ab64 <__sflush_r+0x1c>
 800abe0:	6a21      	ldr	r1, [r4, #32]
 800abe2:	2301      	movs	r3, #1
 800abe4:	4628      	mov	r0, r5
 800abe6:	47b0      	blx	r6
 800abe8:	1c41      	adds	r1, r0, #1
 800abea:	d1c7      	bne.n	800ab7c <__sflush_r+0x34>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d0c4      	beq.n	800ab7c <__sflush_r+0x34>
 800abf2:	2b1d      	cmp	r3, #29
 800abf4:	d001      	beq.n	800abfa <__sflush_r+0xb2>
 800abf6:	2b16      	cmp	r3, #22
 800abf8:	d101      	bne.n	800abfe <__sflush_r+0xb6>
 800abfa:	602f      	str	r7, [r5, #0]
 800abfc:	e7b1      	b.n	800ab62 <__sflush_r+0x1a>
 800abfe:	89a3      	ldrh	r3, [r4, #12]
 800ac00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac04:	81a3      	strh	r3, [r4, #12]
 800ac06:	e7ad      	b.n	800ab64 <__sflush_r+0x1c>
 800ac08:	690f      	ldr	r7, [r1, #16]
 800ac0a:	2f00      	cmp	r7, #0
 800ac0c:	d0a9      	beq.n	800ab62 <__sflush_r+0x1a>
 800ac0e:	0793      	lsls	r3, r2, #30
 800ac10:	680e      	ldr	r6, [r1, #0]
 800ac12:	bf08      	it	eq
 800ac14:	694b      	ldreq	r3, [r1, #20]
 800ac16:	600f      	str	r7, [r1, #0]
 800ac18:	bf18      	it	ne
 800ac1a:	2300      	movne	r3, #0
 800ac1c:	eba6 0807 	sub.w	r8, r6, r7
 800ac20:	608b      	str	r3, [r1, #8]
 800ac22:	f1b8 0f00 	cmp.w	r8, #0
 800ac26:	dd9c      	ble.n	800ab62 <__sflush_r+0x1a>
 800ac28:	6a21      	ldr	r1, [r4, #32]
 800ac2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac2c:	4643      	mov	r3, r8
 800ac2e:	463a      	mov	r2, r7
 800ac30:	4628      	mov	r0, r5
 800ac32:	47b0      	blx	r6
 800ac34:	2800      	cmp	r0, #0
 800ac36:	dc06      	bgt.n	800ac46 <__sflush_r+0xfe>
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac3e:	81a3      	strh	r3, [r4, #12]
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295
 800ac44:	e78e      	b.n	800ab64 <__sflush_r+0x1c>
 800ac46:	4407      	add	r7, r0
 800ac48:	eba8 0800 	sub.w	r8, r8, r0
 800ac4c:	e7e9      	b.n	800ac22 <__sflush_r+0xda>
 800ac4e:	bf00      	nop
 800ac50:	20400001 	.word	0x20400001

0800ac54 <_fflush_r>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	690b      	ldr	r3, [r1, #16]
 800ac58:	4605      	mov	r5, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	b913      	cbnz	r3, 800ac64 <_fflush_r+0x10>
 800ac5e:	2500      	movs	r5, #0
 800ac60:	4628      	mov	r0, r5
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	b118      	cbz	r0, 800ac6e <_fflush_r+0x1a>
 800ac66:	6983      	ldr	r3, [r0, #24]
 800ac68:	b90b      	cbnz	r3, 800ac6e <_fflush_r+0x1a>
 800ac6a:	f000 f887 	bl	800ad7c <__sinit>
 800ac6e:	4b14      	ldr	r3, [pc, #80]	; (800acc0 <_fflush_r+0x6c>)
 800ac70:	429c      	cmp	r4, r3
 800ac72:	d11b      	bne.n	800acac <_fflush_r+0x58>
 800ac74:	686c      	ldr	r4, [r5, #4]
 800ac76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0ef      	beq.n	800ac5e <_fflush_r+0xa>
 800ac7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac80:	07d0      	lsls	r0, r2, #31
 800ac82:	d404      	bmi.n	800ac8e <_fflush_r+0x3a>
 800ac84:	0599      	lsls	r1, r3, #22
 800ac86:	d402      	bmi.n	800ac8e <_fflush_r+0x3a>
 800ac88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac8a:	f000 f915 	bl	800aeb8 <__retarget_lock_acquire_recursive>
 800ac8e:	4628      	mov	r0, r5
 800ac90:	4621      	mov	r1, r4
 800ac92:	f7ff ff59 	bl	800ab48 <__sflush_r>
 800ac96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac98:	07da      	lsls	r2, r3, #31
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	d4e0      	bmi.n	800ac60 <_fflush_r+0xc>
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	059b      	lsls	r3, r3, #22
 800aca2:	d4dd      	bmi.n	800ac60 <_fflush_r+0xc>
 800aca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aca6:	f000 f908 	bl	800aeba <__retarget_lock_release_recursive>
 800acaa:	e7d9      	b.n	800ac60 <_fflush_r+0xc>
 800acac:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <_fflush_r+0x70>)
 800acae:	429c      	cmp	r4, r3
 800acb0:	d101      	bne.n	800acb6 <_fflush_r+0x62>
 800acb2:	68ac      	ldr	r4, [r5, #8]
 800acb4:	e7df      	b.n	800ac76 <_fflush_r+0x22>
 800acb6:	4b04      	ldr	r3, [pc, #16]	; (800acc8 <_fflush_r+0x74>)
 800acb8:	429c      	cmp	r4, r3
 800acba:	bf08      	it	eq
 800acbc:	68ec      	ldreq	r4, [r5, #12]
 800acbe:	e7da      	b.n	800ac76 <_fflush_r+0x22>
 800acc0:	0800ba10 	.word	0x0800ba10
 800acc4:	0800ba30 	.word	0x0800ba30
 800acc8:	0800b9f0 	.word	0x0800b9f0

0800accc <std>:
 800accc:	2300      	movs	r3, #0
 800acce:	b510      	push	{r4, lr}
 800acd0:	4604      	mov	r4, r0
 800acd2:	e9c0 3300 	strd	r3, r3, [r0]
 800acd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acda:	6083      	str	r3, [r0, #8]
 800acdc:	8181      	strh	r1, [r0, #12]
 800acde:	6643      	str	r3, [r0, #100]	; 0x64
 800ace0:	81c2      	strh	r2, [r0, #14]
 800ace2:	6183      	str	r3, [r0, #24]
 800ace4:	4619      	mov	r1, r3
 800ace6:	2208      	movs	r2, #8
 800ace8:	305c      	adds	r0, #92	; 0x5c
 800acea:	f7ff fdd7 	bl	800a89c <memset>
 800acee:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <std+0x38>)
 800acf0:	6263      	str	r3, [r4, #36]	; 0x24
 800acf2:	4b05      	ldr	r3, [pc, #20]	; (800ad08 <std+0x3c>)
 800acf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800acf6:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <std+0x40>)
 800acf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acfa:	4b05      	ldr	r3, [pc, #20]	; (800ad10 <std+0x44>)
 800acfc:	6224      	str	r4, [r4, #32]
 800acfe:	6323      	str	r3, [r4, #48]	; 0x30
 800ad00:	bd10      	pop	{r4, pc}
 800ad02:	bf00      	nop
 800ad04:	0800b745 	.word	0x0800b745
 800ad08:	0800b767 	.word	0x0800b767
 800ad0c:	0800b79f 	.word	0x0800b79f
 800ad10:	0800b7c3 	.word	0x0800b7c3

0800ad14 <_cleanup_r>:
 800ad14:	4901      	ldr	r1, [pc, #4]	; (800ad1c <_cleanup_r+0x8>)
 800ad16:	f000 b8af 	b.w	800ae78 <_fwalk_reent>
 800ad1a:	bf00      	nop
 800ad1c:	0800ac55 	.word	0x0800ac55

0800ad20 <__sfmoreglue>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	2268      	movs	r2, #104	; 0x68
 800ad24:	1e4d      	subs	r5, r1, #1
 800ad26:	4355      	muls	r5, r2
 800ad28:	460e      	mov	r6, r1
 800ad2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad2e:	f000 f997 	bl	800b060 <_malloc_r>
 800ad32:	4604      	mov	r4, r0
 800ad34:	b140      	cbz	r0, 800ad48 <__sfmoreglue+0x28>
 800ad36:	2100      	movs	r1, #0
 800ad38:	e9c0 1600 	strd	r1, r6, [r0]
 800ad3c:	300c      	adds	r0, #12
 800ad3e:	60a0      	str	r0, [r4, #8]
 800ad40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad44:	f7ff fdaa 	bl	800a89c <memset>
 800ad48:	4620      	mov	r0, r4
 800ad4a:	bd70      	pop	{r4, r5, r6, pc}

0800ad4c <__sfp_lock_acquire>:
 800ad4c:	4801      	ldr	r0, [pc, #4]	; (800ad54 <__sfp_lock_acquire+0x8>)
 800ad4e:	f000 b8b3 	b.w	800aeb8 <__retarget_lock_acquire_recursive>
 800ad52:	bf00      	nop
 800ad54:	200010cd 	.word	0x200010cd

0800ad58 <__sfp_lock_release>:
 800ad58:	4801      	ldr	r0, [pc, #4]	; (800ad60 <__sfp_lock_release+0x8>)
 800ad5a:	f000 b8ae 	b.w	800aeba <__retarget_lock_release_recursive>
 800ad5e:	bf00      	nop
 800ad60:	200010cd 	.word	0x200010cd

0800ad64 <__sinit_lock_acquire>:
 800ad64:	4801      	ldr	r0, [pc, #4]	; (800ad6c <__sinit_lock_acquire+0x8>)
 800ad66:	f000 b8a7 	b.w	800aeb8 <__retarget_lock_acquire_recursive>
 800ad6a:	bf00      	nop
 800ad6c:	200010ce 	.word	0x200010ce

0800ad70 <__sinit_lock_release>:
 800ad70:	4801      	ldr	r0, [pc, #4]	; (800ad78 <__sinit_lock_release+0x8>)
 800ad72:	f000 b8a2 	b.w	800aeba <__retarget_lock_release_recursive>
 800ad76:	bf00      	nop
 800ad78:	200010ce 	.word	0x200010ce

0800ad7c <__sinit>:
 800ad7c:	b510      	push	{r4, lr}
 800ad7e:	4604      	mov	r4, r0
 800ad80:	f7ff fff0 	bl	800ad64 <__sinit_lock_acquire>
 800ad84:	69a3      	ldr	r3, [r4, #24]
 800ad86:	b11b      	cbz	r3, 800ad90 <__sinit+0x14>
 800ad88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad8c:	f7ff bff0 	b.w	800ad70 <__sinit_lock_release>
 800ad90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad94:	6523      	str	r3, [r4, #80]	; 0x50
 800ad96:	4b13      	ldr	r3, [pc, #76]	; (800ade4 <__sinit+0x68>)
 800ad98:	4a13      	ldr	r2, [pc, #76]	; (800ade8 <__sinit+0x6c>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad9e:	42a3      	cmp	r3, r4
 800ada0:	bf04      	itt	eq
 800ada2:	2301      	moveq	r3, #1
 800ada4:	61a3      	streq	r3, [r4, #24]
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 f820 	bl	800adec <__sfp>
 800adac:	6060      	str	r0, [r4, #4]
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 f81c 	bl	800adec <__sfp>
 800adb4:	60a0      	str	r0, [r4, #8]
 800adb6:	4620      	mov	r0, r4
 800adb8:	f000 f818 	bl	800adec <__sfp>
 800adbc:	2200      	movs	r2, #0
 800adbe:	60e0      	str	r0, [r4, #12]
 800adc0:	2104      	movs	r1, #4
 800adc2:	6860      	ldr	r0, [r4, #4]
 800adc4:	f7ff ff82 	bl	800accc <std>
 800adc8:	68a0      	ldr	r0, [r4, #8]
 800adca:	2201      	movs	r2, #1
 800adcc:	2109      	movs	r1, #9
 800adce:	f7ff ff7d 	bl	800accc <std>
 800add2:	68e0      	ldr	r0, [r4, #12]
 800add4:	2202      	movs	r2, #2
 800add6:	2112      	movs	r1, #18
 800add8:	f7ff ff78 	bl	800accc <std>
 800addc:	2301      	movs	r3, #1
 800adde:	61a3      	str	r3, [r4, #24]
 800ade0:	e7d2      	b.n	800ad88 <__sinit+0xc>
 800ade2:	bf00      	nop
 800ade4:	0800b9ec 	.word	0x0800b9ec
 800ade8:	0800ad15 	.word	0x0800ad15

0800adec <__sfp>:
 800adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adee:	4607      	mov	r7, r0
 800adf0:	f7ff ffac 	bl	800ad4c <__sfp_lock_acquire>
 800adf4:	4b1e      	ldr	r3, [pc, #120]	; (800ae70 <__sfp+0x84>)
 800adf6:	681e      	ldr	r6, [r3, #0]
 800adf8:	69b3      	ldr	r3, [r6, #24]
 800adfa:	b913      	cbnz	r3, 800ae02 <__sfp+0x16>
 800adfc:	4630      	mov	r0, r6
 800adfe:	f7ff ffbd 	bl	800ad7c <__sinit>
 800ae02:	3648      	adds	r6, #72	; 0x48
 800ae04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	d503      	bpl.n	800ae14 <__sfp+0x28>
 800ae0c:	6833      	ldr	r3, [r6, #0]
 800ae0e:	b30b      	cbz	r3, 800ae54 <__sfp+0x68>
 800ae10:	6836      	ldr	r6, [r6, #0]
 800ae12:	e7f7      	b.n	800ae04 <__sfp+0x18>
 800ae14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae18:	b9d5      	cbnz	r5, 800ae50 <__sfp+0x64>
 800ae1a:	4b16      	ldr	r3, [pc, #88]	; (800ae74 <__sfp+0x88>)
 800ae1c:	60e3      	str	r3, [r4, #12]
 800ae1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae22:	6665      	str	r5, [r4, #100]	; 0x64
 800ae24:	f000 f847 	bl	800aeb6 <__retarget_lock_init_recursive>
 800ae28:	f7ff ff96 	bl	800ad58 <__sfp_lock_release>
 800ae2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae34:	6025      	str	r5, [r4, #0]
 800ae36:	61a5      	str	r5, [r4, #24]
 800ae38:	2208      	movs	r2, #8
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae40:	f7ff fd2c 	bl	800a89c <memset>
 800ae44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae50:	3468      	adds	r4, #104	; 0x68
 800ae52:	e7d9      	b.n	800ae08 <__sfp+0x1c>
 800ae54:	2104      	movs	r1, #4
 800ae56:	4638      	mov	r0, r7
 800ae58:	f7ff ff62 	bl	800ad20 <__sfmoreglue>
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	6030      	str	r0, [r6, #0]
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d1d5      	bne.n	800ae10 <__sfp+0x24>
 800ae64:	f7ff ff78 	bl	800ad58 <__sfp_lock_release>
 800ae68:	230c      	movs	r3, #12
 800ae6a:	603b      	str	r3, [r7, #0]
 800ae6c:	e7ee      	b.n	800ae4c <__sfp+0x60>
 800ae6e:	bf00      	nop
 800ae70:	0800b9ec 	.word	0x0800b9ec
 800ae74:	ffff0001 	.word	0xffff0001

0800ae78 <_fwalk_reent>:
 800ae78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	4688      	mov	r8, r1
 800ae80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae84:	2700      	movs	r7, #0
 800ae86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae8a:	f1b9 0901 	subs.w	r9, r9, #1
 800ae8e:	d505      	bpl.n	800ae9c <_fwalk_reent+0x24>
 800ae90:	6824      	ldr	r4, [r4, #0]
 800ae92:	2c00      	cmp	r4, #0
 800ae94:	d1f7      	bne.n	800ae86 <_fwalk_reent+0xe>
 800ae96:	4638      	mov	r0, r7
 800ae98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae9c:	89ab      	ldrh	r3, [r5, #12]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d907      	bls.n	800aeb2 <_fwalk_reent+0x3a>
 800aea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aea6:	3301      	adds	r3, #1
 800aea8:	d003      	beq.n	800aeb2 <_fwalk_reent+0x3a>
 800aeaa:	4629      	mov	r1, r5
 800aeac:	4630      	mov	r0, r6
 800aeae:	47c0      	blx	r8
 800aeb0:	4307      	orrs	r7, r0
 800aeb2:	3568      	adds	r5, #104	; 0x68
 800aeb4:	e7e9      	b.n	800ae8a <_fwalk_reent+0x12>

0800aeb6 <__retarget_lock_init_recursive>:
 800aeb6:	4770      	bx	lr

0800aeb8 <__retarget_lock_acquire_recursive>:
 800aeb8:	4770      	bx	lr

0800aeba <__retarget_lock_release_recursive>:
 800aeba:	4770      	bx	lr

0800aebc <__swhatbuf_r>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	460e      	mov	r6, r1
 800aec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec4:	2900      	cmp	r1, #0
 800aec6:	b096      	sub	sp, #88	; 0x58
 800aec8:	4614      	mov	r4, r2
 800aeca:	461d      	mov	r5, r3
 800aecc:	da08      	bge.n	800aee0 <__swhatbuf_r+0x24>
 800aece:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	602a      	str	r2, [r5, #0]
 800aed6:	061a      	lsls	r2, r3, #24
 800aed8:	d410      	bmi.n	800aefc <__swhatbuf_r+0x40>
 800aeda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aede:	e00e      	b.n	800aefe <__swhatbuf_r+0x42>
 800aee0:	466a      	mov	r2, sp
 800aee2:	f000 fc95 	bl	800b810 <_fstat_r>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	dbf1      	blt.n	800aece <__swhatbuf_r+0x12>
 800aeea:	9a01      	ldr	r2, [sp, #4]
 800aeec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aef0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aef4:	425a      	negs	r2, r3
 800aef6:	415a      	adcs	r2, r3
 800aef8:	602a      	str	r2, [r5, #0]
 800aefa:	e7ee      	b.n	800aeda <__swhatbuf_r+0x1e>
 800aefc:	2340      	movs	r3, #64	; 0x40
 800aefe:	2000      	movs	r0, #0
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	b016      	add	sp, #88	; 0x58
 800af04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af08 <__smakebuf_r>:
 800af08:	898b      	ldrh	r3, [r1, #12]
 800af0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af0c:	079d      	lsls	r5, r3, #30
 800af0e:	4606      	mov	r6, r0
 800af10:	460c      	mov	r4, r1
 800af12:	d507      	bpl.n	800af24 <__smakebuf_r+0x1c>
 800af14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	6123      	str	r3, [r4, #16]
 800af1c:	2301      	movs	r3, #1
 800af1e:	6163      	str	r3, [r4, #20]
 800af20:	b002      	add	sp, #8
 800af22:	bd70      	pop	{r4, r5, r6, pc}
 800af24:	ab01      	add	r3, sp, #4
 800af26:	466a      	mov	r2, sp
 800af28:	f7ff ffc8 	bl	800aebc <__swhatbuf_r>
 800af2c:	9900      	ldr	r1, [sp, #0]
 800af2e:	4605      	mov	r5, r0
 800af30:	4630      	mov	r0, r6
 800af32:	f000 f895 	bl	800b060 <_malloc_r>
 800af36:	b948      	cbnz	r0, 800af4c <__smakebuf_r+0x44>
 800af38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af3c:	059a      	lsls	r2, r3, #22
 800af3e:	d4ef      	bmi.n	800af20 <__smakebuf_r+0x18>
 800af40:	f023 0303 	bic.w	r3, r3, #3
 800af44:	f043 0302 	orr.w	r3, r3, #2
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	e7e3      	b.n	800af14 <__smakebuf_r+0xc>
 800af4c:	4b0d      	ldr	r3, [pc, #52]	; (800af84 <__smakebuf_r+0x7c>)
 800af4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800af50:	89a3      	ldrh	r3, [r4, #12]
 800af52:	6020      	str	r0, [r4, #0]
 800af54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af58:	81a3      	strh	r3, [r4, #12]
 800af5a:	9b00      	ldr	r3, [sp, #0]
 800af5c:	6163      	str	r3, [r4, #20]
 800af5e:	9b01      	ldr	r3, [sp, #4]
 800af60:	6120      	str	r0, [r4, #16]
 800af62:	b15b      	cbz	r3, 800af7c <__smakebuf_r+0x74>
 800af64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af68:	4630      	mov	r0, r6
 800af6a:	f000 fc63 	bl	800b834 <_isatty_r>
 800af6e:	b128      	cbz	r0, 800af7c <__smakebuf_r+0x74>
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	f023 0303 	bic.w	r3, r3, #3
 800af76:	f043 0301 	orr.w	r3, r3, #1
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	89a0      	ldrh	r0, [r4, #12]
 800af7e:	4305      	orrs	r5, r0
 800af80:	81a5      	strh	r5, [r4, #12]
 800af82:	e7cd      	b.n	800af20 <__smakebuf_r+0x18>
 800af84:	0800ad15 	.word	0x0800ad15

0800af88 <_free_r>:
 800af88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af8a:	2900      	cmp	r1, #0
 800af8c:	d044      	beq.n	800b018 <_free_r+0x90>
 800af8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af92:	9001      	str	r0, [sp, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	f1a1 0404 	sub.w	r4, r1, #4
 800af9a:	bfb8      	it	lt
 800af9c:	18e4      	addlt	r4, r4, r3
 800af9e:	f000 fc6b 	bl	800b878 <__malloc_lock>
 800afa2:	4a1e      	ldr	r2, [pc, #120]	; (800b01c <_free_r+0x94>)
 800afa4:	9801      	ldr	r0, [sp, #4]
 800afa6:	6813      	ldr	r3, [r2, #0]
 800afa8:	b933      	cbnz	r3, 800afb8 <_free_r+0x30>
 800afaa:	6063      	str	r3, [r4, #4]
 800afac:	6014      	str	r4, [r2, #0]
 800afae:	b003      	add	sp, #12
 800afb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afb4:	f000 bc66 	b.w	800b884 <__malloc_unlock>
 800afb8:	42a3      	cmp	r3, r4
 800afba:	d908      	bls.n	800afce <_free_r+0x46>
 800afbc:	6825      	ldr	r5, [r4, #0]
 800afbe:	1961      	adds	r1, r4, r5
 800afc0:	428b      	cmp	r3, r1
 800afc2:	bf01      	itttt	eq
 800afc4:	6819      	ldreq	r1, [r3, #0]
 800afc6:	685b      	ldreq	r3, [r3, #4]
 800afc8:	1949      	addeq	r1, r1, r5
 800afca:	6021      	streq	r1, [r4, #0]
 800afcc:	e7ed      	b.n	800afaa <_free_r+0x22>
 800afce:	461a      	mov	r2, r3
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	b10b      	cbz	r3, 800afd8 <_free_r+0x50>
 800afd4:	42a3      	cmp	r3, r4
 800afd6:	d9fa      	bls.n	800afce <_free_r+0x46>
 800afd8:	6811      	ldr	r1, [r2, #0]
 800afda:	1855      	adds	r5, r2, r1
 800afdc:	42a5      	cmp	r5, r4
 800afde:	d10b      	bne.n	800aff8 <_free_r+0x70>
 800afe0:	6824      	ldr	r4, [r4, #0]
 800afe2:	4421      	add	r1, r4
 800afe4:	1854      	adds	r4, r2, r1
 800afe6:	42a3      	cmp	r3, r4
 800afe8:	6011      	str	r1, [r2, #0]
 800afea:	d1e0      	bne.n	800afae <_free_r+0x26>
 800afec:	681c      	ldr	r4, [r3, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	6053      	str	r3, [r2, #4]
 800aff2:	4421      	add	r1, r4
 800aff4:	6011      	str	r1, [r2, #0]
 800aff6:	e7da      	b.n	800afae <_free_r+0x26>
 800aff8:	d902      	bls.n	800b000 <_free_r+0x78>
 800affa:	230c      	movs	r3, #12
 800affc:	6003      	str	r3, [r0, #0]
 800affe:	e7d6      	b.n	800afae <_free_r+0x26>
 800b000:	6825      	ldr	r5, [r4, #0]
 800b002:	1961      	adds	r1, r4, r5
 800b004:	428b      	cmp	r3, r1
 800b006:	bf04      	itt	eq
 800b008:	6819      	ldreq	r1, [r3, #0]
 800b00a:	685b      	ldreq	r3, [r3, #4]
 800b00c:	6063      	str	r3, [r4, #4]
 800b00e:	bf04      	itt	eq
 800b010:	1949      	addeq	r1, r1, r5
 800b012:	6021      	streq	r1, [r4, #0]
 800b014:	6054      	str	r4, [r2, #4]
 800b016:	e7ca      	b.n	800afae <_free_r+0x26>
 800b018:	b003      	add	sp, #12
 800b01a:	bd30      	pop	{r4, r5, pc}
 800b01c:	200010d0 	.word	0x200010d0

0800b020 <sbrk_aligned>:
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	4e0e      	ldr	r6, [pc, #56]	; (800b05c <sbrk_aligned+0x3c>)
 800b024:	460c      	mov	r4, r1
 800b026:	6831      	ldr	r1, [r6, #0]
 800b028:	4605      	mov	r5, r0
 800b02a:	b911      	cbnz	r1, 800b032 <sbrk_aligned+0x12>
 800b02c:	f000 fb7a 	bl	800b724 <_sbrk_r>
 800b030:	6030      	str	r0, [r6, #0]
 800b032:	4621      	mov	r1, r4
 800b034:	4628      	mov	r0, r5
 800b036:	f000 fb75 	bl	800b724 <_sbrk_r>
 800b03a:	1c43      	adds	r3, r0, #1
 800b03c:	d00a      	beq.n	800b054 <sbrk_aligned+0x34>
 800b03e:	1cc4      	adds	r4, r0, #3
 800b040:	f024 0403 	bic.w	r4, r4, #3
 800b044:	42a0      	cmp	r0, r4
 800b046:	d007      	beq.n	800b058 <sbrk_aligned+0x38>
 800b048:	1a21      	subs	r1, r4, r0
 800b04a:	4628      	mov	r0, r5
 800b04c:	f000 fb6a 	bl	800b724 <_sbrk_r>
 800b050:	3001      	adds	r0, #1
 800b052:	d101      	bne.n	800b058 <sbrk_aligned+0x38>
 800b054:	f04f 34ff 	mov.w	r4, #4294967295
 800b058:	4620      	mov	r0, r4
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	200010d4 	.word	0x200010d4

0800b060 <_malloc_r>:
 800b060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b064:	1ccd      	adds	r5, r1, #3
 800b066:	f025 0503 	bic.w	r5, r5, #3
 800b06a:	3508      	adds	r5, #8
 800b06c:	2d0c      	cmp	r5, #12
 800b06e:	bf38      	it	cc
 800b070:	250c      	movcc	r5, #12
 800b072:	2d00      	cmp	r5, #0
 800b074:	4607      	mov	r7, r0
 800b076:	db01      	blt.n	800b07c <_malloc_r+0x1c>
 800b078:	42a9      	cmp	r1, r5
 800b07a:	d905      	bls.n	800b088 <_malloc_r+0x28>
 800b07c:	230c      	movs	r3, #12
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	2600      	movs	r6, #0
 800b082:	4630      	mov	r0, r6
 800b084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b088:	4e2e      	ldr	r6, [pc, #184]	; (800b144 <_malloc_r+0xe4>)
 800b08a:	f000 fbf5 	bl	800b878 <__malloc_lock>
 800b08e:	6833      	ldr	r3, [r6, #0]
 800b090:	461c      	mov	r4, r3
 800b092:	bb34      	cbnz	r4, 800b0e2 <_malloc_r+0x82>
 800b094:	4629      	mov	r1, r5
 800b096:	4638      	mov	r0, r7
 800b098:	f7ff ffc2 	bl	800b020 <sbrk_aligned>
 800b09c:	1c43      	adds	r3, r0, #1
 800b09e:	4604      	mov	r4, r0
 800b0a0:	d14d      	bne.n	800b13e <_malloc_r+0xde>
 800b0a2:	6834      	ldr	r4, [r6, #0]
 800b0a4:	4626      	mov	r6, r4
 800b0a6:	2e00      	cmp	r6, #0
 800b0a8:	d140      	bne.n	800b12c <_malloc_r+0xcc>
 800b0aa:	6823      	ldr	r3, [r4, #0]
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	eb04 0803 	add.w	r8, r4, r3
 800b0b4:	f000 fb36 	bl	800b724 <_sbrk_r>
 800b0b8:	4580      	cmp	r8, r0
 800b0ba:	d13a      	bne.n	800b132 <_malloc_r+0xd2>
 800b0bc:	6821      	ldr	r1, [r4, #0]
 800b0be:	3503      	adds	r5, #3
 800b0c0:	1a6d      	subs	r5, r5, r1
 800b0c2:	f025 0503 	bic.w	r5, r5, #3
 800b0c6:	3508      	adds	r5, #8
 800b0c8:	2d0c      	cmp	r5, #12
 800b0ca:	bf38      	it	cc
 800b0cc:	250c      	movcc	r5, #12
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	f7ff ffa5 	bl	800b020 <sbrk_aligned>
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	d02b      	beq.n	800b132 <_malloc_r+0xd2>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	442b      	add	r3, r5
 800b0de:	6023      	str	r3, [r4, #0]
 800b0e0:	e00e      	b.n	800b100 <_malloc_r+0xa0>
 800b0e2:	6822      	ldr	r2, [r4, #0]
 800b0e4:	1b52      	subs	r2, r2, r5
 800b0e6:	d41e      	bmi.n	800b126 <_malloc_r+0xc6>
 800b0e8:	2a0b      	cmp	r2, #11
 800b0ea:	d916      	bls.n	800b11a <_malloc_r+0xba>
 800b0ec:	1961      	adds	r1, r4, r5
 800b0ee:	42a3      	cmp	r3, r4
 800b0f0:	6025      	str	r5, [r4, #0]
 800b0f2:	bf18      	it	ne
 800b0f4:	6059      	strne	r1, [r3, #4]
 800b0f6:	6863      	ldr	r3, [r4, #4]
 800b0f8:	bf08      	it	eq
 800b0fa:	6031      	streq	r1, [r6, #0]
 800b0fc:	5162      	str	r2, [r4, r5]
 800b0fe:	604b      	str	r3, [r1, #4]
 800b100:	4638      	mov	r0, r7
 800b102:	f104 060b 	add.w	r6, r4, #11
 800b106:	f000 fbbd 	bl	800b884 <__malloc_unlock>
 800b10a:	f026 0607 	bic.w	r6, r6, #7
 800b10e:	1d23      	adds	r3, r4, #4
 800b110:	1af2      	subs	r2, r6, r3
 800b112:	d0b6      	beq.n	800b082 <_malloc_r+0x22>
 800b114:	1b9b      	subs	r3, r3, r6
 800b116:	50a3      	str	r3, [r4, r2]
 800b118:	e7b3      	b.n	800b082 <_malloc_r+0x22>
 800b11a:	6862      	ldr	r2, [r4, #4]
 800b11c:	42a3      	cmp	r3, r4
 800b11e:	bf0c      	ite	eq
 800b120:	6032      	streq	r2, [r6, #0]
 800b122:	605a      	strne	r2, [r3, #4]
 800b124:	e7ec      	b.n	800b100 <_malloc_r+0xa0>
 800b126:	4623      	mov	r3, r4
 800b128:	6864      	ldr	r4, [r4, #4]
 800b12a:	e7b2      	b.n	800b092 <_malloc_r+0x32>
 800b12c:	4634      	mov	r4, r6
 800b12e:	6876      	ldr	r6, [r6, #4]
 800b130:	e7b9      	b.n	800b0a6 <_malloc_r+0x46>
 800b132:	230c      	movs	r3, #12
 800b134:	603b      	str	r3, [r7, #0]
 800b136:	4638      	mov	r0, r7
 800b138:	f000 fba4 	bl	800b884 <__malloc_unlock>
 800b13c:	e7a1      	b.n	800b082 <_malloc_r+0x22>
 800b13e:	6025      	str	r5, [r4, #0]
 800b140:	e7de      	b.n	800b100 <_malloc_r+0xa0>
 800b142:	bf00      	nop
 800b144:	200010d0 	.word	0x200010d0

0800b148 <__sfputc_r>:
 800b148:	6893      	ldr	r3, [r2, #8]
 800b14a:	3b01      	subs	r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	b410      	push	{r4}
 800b150:	6093      	str	r3, [r2, #8]
 800b152:	da08      	bge.n	800b166 <__sfputc_r+0x1e>
 800b154:	6994      	ldr	r4, [r2, #24]
 800b156:	42a3      	cmp	r3, r4
 800b158:	db01      	blt.n	800b15e <__sfputc_r+0x16>
 800b15a:	290a      	cmp	r1, #10
 800b15c:	d103      	bne.n	800b166 <__sfputc_r+0x1e>
 800b15e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b162:	f7ff bc31 	b.w	800a9c8 <__swbuf_r>
 800b166:	6813      	ldr	r3, [r2, #0]
 800b168:	1c58      	adds	r0, r3, #1
 800b16a:	6010      	str	r0, [r2, #0]
 800b16c:	7019      	strb	r1, [r3, #0]
 800b16e:	4608      	mov	r0, r1
 800b170:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <__sfputs_r>:
 800b176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b178:	4606      	mov	r6, r0
 800b17a:	460f      	mov	r7, r1
 800b17c:	4614      	mov	r4, r2
 800b17e:	18d5      	adds	r5, r2, r3
 800b180:	42ac      	cmp	r4, r5
 800b182:	d101      	bne.n	800b188 <__sfputs_r+0x12>
 800b184:	2000      	movs	r0, #0
 800b186:	e007      	b.n	800b198 <__sfputs_r+0x22>
 800b188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b18c:	463a      	mov	r2, r7
 800b18e:	4630      	mov	r0, r6
 800b190:	f7ff ffda 	bl	800b148 <__sfputc_r>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d1f3      	bne.n	800b180 <__sfputs_r+0xa>
 800b198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b19c <_vfiprintf_r>:
 800b19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a0:	460d      	mov	r5, r1
 800b1a2:	b09d      	sub	sp, #116	; 0x74
 800b1a4:	4614      	mov	r4, r2
 800b1a6:	4698      	mov	r8, r3
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	b118      	cbz	r0, 800b1b4 <_vfiprintf_r+0x18>
 800b1ac:	6983      	ldr	r3, [r0, #24]
 800b1ae:	b90b      	cbnz	r3, 800b1b4 <_vfiprintf_r+0x18>
 800b1b0:	f7ff fde4 	bl	800ad7c <__sinit>
 800b1b4:	4b89      	ldr	r3, [pc, #548]	; (800b3dc <_vfiprintf_r+0x240>)
 800b1b6:	429d      	cmp	r5, r3
 800b1b8:	d11b      	bne.n	800b1f2 <_vfiprintf_r+0x56>
 800b1ba:	6875      	ldr	r5, [r6, #4]
 800b1bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1be:	07d9      	lsls	r1, r3, #31
 800b1c0:	d405      	bmi.n	800b1ce <_vfiprintf_r+0x32>
 800b1c2:	89ab      	ldrh	r3, [r5, #12]
 800b1c4:	059a      	lsls	r2, r3, #22
 800b1c6:	d402      	bmi.n	800b1ce <_vfiprintf_r+0x32>
 800b1c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ca:	f7ff fe75 	bl	800aeb8 <__retarget_lock_acquire_recursive>
 800b1ce:	89ab      	ldrh	r3, [r5, #12]
 800b1d0:	071b      	lsls	r3, r3, #28
 800b1d2:	d501      	bpl.n	800b1d8 <_vfiprintf_r+0x3c>
 800b1d4:	692b      	ldr	r3, [r5, #16]
 800b1d6:	b9eb      	cbnz	r3, 800b214 <_vfiprintf_r+0x78>
 800b1d8:	4629      	mov	r1, r5
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f7ff fc46 	bl	800aa6c <__swsetup_r>
 800b1e0:	b1c0      	cbz	r0, 800b214 <_vfiprintf_r+0x78>
 800b1e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1e4:	07dc      	lsls	r4, r3, #31
 800b1e6:	d50e      	bpl.n	800b206 <_vfiprintf_r+0x6a>
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	b01d      	add	sp, #116	; 0x74
 800b1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f2:	4b7b      	ldr	r3, [pc, #492]	; (800b3e0 <_vfiprintf_r+0x244>)
 800b1f4:	429d      	cmp	r5, r3
 800b1f6:	d101      	bne.n	800b1fc <_vfiprintf_r+0x60>
 800b1f8:	68b5      	ldr	r5, [r6, #8]
 800b1fa:	e7df      	b.n	800b1bc <_vfiprintf_r+0x20>
 800b1fc:	4b79      	ldr	r3, [pc, #484]	; (800b3e4 <_vfiprintf_r+0x248>)
 800b1fe:	429d      	cmp	r5, r3
 800b200:	bf08      	it	eq
 800b202:	68f5      	ldreq	r5, [r6, #12]
 800b204:	e7da      	b.n	800b1bc <_vfiprintf_r+0x20>
 800b206:	89ab      	ldrh	r3, [r5, #12]
 800b208:	0598      	lsls	r0, r3, #22
 800b20a:	d4ed      	bmi.n	800b1e8 <_vfiprintf_r+0x4c>
 800b20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b20e:	f7ff fe54 	bl	800aeba <__retarget_lock_release_recursive>
 800b212:	e7e9      	b.n	800b1e8 <_vfiprintf_r+0x4c>
 800b214:	2300      	movs	r3, #0
 800b216:	9309      	str	r3, [sp, #36]	; 0x24
 800b218:	2320      	movs	r3, #32
 800b21a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b21e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b222:	2330      	movs	r3, #48	; 0x30
 800b224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3e8 <_vfiprintf_r+0x24c>
 800b228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b22c:	f04f 0901 	mov.w	r9, #1
 800b230:	4623      	mov	r3, r4
 800b232:	469a      	mov	sl, r3
 800b234:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b238:	b10a      	cbz	r2, 800b23e <_vfiprintf_r+0xa2>
 800b23a:	2a25      	cmp	r2, #37	; 0x25
 800b23c:	d1f9      	bne.n	800b232 <_vfiprintf_r+0x96>
 800b23e:	ebba 0b04 	subs.w	fp, sl, r4
 800b242:	d00b      	beq.n	800b25c <_vfiprintf_r+0xc0>
 800b244:	465b      	mov	r3, fp
 800b246:	4622      	mov	r2, r4
 800b248:	4629      	mov	r1, r5
 800b24a:	4630      	mov	r0, r6
 800b24c:	f7ff ff93 	bl	800b176 <__sfputs_r>
 800b250:	3001      	adds	r0, #1
 800b252:	f000 80aa 	beq.w	800b3aa <_vfiprintf_r+0x20e>
 800b256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b258:	445a      	add	r2, fp
 800b25a:	9209      	str	r2, [sp, #36]	; 0x24
 800b25c:	f89a 3000 	ldrb.w	r3, [sl]
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 80a2 	beq.w	800b3aa <_vfiprintf_r+0x20e>
 800b266:	2300      	movs	r3, #0
 800b268:	f04f 32ff 	mov.w	r2, #4294967295
 800b26c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b270:	f10a 0a01 	add.w	sl, sl, #1
 800b274:	9304      	str	r3, [sp, #16]
 800b276:	9307      	str	r3, [sp, #28]
 800b278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b27c:	931a      	str	r3, [sp, #104]	; 0x68
 800b27e:	4654      	mov	r4, sl
 800b280:	2205      	movs	r2, #5
 800b282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b286:	4858      	ldr	r0, [pc, #352]	; (800b3e8 <_vfiprintf_r+0x24c>)
 800b288:	f7f5 f82a 	bl	80002e0 <memchr>
 800b28c:	9a04      	ldr	r2, [sp, #16]
 800b28e:	b9d8      	cbnz	r0, 800b2c8 <_vfiprintf_r+0x12c>
 800b290:	06d1      	lsls	r1, r2, #27
 800b292:	bf44      	itt	mi
 800b294:	2320      	movmi	r3, #32
 800b296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b29a:	0713      	lsls	r3, r2, #28
 800b29c:	bf44      	itt	mi
 800b29e:	232b      	movmi	r3, #43	; 0x2b
 800b2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2aa:	d015      	beq.n	800b2d8 <_vfiprintf_r+0x13c>
 800b2ac:	9a07      	ldr	r2, [sp, #28]
 800b2ae:	4654      	mov	r4, sl
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	f04f 0c0a 	mov.w	ip, #10
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2bc:	3b30      	subs	r3, #48	; 0x30
 800b2be:	2b09      	cmp	r3, #9
 800b2c0:	d94e      	bls.n	800b360 <_vfiprintf_r+0x1c4>
 800b2c2:	b1b0      	cbz	r0, 800b2f2 <_vfiprintf_r+0x156>
 800b2c4:	9207      	str	r2, [sp, #28]
 800b2c6:	e014      	b.n	800b2f2 <_vfiprintf_r+0x156>
 800b2c8:	eba0 0308 	sub.w	r3, r0, r8
 800b2cc:	fa09 f303 	lsl.w	r3, r9, r3
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	9304      	str	r3, [sp, #16]
 800b2d4:	46a2      	mov	sl, r4
 800b2d6:	e7d2      	b.n	800b27e <_vfiprintf_r+0xe2>
 800b2d8:	9b03      	ldr	r3, [sp, #12]
 800b2da:	1d19      	adds	r1, r3, #4
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	9103      	str	r1, [sp, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bfbb      	ittet	lt
 800b2e4:	425b      	neglt	r3, r3
 800b2e6:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ea:	9307      	strge	r3, [sp, #28]
 800b2ec:	9307      	strlt	r3, [sp, #28]
 800b2ee:	bfb8      	it	lt
 800b2f0:	9204      	strlt	r2, [sp, #16]
 800b2f2:	7823      	ldrb	r3, [r4, #0]
 800b2f4:	2b2e      	cmp	r3, #46	; 0x2e
 800b2f6:	d10c      	bne.n	800b312 <_vfiprintf_r+0x176>
 800b2f8:	7863      	ldrb	r3, [r4, #1]
 800b2fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b2fc:	d135      	bne.n	800b36a <_vfiprintf_r+0x1ce>
 800b2fe:	9b03      	ldr	r3, [sp, #12]
 800b300:	1d1a      	adds	r2, r3, #4
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	9203      	str	r2, [sp, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	bfb8      	it	lt
 800b30a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b30e:	3402      	adds	r4, #2
 800b310:	9305      	str	r3, [sp, #20]
 800b312:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3f8 <_vfiprintf_r+0x25c>
 800b316:	7821      	ldrb	r1, [r4, #0]
 800b318:	2203      	movs	r2, #3
 800b31a:	4650      	mov	r0, sl
 800b31c:	f7f4 ffe0 	bl	80002e0 <memchr>
 800b320:	b140      	cbz	r0, 800b334 <_vfiprintf_r+0x198>
 800b322:	2340      	movs	r3, #64	; 0x40
 800b324:	eba0 000a 	sub.w	r0, r0, sl
 800b328:	fa03 f000 	lsl.w	r0, r3, r0
 800b32c:	9b04      	ldr	r3, [sp, #16]
 800b32e:	4303      	orrs	r3, r0
 800b330:	3401      	adds	r4, #1
 800b332:	9304      	str	r3, [sp, #16]
 800b334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b338:	482c      	ldr	r0, [pc, #176]	; (800b3ec <_vfiprintf_r+0x250>)
 800b33a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b33e:	2206      	movs	r2, #6
 800b340:	f7f4 ffce 	bl	80002e0 <memchr>
 800b344:	2800      	cmp	r0, #0
 800b346:	d03f      	beq.n	800b3c8 <_vfiprintf_r+0x22c>
 800b348:	4b29      	ldr	r3, [pc, #164]	; (800b3f0 <_vfiprintf_r+0x254>)
 800b34a:	bb1b      	cbnz	r3, 800b394 <_vfiprintf_r+0x1f8>
 800b34c:	9b03      	ldr	r3, [sp, #12]
 800b34e:	3307      	adds	r3, #7
 800b350:	f023 0307 	bic.w	r3, r3, #7
 800b354:	3308      	adds	r3, #8
 800b356:	9303      	str	r3, [sp, #12]
 800b358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b35a:	443b      	add	r3, r7
 800b35c:	9309      	str	r3, [sp, #36]	; 0x24
 800b35e:	e767      	b.n	800b230 <_vfiprintf_r+0x94>
 800b360:	fb0c 3202 	mla	r2, ip, r2, r3
 800b364:	460c      	mov	r4, r1
 800b366:	2001      	movs	r0, #1
 800b368:	e7a5      	b.n	800b2b6 <_vfiprintf_r+0x11a>
 800b36a:	2300      	movs	r3, #0
 800b36c:	3401      	adds	r4, #1
 800b36e:	9305      	str	r3, [sp, #20]
 800b370:	4619      	mov	r1, r3
 800b372:	f04f 0c0a 	mov.w	ip, #10
 800b376:	4620      	mov	r0, r4
 800b378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b37c:	3a30      	subs	r2, #48	; 0x30
 800b37e:	2a09      	cmp	r2, #9
 800b380:	d903      	bls.n	800b38a <_vfiprintf_r+0x1ee>
 800b382:	2b00      	cmp	r3, #0
 800b384:	d0c5      	beq.n	800b312 <_vfiprintf_r+0x176>
 800b386:	9105      	str	r1, [sp, #20]
 800b388:	e7c3      	b.n	800b312 <_vfiprintf_r+0x176>
 800b38a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b38e:	4604      	mov	r4, r0
 800b390:	2301      	movs	r3, #1
 800b392:	e7f0      	b.n	800b376 <_vfiprintf_r+0x1da>
 800b394:	ab03      	add	r3, sp, #12
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	462a      	mov	r2, r5
 800b39a:	4b16      	ldr	r3, [pc, #88]	; (800b3f4 <_vfiprintf_r+0x258>)
 800b39c:	a904      	add	r1, sp, #16
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f3af 8000 	nop.w
 800b3a4:	4607      	mov	r7, r0
 800b3a6:	1c78      	adds	r0, r7, #1
 800b3a8:	d1d6      	bne.n	800b358 <_vfiprintf_r+0x1bc>
 800b3aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3ac:	07d9      	lsls	r1, r3, #31
 800b3ae:	d405      	bmi.n	800b3bc <_vfiprintf_r+0x220>
 800b3b0:	89ab      	ldrh	r3, [r5, #12]
 800b3b2:	059a      	lsls	r2, r3, #22
 800b3b4:	d402      	bmi.n	800b3bc <_vfiprintf_r+0x220>
 800b3b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3b8:	f7ff fd7f 	bl	800aeba <__retarget_lock_release_recursive>
 800b3bc:	89ab      	ldrh	r3, [r5, #12]
 800b3be:	065b      	lsls	r3, r3, #25
 800b3c0:	f53f af12 	bmi.w	800b1e8 <_vfiprintf_r+0x4c>
 800b3c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3c6:	e711      	b.n	800b1ec <_vfiprintf_r+0x50>
 800b3c8:	ab03      	add	r3, sp, #12
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <_vfiprintf_r+0x258>)
 800b3d0:	a904      	add	r1, sp, #16
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	f000 f880 	bl	800b4d8 <_printf_i>
 800b3d8:	e7e4      	b.n	800b3a4 <_vfiprintf_r+0x208>
 800b3da:	bf00      	nop
 800b3dc:	0800ba10 	.word	0x0800ba10
 800b3e0:	0800ba30 	.word	0x0800ba30
 800b3e4:	0800b9f0 	.word	0x0800b9f0
 800b3e8:	0800ba50 	.word	0x0800ba50
 800b3ec:	0800ba5a 	.word	0x0800ba5a
 800b3f0:	00000000 	.word	0x00000000
 800b3f4:	0800b177 	.word	0x0800b177
 800b3f8:	0800ba56 	.word	0x0800ba56

0800b3fc <_printf_common>:
 800b3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b400:	4616      	mov	r6, r2
 800b402:	4699      	mov	r9, r3
 800b404:	688a      	ldr	r2, [r1, #8]
 800b406:	690b      	ldr	r3, [r1, #16]
 800b408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b40c:	4293      	cmp	r3, r2
 800b40e:	bfb8      	it	lt
 800b410:	4613      	movlt	r3, r2
 800b412:	6033      	str	r3, [r6, #0]
 800b414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b418:	4607      	mov	r7, r0
 800b41a:	460c      	mov	r4, r1
 800b41c:	b10a      	cbz	r2, 800b422 <_printf_common+0x26>
 800b41e:	3301      	adds	r3, #1
 800b420:	6033      	str	r3, [r6, #0]
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	0699      	lsls	r1, r3, #26
 800b426:	bf42      	ittt	mi
 800b428:	6833      	ldrmi	r3, [r6, #0]
 800b42a:	3302      	addmi	r3, #2
 800b42c:	6033      	strmi	r3, [r6, #0]
 800b42e:	6825      	ldr	r5, [r4, #0]
 800b430:	f015 0506 	ands.w	r5, r5, #6
 800b434:	d106      	bne.n	800b444 <_printf_common+0x48>
 800b436:	f104 0a19 	add.w	sl, r4, #25
 800b43a:	68e3      	ldr	r3, [r4, #12]
 800b43c:	6832      	ldr	r2, [r6, #0]
 800b43e:	1a9b      	subs	r3, r3, r2
 800b440:	42ab      	cmp	r3, r5
 800b442:	dc26      	bgt.n	800b492 <_printf_common+0x96>
 800b444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b448:	1e13      	subs	r3, r2, #0
 800b44a:	6822      	ldr	r2, [r4, #0]
 800b44c:	bf18      	it	ne
 800b44e:	2301      	movne	r3, #1
 800b450:	0692      	lsls	r2, r2, #26
 800b452:	d42b      	bmi.n	800b4ac <_printf_common+0xb0>
 800b454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b458:	4649      	mov	r1, r9
 800b45a:	4638      	mov	r0, r7
 800b45c:	47c0      	blx	r8
 800b45e:	3001      	adds	r0, #1
 800b460:	d01e      	beq.n	800b4a0 <_printf_common+0xa4>
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	68e5      	ldr	r5, [r4, #12]
 800b466:	6832      	ldr	r2, [r6, #0]
 800b468:	f003 0306 	and.w	r3, r3, #6
 800b46c:	2b04      	cmp	r3, #4
 800b46e:	bf08      	it	eq
 800b470:	1aad      	subeq	r5, r5, r2
 800b472:	68a3      	ldr	r3, [r4, #8]
 800b474:	6922      	ldr	r2, [r4, #16]
 800b476:	bf0c      	ite	eq
 800b478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b47c:	2500      	movne	r5, #0
 800b47e:	4293      	cmp	r3, r2
 800b480:	bfc4      	itt	gt
 800b482:	1a9b      	subgt	r3, r3, r2
 800b484:	18ed      	addgt	r5, r5, r3
 800b486:	2600      	movs	r6, #0
 800b488:	341a      	adds	r4, #26
 800b48a:	42b5      	cmp	r5, r6
 800b48c:	d11a      	bne.n	800b4c4 <_printf_common+0xc8>
 800b48e:	2000      	movs	r0, #0
 800b490:	e008      	b.n	800b4a4 <_printf_common+0xa8>
 800b492:	2301      	movs	r3, #1
 800b494:	4652      	mov	r2, sl
 800b496:	4649      	mov	r1, r9
 800b498:	4638      	mov	r0, r7
 800b49a:	47c0      	blx	r8
 800b49c:	3001      	adds	r0, #1
 800b49e:	d103      	bne.n	800b4a8 <_printf_common+0xac>
 800b4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a8:	3501      	adds	r5, #1
 800b4aa:	e7c6      	b.n	800b43a <_printf_common+0x3e>
 800b4ac:	18e1      	adds	r1, r4, r3
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	2030      	movs	r0, #48	; 0x30
 800b4b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4b6:	4422      	add	r2, r4
 800b4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4c0:	3302      	adds	r3, #2
 800b4c2:	e7c7      	b.n	800b454 <_printf_common+0x58>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	4622      	mov	r2, r4
 800b4c8:	4649      	mov	r1, r9
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	47c0      	blx	r8
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	d0e6      	beq.n	800b4a0 <_printf_common+0xa4>
 800b4d2:	3601      	adds	r6, #1
 800b4d4:	e7d9      	b.n	800b48a <_printf_common+0x8e>
	...

0800b4d8 <_printf_i>:
 800b4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4dc:	7e0f      	ldrb	r7, [r1, #24]
 800b4de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4e0:	2f78      	cmp	r7, #120	; 0x78
 800b4e2:	4691      	mov	r9, r2
 800b4e4:	4680      	mov	r8, r0
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	469a      	mov	sl, r3
 800b4ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4ee:	d807      	bhi.n	800b500 <_printf_i+0x28>
 800b4f0:	2f62      	cmp	r7, #98	; 0x62
 800b4f2:	d80a      	bhi.n	800b50a <_printf_i+0x32>
 800b4f4:	2f00      	cmp	r7, #0
 800b4f6:	f000 80d8 	beq.w	800b6aa <_printf_i+0x1d2>
 800b4fa:	2f58      	cmp	r7, #88	; 0x58
 800b4fc:	f000 80a3 	beq.w	800b646 <_printf_i+0x16e>
 800b500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b508:	e03a      	b.n	800b580 <_printf_i+0xa8>
 800b50a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b50e:	2b15      	cmp	r3, #21
 800b510:	d8f6      	bhi.n	800b500 <_printf_i+0x28>
 800b512:	a101      	add	r1, pc, #4	; (adr r1, 800b518 <_printf_i+0x40>)
 800b514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b518:	0800b571 	.word	0x0800b571
 800b51c:	0800b585 	.word	0x0800b585
 800b520:	0800b501 	.word	0x0800b501
 800b524:	0800b501 	.word	0x0800b501
 800b528:	0800b501 	.word	0x0800b501
 800b52c:	0800b501 	.word	0x0800b501
 800b530:	0800b585 	.word	0x0800b585
 800b534:	0800b501 	.word	0x0800b501
 800b538:	0800b501 	.word	0x0800b501
 800b53c:	0800b501 	.word	0x0800b501
 800b540:	0800b501 	.word	0x0800b501
 800b544:	0800b691 	.word	0x0800b691
 800b548:	0800b5b5 	.word	0x0800b5b5
 800b54c:	0800b673 	.word	0x0800b673
 800b550:	0800b501 	.word	0x0800b501
 800b554:	0800b501 	.word	0x0800b501
 800b558:	0800b6b3 	.word	0x0800b6b3
 800b55c:	0800b501 	.word	0x0800b501
 800b560:	0800b5b5 	.word	0x0800b5b5
 800b564:	0800b501 	.word	0x0800b501
 800b568:	0800b501 	.word	0x0800b501
 800b56c:	0800b67b 	.word	0x0800b67b
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	1d1a      	adds	r2, r3, #4
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	602a      	str	r2, [r5, #0]
 800b578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b57c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b580:	2301      	movs	r3, #1
 800b582:	e0a3      	b.n	800b6cc <_printf_i+0x1f4>
 800b584:	6820      	ldr	r0, [r4, #0]
 800b586:	6829      	ldr	r1, [r5, #0]
 800b588:	0606      	lsls	r6, r0, #24
 800b58a:	f101 0304 	add.w	r3, r1, #4
 800b58e:	d50a      	bpl.n	800b5a6 <_printf_i+0xce>
 800b590:	680e      	ldr	r6, [r1, #0]
 800b592:	602b      	str	r3, [r5, #0]
 800b594:	2e00      	cmp	r6, #0
 800b596:	da03      	bge.n	800b5a0 <_printf_i+0xc8>
 800b598:	232d      	movs	r3, #45	; 0x2d
 800b59a:	4276      	negs	r6, r6
 800b59c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5a0:	485e      	ldr	r0, [pc, #376]	; (800b71c <_printf_i+0x244>)
 800b5a2:	230a      	movs	r3, #10
 800b5a4:	e019      	b.n	800b5da <_printf_i+0x102>
 800b5a6:	680e      	ldr	r6, [r1, #0]
 800b5a8:	602b      	str	r3, [r5, #0]
 800b5aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5ae:	bf18      	it	ne
 800b5b0:	b236      	sxthne	r6, r6
 800b5b2:	e7ef      	b.n	800b594 <_printf_i+0xbc>
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	6820      	ldr	r0, [r4, #0]
 800b5b8:	1d19      	adds	r1, r3, #4
 800b5ba:	6029      	str	r1, [r5, #0]
 800b5bc:	0601      	lsls	r1, r0, #24
 800b5be:	d501      	bpl.n	800b5c4 <_printf_i+0xec>
 800b5c0:	681e      	ldr	r6, [r3, #0]
 800b5c2:	e002      	b.n	800b5ca <_printf_i+0xf2>
 800b5c4:	0646      	lsls	r6, r0, #25
 800b5c6:	d5fb      	bpl.n	800b5c0 <_printf_i+0xe8>
 800b5c8:	881e      	ldrh	r6, [r3, #0]
 800b5ca:	4854      	ldr	r0, [pc, #336]	; (800b71c <_printf_i+0x244>)
 800b5cc:	2f6f      	cmp	r7, #111	; 0x6f
 800b5ce:	bf0c      	ite	eq
 800b5d0:	2308      	moveq	r3, #8
 800b5d2:	230a      	movne	r3, #10
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5da:	6865      	ldr	r5, [r4, #4]
 800b5dc:	60a5      	str	r5, [r4, #8]
 800b5de:	2d00      	cmp	r5, #0
 800b5e0:	bfa2      	ittt	ge
 800b5e2:	6821      	ldrge	r1, [r4, #0]
 800b5e4:	f021 0104 	bicge.w	r1, r1, #4
 800b5e8:	6021      	strge	r1, [r4, #0]
 800b5ea:	b90e      	cbnz	r6, 800b5f0 <_printf_i+0x118>
 800b5ec:	2d00      	cmp	r5, #0
 800b5ee:	d04d      	beq.n	800b68c <_printf_i+0x1b4>
 800b5f0:	4615      	mov	r5, r2
 800b5f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5f6:	fb03 6711 	mls	r7, r3, r1, r6
 800b5fa:	5dc7      	ldrb	r7, [r0, r7]
 800b5fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b600:	4637      	mov	r7, r6
 800b602:	42bb      	cmp	r3, r7
 800b604:	460e      	mov	r6, r1
 800b606:	d9f4      	bls.n	800b5f2 <_printf_i+0x11a>
 800b608:	2b08      	cmp	r3, #8
 800b60a:	d10b      	bne.n	800b624 <_printf_i+0x14c>
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	07de      	lsls	r6, r3, #31
 800b610:	d508      	bpl.n	800b624 <_printf_i+0x14c>
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	6861      	ldr	r1, [r4, #4]
 800b616:	4299      	cmp	r1, r3
 800b618:	bfde      	ittt	le
 800b61a:	2330      	movle	r3, #48	; 0x30
 800b61c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b620:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b624:	1b52      	subs	r2, r2, r5
 800b626:	6122      	str	r2, [r4, #16]
 800b628:	f8cd a000 	str.w	sl, [sp]
 800b62c:	464b      	mov	r3, r9
 800b62e:	aa03      	add	r2, sp, #12
 800b630:	4621      	mov	r1, r4
 800b632:	4640      	mov	r0, r8
 800b634:	f7ff fee2 	bl	800b3fc <_printf_common>
 800b638:	3001      	adds	r0, #1
 800b63a:	d14c      	bne.n	800b6d6 <_printf_i+0x1fe>
 800b63c:	f04f 30ff 	mov.w	r0, #4294967295
 800b640:	b004      	add	sp, #16
 800b642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b646:	4835      	ldr	r0, [pc, #212]	; (800b71c <_printf_i+0x244>)
 800b648:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b64c:	6829      	ldr	r1, [r5, #0]
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	f851 6b04 	ldr.w	r6, [r1], #4
 800b654:	6029      	str	r1, [r5, #0]
 800b656:	061d      	lsls	r5, r3, #24
 800b658:	d514      	bpl.n	800b684 <_printf_i+0x1ac>
 800b65a:	07df      	lsls	r7, r3, #31
 800b65c:	bf44      	itt	mi
 800b65e:	f043 0320 	orrmi.w	r3, r3, #32
 800b662:	6023      	strmi	r3, [r4, #0]
 800b664:	b91e      	cbnz	r6, 800b66e <_printf_i+0x196>
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	f023 0320 	bic.w	r3, r3, #32
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	2310      	movs	r3, #16
 800b670:	e7b0      	b.n	800b5d4 <_printf_i+0xfc>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	f043 0320 	orr.w	r3, r3, #32
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	2378      	movs	r3, #120	; 0x78
 800b67c:	4828      	ldr	r0, [pc, #160]	; (800b720 <_printf_i+0x248>)
 800b67e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b682:	e7e3      	b.n	800b64c <_printf_i+0x174>
 800b684:	0659      	lsls	r1, r3, #25
 800b686:	bf48      	it	mi
 800b688:	b2b6      	uxthmi	r6, r6
 800b68a:	e7e6      	b.n	800b65a <_printf_i+0x182>
 800b68c:	4615      	mov	r5, r2
 800b68e:	e7bb      	b.n	800b608 <_printf_i+0x130>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	6826      	ldr	r6, [r4, #0]
 800b694:	6961      	ldr	r1, [r4, #20]
 800b696:	1d18      	adds	r0, r3, #4
 800b698:	6028      	str	r0, [r5, #0]
 800b69a:	0635      	lsls	r5, r6, #24
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	d501      	bpl.n	800b6a4 <_printf_i+0x1cc>
 800b6a0:	6019      	str	r1, [r3, #0]
 800b6a2:	e002      	b.n	800b6aa <_printf_i+0x1d2>
 800b6a4:	0670      	lsls	r0, r6, #25
 800b6a6:	d5fb      	bpl.n	800b6a0 <_printf_i+0x1c8>
 800b6a8:	8019      	strh	r1, [r3, #0]
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6123      	str	r3, [r4, #16]
 800b6ae:	4615      	mov	r5, r2
 800b6b0:	e7ba      	b.n	800b628 <_printf_i+0x150>
 800b6b2:	682b      	ldr	r3, [r5, #0]
 800b6b4:	1d1a      	adds	r2, r3, #4
 800b6b6:	602a      	str	r2, [r5, #0]
 800b6b8:	681d      	ldr	r5, [r3, #0]
 800b6ba:	6862      	ldr	r2, [r4, #4]
 800b6bc:	2100      	movs	r1, #0
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f7f4 fe0e 	bl	80002e0 <memchr>
 800b6c4:	b108      	cbz	r0, 800b6ca <_printf_i+0x1f2>
 800b6c6:	1b40      	subs	r0, r0, r5
 800b6c8:	6060      	str	r0, [r4, #4]
 800b6ca:	6863      	ldr	r3, [r4, #4]
 800b6cc:	6123      	str	r3, [r4, #16]
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6d4:	e7a8      	b.n	800b628 <_printf_i+0x150>
 800b6d6:	6923      	ldr	r3, [r4, #16]
 800b6d8:	462a      	mov	r2, r5
 800b6da:	4649      	mov	r1, r9
 800b6dc:	4640      	mov	r0, r8
 800b6de:	47d0      	blx	sl
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	d0ab      	beq.n	800b63c <_printf_i+0x164>
 800b6e4:	6823      	ldr	r3, [r4, #0]
 800b6e6:	079b      	lsls	r3, r3, #30
 800b6e8:	d413      	bmi.n	800b712 <_printf_i+0x23a>
 800b6ea:	68e0      	ldr	r0, [r4, #12]
 800b6ec:	9b03      	ldr	r3, [sp, #12]
 800b6ee:	4298      	cmp	r0, r3
 800b6f0:	bfb8      	it	lt
 800b6f2:	4618      	movlt	r0, r3
 800b6f4:	e7a4      	b.n	800b640 <_printf_i+0x168>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	4632      	mov	r2, r6
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	4640      	mov	r0, r8
 800b6fe:	47d0      	blx	sl
 800b700:	3001      	adds	r0, #1
 800b702:	d09b      	beq.n	800b63c <_printf_i+0x164>
 800b704:	3501      	adds	r5, #1
 800b706:	68e3      	ldr	r3, [r4, #12]
 800b708:	9903      	ldr	r1, [sp, #12]
 800b70a:	1a5b      	subs	r3, r3, r1
 800b70c:	42ab      	cmp	r3, r5
 800b70e:	dcf2      	bgt.n	800b6f6 <_printf_i+0x21e>
 800b710:	e7eb      	b.n	800b6ea <_printf_i+0x212>
 800b712:	2500      	movs	r5, #0
 800b714:	f104 0619 	add.w	r6, r4, #25
 800b718:	e7f5      	b.n	800b706 <_printf_i+0x22e>
 800b71a:	bf00      	nop
 800b71c:	0800ba61 	.word	0x0800ba61
 800b720:	0800ba72 	.word	0x0800ba72

0800b724 <_sbrk_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4d06      	ldr	r5, [pc, #24]	; (800b740 <_sbrk_r+0x1c>)
 800b728:	2300      	movs	r3, #0
 800b72a:	4604      	mov	r4, r0
 800b72c:	4608      	mov	r0, r1
 800b72e:	602b      	str	r3, [r5, #0]
 800b730:	f7f5 fab4 	bl	8000c9c <_sbrk>
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	d102      	bne.n	800b73e <_sbrk_r+0x1a>
 800b738:	682b      	ldr	r3, [r5, #0]
 800b73a:	b103      	cbz	r3, 800b73e <_sbrk_r+0x1a>
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	200010d8 	.word	0x200010d8

0800b744 <__sread>:
 800b744:	b510      	push	{r4, lr}
 800b746:	460c      	mov	r4, r1
 800b748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74c:	f000 f8a0 	bl	800b890 <_read_r>
 800b750:	2800      	cmp	r0, #0
 800b752:	bfab      	itete	ge
 800b754:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b756:	89a3      	ldrhlt	r3, [r4, #12]
 800b758:	181b      	addge	r3, r3, r0
 800b75a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b75e:	bfac      	ite	ge
 800b760:	6563      	strge	r3, [r4, #84]	; 0x54
 800b762:	81a3      	strhlt	r3, [r4, #12]
 800b764:	bd10      	pop	{r4, pc}

0800b766 <__swrite>:
 800b766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b76a:	461f      	mov	r7, r3
 800b76c:	898b      	ldrh	r3, [r1, #12]
 800b76e:	05db      	lsls	r3, r3, #23
 800b770:	4605      	mov	r5, r0
 800b772:	460c      	mov	r4, r1
 800b774:	4616      	mov	r6, r2
 800b776:	d505      	bpl.n	800b784 <__swrite+0x1e>
 800b778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b77c:	2302      	movs	r3, #2
 800b77e:	2200      	movs	r2, #0
 800b780:	f000 f868 	bl	800b854 <_lseek_r>
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b78a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b78e:	81a3      	strh	r3, [r4, #12]
 800b790:	4632      	mov	r2, r6
 800b792:	463b      	mov	r3, r7
 800b794:	4628      	mov	r0, r5
 800b796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b79a:	f000 b817 	b.w	800b7cc <_write_r>

0800b79e <__sseek>:
 800b79e:	b510      	push	{r4, lr}
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a6:	f000 f855 	bl	800b854 <_lseek_r>
 800b7aa:	1c43      	adds	r3, r0, #1
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	bf15      	itete	ne
 800b7b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7ba:	81a3      	strheq	r3, [r4, #12]
 800b7bc:	bf18      	it	ne
 800b7be:	81a3      	strhne	r3, [r4, #12]
 800b7c0:	bd10      	pop	{r4, pc}

0800b7c2 <__sclose>:
 800b7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c6:	f000 b813 	b.w	800b7f0 <_close_r>
	...

0800b7cc <_write_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d07      	ldr	r5, [pc, #28]	; (800b7ec <_write_r+0x20>)
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	602a      	str	r2, [r5, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f7f5 fa0d 	bl	8000bfa <_write>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_write_r+0x1e>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_write_r+0x1e>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	200010d8 	.word	0x200010d8

0800b7f0 <_close_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d06      	ldr	r5, [pc, #24]	; (800b80c <_close_r+0x1c>)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	602b      	str	r3, [r5, #0]
 800b7fc:	f7f5 fa19 	bl	8000c32 <_close>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_close_r+0x1a>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_close_r+0x1a>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	200010d8 	.word	0x200010d8

0800b810 <_fstat_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	4d07      	ldr	r5, [pc, #28]	; (800b830 <_fstat_r+0x20>)
 800b814:	2300      	movs	r3, #0
 800b816:	4604      	mov	r4, r0
 800b818:	4608      	mov	r0, r1
 800b81a:	4611      	mov	r1, r2
 800b81c:	602b      	str	r3, [r5, #0]
 800b81e:	f7f5 fa14 	bl	8000c4a <_fstat>
 800b822:	1c43      	adds	r3, r0, #1
 800b824:	d102      	bne.n	800b82c <_fstat_r+0x1c>
 800b826:	682b      	ldr	r3, [r5, #0]
 800b828:	b103      	cbz	r3, 800b82c <_fstat_r+0x1c>
 800b82a:	6023      	str	r3, [r4, #0]
 800b82c:	bd38      	pop	{r3, r4, r5, pc}
 800b82e:	bf00      	nop
 800b830:	200010d8 	.word	0x200010d8

0800b834 <_isatty_r>:
 800b834:	b538      	push	{r3, r4, r5, lr}
 800b836:	4d06      	ldr	r5, [pc, #24]	; (800b850 <_isatty_r+0x1c>)
 800b838:	2300      	movs	r3, #0
 800b83a:	4604      	mov	r4, r0
 800b83c:	4608      	mov	r0, r1
 800b83e:	602b      	str	r3, [r5, #0]
 800b840:	f7f5 fa13 	bl	8000c6a <_isatty>
 800b844:	1c43      	adds	r3, r0, #1
 800b846:	d102      	bne.n	800b84e <_isatty_r+0x1a>
 800b848:	682b      	ldr	r3, [r5, #0]
 800b84a:	b103      	cbz	r3, 800b84e <_isatty_r+0x1a>
 800b84c:	6023      	str	r3, [r4, #0]
 800b84e:	bd38      	pop	{r3, r4, r5, pc}
 800b850:	200010d8 	.word	0x200010d8

0800b854 <_lseek_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	4d07      	ldr	r5, [pc, #28]	; (800b874 <_lseek_r+0x20>)
 800b858:	4604      	mov	r4, r0
 800b85a:	4608      	mov	r0, r1
 800b85c:	4611      	mov	r1, r2
 800b85e:	2200      	movs	r2, #0
 800b860:	602a      	str	r2, [r5, #0]
 800b862:	461a      	mov	r2, r3
 800b864:	f7f5 fa0c 	bl	8000c80 <_lseek>
 800b868:	1c43      	adds	r3, r0, #1
 800b86a:	d102      	bne.n	800b872 <_lseek_r+0x1e>
 800b86c:	682b      	ldr	r3, [r5, #0]
 800b86e:	b103      	cbz	r3, 800b872 <_lseek_r+0x1e>
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	bd38      	pop	{r3, r4, r5, pc}
 800b874:	200010d8 	.word	0x200010d8

0800b878 <__malloc_lock>:
 800b878:	4801      	ldr	r0, [pc, #4]	; (800b880 <__malloc_lock+0x8>)
 800b87a:	f7ff bb1d 	b.w	800aeb8 <__retarget_lock_acquire_recursive>
 800b87e:	bf00      	nop
 800b880:	200010cc 	.word	0x200010cc

0800b884 <__malloc_unlock>:
 800b884:	4801      	ldr	r0, [pc, #4]	; (800b88c <__malloc_unlock+0x8>)
 800b886:	f7ff bb18 	b.w	800aeba <__retarget_lock_release_recursive>
 800b88a:	bf00      	nop
 800b88c:	200010cc 	.word	0x200010cc

0800b890 <_read_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4d07      	ldr	r5, [pc, #28]	; (800b8b0 <_read_r+0x20>)
 800b894:	4604      	mov	r4, r0
 800b896:	4608      	mov	r0, r1
 800b898:	4611      	mov	r1, r2
 800b89a:	2200      	movs	r2, #0
 800b89c:	602a      	str	r2, [r5, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	f7f5 f98e 	bl	8000bc0 <_read>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	d102      	bne.n	800b8ae <_read_r+0x1e>
 800b8a8:	682b      	ldr	r3, [r5, #0]
 800b8aa:	b103      	cbz	r3, 800b8ae <_read_r+0x1e>
 800b8ac:	6023      	str	r3, [r4, #0]
 800b8ae:	bd38      	pop	{r3, r4, r5, pc}
 800b8b0:	200010d8 	.word	0x200010d8

0800b8b4 <_init>:
 800b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b6:	bf00      	nop
 800b8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ba:	bc08      	pop	{r3}
 800b8bc:	469e      	mov	lr, r3
 800b8be:	4770      	bx	lr

0800b8c0 <_fini>:
 800b8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c2:	bf00      	nop
 800b8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c6:	bc08      	pop	{r3}
 800b8c8:	469e      	mov	lr, r3
 800b8ca:	4770      	bx	lr
